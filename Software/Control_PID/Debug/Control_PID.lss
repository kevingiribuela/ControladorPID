
Control_PID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000182  00800100  00002a28  00002abc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  00800282  00800282  00002c3e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00002cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002654  00000000  00000000  00002e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b97  00000000  00000000  000054c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019f6  00000000  00000000  0000605b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  00007a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000729  00000000  00000000  00007ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000104a  00000000  00000000  00008611  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000965b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_1>
       8:	0c 94 a3 02 	jmp	0x546	; 0x546 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e2       	ldi	r30, 0x28	; 40
      7c:	fa e2       	ldi	r31, 0x2A	; 42
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 38       	cpi	r26, 0x82	; 130
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a2 e8       	ldi	r26, 0x82	; 130
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 31       	cpi	r26, 0x12	; 18
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <main>
      9e:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
﻿#include <avr/io.h>
#include <ADC.h>

void ADC_init(unsigned char mod){	// Rutina de inicializaci�n del ADC en modo Auto trigger por Output on compare match a 125kHz con ajuste a derecha
	// Vref: AVcc
	ADMUX|=(0<<REFS1);
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	90 81       	ld	r25, Z
      ac:	90 83       	st	Z, r25
	ADMUX|=(1<<REFS0);
      ae:	90 81       	ld	r25, Z
      b0:	90 64       	ori	r25, 0x40	; 64
      b2:	90 83       	st	Z, r25
	
	// ADLAR: Right Adjust
	ADMUX|=(0<<ADLAR);
      b4:	90 81       	ld	r25, Z
      b6:	90 83       	st	Z, r25
	
	if(mod==ADQ){
      b8:	89 30       	cpi	r24, 0x09	; 9
      ba:	39 f4       	brne	.+14     	; 0xca <ADC_init+0x24>
		// ADC Channel: ADC2
		ADMUX &=0xF0;
      bc:	80 81       	ld	r24, Z
      be:	80 7f       	andi	r24, 0xF0	; 240
      c0:	80 83       	st	Z, r24
		ADMUX|=2;
      c2:	80 81       	ld	r24, Z
      c4:	82 60       	ori	r24, 0x02	; 2
      c6:	80 83       	st	Z, r24
      c8:	0a c0       	rjmp	.+20     	; 0xde <ADC_init+0x38>
	}
	else if(mod==PID){
      ca:	8a 30       	cpi	r24, 0x0A	; 10
      cc:	41 f4       	brne	.+16     	; 0xde <ADC_init+0x38>
		// ADC Channel: ADC1
		ADMUX &=0xF0;
      ce:	ec e7       	ldi	r30, 0x7C	; 124
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	80 7f       	andi	r24, 0xF0	; 240
      d6:	80 83       	st	Z, r24
		ADMUX|=1;
      d8:	80 81       	ld	r24, Z
      da:	81 60       	ori	r24, 0x01	; 1
      dc:	80 83       	st	Z, r24
	}
	
	// ADC Auto Trigger Source: Timer 0 compare match A
	ADCSRB|=(0<<ADTS2);
      de:	eb e7       	ldi	r30, 0x7B	; 123
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	80 81       	ld	r24, Z
      e4:	80 83       	st	Z, r24
	ADCSRB|=(1<<ADTS1);
      e6:	80 81       	ld	r24, Z
      e8:	82 60       	ori	r24, 0x02	; 2
      ea:	80 83       	st	Z, r24
	ADCSRB|=(1<<ADTS0);
      ec:	80 81       	ld	r24, Z
      ee:	81 60       	ori	r24, 0x01	; 1
      f0:	80 83       	st	Z, r24
	
	// ADC Auto Trigger Enable: ON
	ADCSRA|=(1<<ADATE);
      f2:	ea e7       	ldi	r30, 0x7A	; 122
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	80 81       	ld	r24, Z
      f8:	80 62       	ori	r24, 0x20	; 32
      fa:	80 83       	st	Z, r24
	
	// ADC Interrupt: ON
	ADCSRA|=(1<<ADIE);
      fc:	80 81       	ld	r24, Z
      fe:	88 60       	ori	r24, 0x08	; 8
     100:	80 83       	st	Z, r24
	
	// ADC Prescaler: 128
	ADCSRA|=(1<<ADPS2);
     102:	80 81       	ld	r24, Z
     104:	84 60       	ori	r24, 0x04	; 4
     106:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADPS1);
     108:	80 81       	ld	r24, Z
     10a:	82 60       	ori	r24, 0x02	; 2
     10c:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADPS0);
     10e:	80 81       	ld	r24, Z
     110:	81 60       	ori	r24, 0x01	; 1
     112:	80 83       	st	Z, r24
	
	// ADC Digital Input Disable
	DIDR0|=(1<<ADC5D)|(1<<ADC4D)|(1<<ADC3D);
     114:	ae e7       	ldi	r26, 0x7E	; 126
     116:	b0 e0       	ldi	r27, 0x00	; 0
     118:	8c 91       	ld	r24, X
     11a:	88 63       	ori	r24, 0x38	; 56
     11c:	8c 93       	st	X, r24
	
	// ADC: ON
	ADCSRA|=(1<<ADEN);
     11e:	80 81       	ld	r24, Z
     120:	80 68       	ori	r24, 0x80	; 128
     122:	80 83       	st	Z, r24
     124:	08 95       	ret

00000126 <ADC_disable>:
}
void ADC_disable(void){				// Rutina de deshabilitacion del ADC
	ADCSRA&=~(1<<ADEN);
     126:	ea e7       	ldi	r30, 0x7A	; 122
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	8f 77       	andi	r24, 0x7F	; 127
     12e:	80 83       	st	Z, r24
     130:	08 95       	ret

00000132 <encoder_init>:
	#include <encoder.h>
	
	void encoder_init(void){
		/* PINOUT ENCODER CONFIGURATION */
		// PORTC0 as INPUT - CLK
		DDRC &=~(1<<DDC0);
     132:	87 b1       	in	r24, 0x07	; 7
     134:	8e 7f       	andi	r24, 0xFE	; 254
     136:	87 b9       	out	0x07, r24	; 7
		
		// PORTD2 as INPUT - DT
		DDRD &=~(1<<DDD2);
     138:	8a b1       	in	r24, 0x0a	; 10
     13a:	8b 7f       	andi	r24, 0xFB	; 251
     13c:	8a b9       	out	0x0a, r24	; 10
	
		// PORTD3 as Pull-Up INPUT - SWT
		DDRD &=~(1<<DDD3);
     13e:	8a b1       	in	r24, 0x0a	; 10
     140:	87 7f       	andi	r24, 0xF7	; 247
     142:	8a b9       	out	0x0a, r24	; 10
		PORTD|= (1<<PORTD3);
     144:	8b b1       	in	r24, 0x0b	; 11
     146:	88 60       	ori	r24, 0x08	; 8
     148:	8b b9       	out	0x0b, r24	; 11
		/********************************/
		
		
		/* INTERRUPT ENCODER CONFIGURATION */ 
		// Any logical change on INT0 generates an interrupt request.
		EICRA&=~(1<<ISC01);
     14a:	e9 e6       	ldi	r30, 0x69	; 105
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	80 81       	ld	r24, Z
     150:	8d 7f       	andi	r24, 0xFD	; 253
     152:	80 83       	st	Z, r24
		EICRA|= (1<<ISC00);
     154:	80 81       	ld	r24, Z
     156:	81 60       	ori	r24, 0x01	; 1
     158:	80 83       	st	Z, r24
		
		// The falling edge of INT1 generates an interrupt request.
		EICRA|= (1<<ISC11);
     15a:	80 81       	ld	r24, Z
     15c:	88 60       	ori	r24, 0x08	; 8
     15e:	80 83       	st	Z, r24
		EICRA&=~(1<<ISC10);
     160:	80 81       	ld	r24, Z
     162:	8b 7f       	andi	r24, 0xFB	; 251
     164:	80 83       	st	Z, r24
		
		// Interrupt INT1/0 enable
		EIMSK|= (1<<INT1);
     166:	8d b3       	in	r24, 0x1d	; 29
     168:	82 60       	ori	r24, 0x02	; 2
     16a:	8d bb       	out	0x1d, r24	; 29
		EIMSK|= (1<<INT0);
     16c:	8d b3       	in	r24, 0x1d	; 29
     16e:	81 60       	ori	r24, 0x01	; 1
     170:	8d bb       	out	0x1d, r24	; 29
     172:	08 95       	ret

00000174 <rotation>:
	
	char rotation(void ){			// Deteccion de sentido de giro del encoder
		
		char comp1, comp2;
		
		comp2 = (PINC&(1<<CLK))>>CLK;
     174:	26 b1       	in	r18, 0x06	; 6
     176:	21 70       	andi	r18, 0x01	; 1
		comp1 = (PIND&(1<<DT))>>DT;
     178:	89 b1       	in	r24, 0x09	; 9
     17a:	84 70       	andi	r24, 0x04	; 4
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	95 95       	asr	r25
     180:	87 95       	ror	r24
     182:	95 95       	asr	r25
     184:	87 95       	ror	r24
		
		if(comp1==comp2){return '+';}
     186:	28 13       	cpse	r18, r24
     188:	02 c0       	rjmp	.+4      	; 0x18e <rotation+0x1a>
     18a:	8b e2       	ldi	r24, 0x2B	; 43
     18c:	08 95       	ret
		else{return '-';}
     18e:	8d e2       	ldi	r24, 0x2D	; 45
     190:	08 95       	ret

00000192 <LCD_prepare>:
}

// Prepare data
void LCD_prepare(char nibble,char data){
	/*Prepare high nibble*/
	if(nibble=='H'){
     192:	88 34       	cpi	r24, 0x48	; 72
     194:	a1 f4       	brne	.+40     	; 0x1be <LCD_prepare+0x2c>
		PORTB=(PORTB&0xFC)|((data>>6)&(0x03));	// PORTB = XXXX XXD7D6
     196:	85 b1       	in	r24, 0x05	; 5
     198:	8c 7f       	andi	r24, 0xFC	; 252
     19a:	96 2f       	mov	r25, r22
     19c:	92 95       	swap	r25
     19e:	96 95       	lsr	r25
     1a0:	96 95       	lsr	r25
     1a2:	93 70       	andi	r25, 0x03	; 3
     1a4:	89 2b       	or	r24, r25
     1a6:	85 b9       	out	0x05, r24	; 5
		PORTD=(PORTD&0x3F)|((data<<2)&(0xC0));	// PORTD = D5D4XX XXXX
     1a8:	8b b1       	in	r24, 0x0b	; 11
     1aa:	70 e0       	ldi	r23, 0x00	; 0
     1ac:	66 0f       	add	r22, r22
     1ae:	77 1f       	adc	r23, r23
     1b0:	66 0f       	add	r22, r22
     1b2:	77 1f       	adc	r23, r23
     1b4:	8f 73       	andi	r24, 0x3F	; 63
     1b6:	60 7c       	andi	r22, 0xC0	; 192
     1b8:	68 2b       	or	r22, r24
     1ba:	6b b9       	out	0x0b, r22	; 11
     1bc:	08 95       	ret
	}
	/*Prepare low nibble*/
	else if(nibble=='L'){
     1be:	8c 34       	cpi	r24, 0x4C	; 76
     1c0:	81 f4       	brne	.+32     	; 0x1e2 <LCD_prepare+0x50>
		PORTB=(PORTB&0xFC)|((data>>2)&(0x03));	// PORTB = XXXX XXD3D2
     1c2:	85 b1       	in	r24, 0x05	; 5
     1c4:	96 2f       	mov	r25, r22
     1c6:	96 95       	lsr	r25
     1c8:	96 95       	lsr	r25
     1ca:	93 70       	andi	r25, 0x03	; 3
     1cc:	8c 7f       	andi	r24, 0xFC	; 252
     1ce:	89 2b       	or	r24, r25
     1d0:	85 b9       	out	0x05, r24	; 5
		PORTD=(PORTD&0x3F)|((data<<6)&(0xC0));	// PORTD = D1D0XX XXXX
     1d2:	8b b1       	in	r24, 0x0b	; 11
     1d4:	90 e4       	ldi	r25, 0x40	; 64
     1d6:	69 9f       	mul	r22, r25
     1d8:	b0 01       	movw	r22, r0
     1da:	11 24       	eor	r1, r1
     1dc:	8f 73       	andi	r24, 0x3F	; 63
     1de:	68 2b       	or	r22, r24
     1e0:	6b b9       	out	0x0b, r22	; 11
     1e2:	08 95       	ret

000001e4 <LCD_cmd>:
	}
}

// Sent commands
void LCD_cmd(unsigned char cmd){
     1e4:	cf 93       	push	r28
     1e6:	c8 2f       	mov	r28, r24

	PORTD&=~(1<<RS);		// Select command register
     1e8:	8b b1       	in	r24, 0x0b	; 11
     1ea:	8f 7e       	andi	r24, 0xEF	; 239
     1ec:	8b b9       	out	0x0b, r24	; 11

	// Sent high nibble
	LCD_prepare('H',cmd);	// Prepare high nibble
     1ee:	6c 2f       	mov	r22, r28
     1f0:	88 e4       	ldi	r24, 0x48	; 72
     1f2:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_prepare>
	PORTD|=(1<<EN);			// Set EN
     1f6:	8b b1       	in	r24, 0x0b	; 11
     1f8:	80 62       	ori	r24, 0x20	; 32
     1fa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fc:	8f e9       	ldi	r24, 0x9F	; 159
     1fe:	9f e0       	ldi	r25, 0x0F	; 15
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <LCD_cmd+0x1c>
     204:	00 c0       	rjmp	.+0      	; 0x206 <LCD_cmd+0x22>
     206:	00 00       	nop
	_delay_ms(1);
	PORTD&=~(1<<EN);		// Clear EN
     208:	8b b1       	in	r24, 0x0b	; 11
     20a:	8f 7d       	andi	r24, 0xDF	; 223
     20c:	8b b9       	out	0x0b, r24	; 11
     20e:	8f e9       	ldi	r24, 0x9F	; 159
     210:	9f e0       	ldi	r25, 0x0F	; 15
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <LCD_cmd+0x2e>
     216:	00 c0       	rjmp	.+0      	; 0x218 <LCD_cmd+0x34>
     218:	00 00       	nop
	_delay_ms(1);
	
	// Sent low nibble
	LCD_prepare('L',cmd);	// Prepare low nibble
     21a:	6c 2f       	mov	r22, r28
     21c:	8c e4       	ldi	r24, 0x4C	; 76
     21e:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_prepare>
	PORTD|=(1<<EN);			// Set EN
     222:	8b b1       	in	r24, 0x0b	; 11
     224:	80 62       	ori	r24, 0x20	; 32
     226:	8b b9       	out	0x0b, r24	; 11
     228:	8f e9       	ldi	r24, 0x9F	; 159
     22a:	9f e0       	ldi	r25, 0x0F	; 15
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <LCD_cmd+0x48>
     230:	00 c0       	rjmp	.+0      	; 0x232 <LCD_cmd+0x4e>
     232:	00 00       	nop
	_delay_ms(1);
	PORTD&=~(1<<EN);		// Clear EN
     234:	8b b1       	in	r24, 0x0b	; 11
     236:	8f 7d       	andi	r24, 0xDF	; 223
     238:	8b b9       	out	0x0b, r24	; 11
     23a:	8f e9       	ldi	r24, 0x9F	; 159
     23c:	9f e0       	ldi	r25, 0x0F	; 15
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <LCD_cmd+0x5a>
     242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_cmd+0x60>
     244:	00 00       	nop
	_delay_ms(1);
}
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <LCD_Init>:
#define RS PORTD4			// RS:		PIND4

// LCD init
void LCD_Init(void){
	  
	DDRD|=(1<<RS);			// RS -> OUTPUT
     24a:	8a b1       	in	r24, 0x0a	; 10
     24c:	80 61       	ori	r24, 0x10	; 16
     24e:	8a b9       	out	0x0a, r24	; 10
	DDRD|=(1<<EN);			// EN  -> OUTPUT
     250:	8a b1       	in	r24, 0x0a	; 10
     252:	80 62       	ori	r24, 0x20	; 32
     254:	8a b9       	out	0x0a, r24	; 10

	DDRD|=(1<<PORTD6);		// D4 -> OUTPUT
     256:	8a b1       	in	r24, 0x0a	; 10
     258:	80 64       	ori	r24, 0x40	; 64
     25a:	8a b9       	out	0x0a, r24	; 10
	DDRD|=(1<<PORTD7);		// D5 -> OUTPUT
     25c:	8a b1       	in	r24, 0x0a	; 10
     25e:	80 68       	ori	r24, 0x80	; 128
     260:	8a b9       	out	0x0a, r24	; 10
	DDRB|=(1<<PORTB0);		// D6 -> OUTPUT
     262:	84 b1       	in	r24, 0x04	; 4
     264:	81 60       	ori	r24, 0x01	; 1
     266:	84 b9       	out	0x04, r24	; 4
	DDRB|=(1<<PORTB1);		// D7 -> OUTPUT
     268:	84 b1       	in	r24, 0x04	; 4
     26a:	82 60       	ori	r24, 0x02	; 2
     26c:	84 b9       	out	0x04, r24	; 4
     26e:	2f ef       	ldi	r18, 0xFF	; 255
     270:	83 ef       	ldi	r24, 0xF3	; 243
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	21 50       	subi	r18, 0x01	; 1
     276:	80 40       	sbci	r24, 0x00	; 0
     278:	90 40       	sbci	r25, 0x00	; 0
     27a:	e1 f7       	brne	.-8      	; 0x274 <LCD_Init+0x2a>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <LCD_Init+0x34>
     27e:	00 00       	nop
	
	_delay_ms(40);			// Wait 40mS for power supply stability

	LCD_cmd(0x03);			// Datasheet suggestion
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_cmd>
     286:	8f e3       	ldi	r24, 0x3F	; 63
     288:	9c e9       	ldi	r25, 0x9C	; 156
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <LCD_Init+0x40>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <LCD_Init+0x46>
     290:	00 00       	nop
	_delay_ms(10);			// Datasheet suggestion

	LCD_cmd(0x03);			// Datasheet suggestion
     292:	83 e0       	ldi	r24, 0x03	; 3
     294:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_cmd>
     298:	9f ef       	ldi	r25, 0xFF	; 255
     29a:	21 ee       	ldi	r18, 0xE1	; 225
     29c:	84 e0       	ldi	r24, 0x04	; 4
     29e:	91 50       	subi	r25, 0x01	; 1
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	80 40       	sbci	r24, 0x00	; 0
     2a4:	e1 f7       	brne	.-8      	; 0x29e <LCD_Init+0x54>
     2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_Init+0x5e>
     2a8:	00 00       	nop
	_delay_ms(100);			// Datasheet suggestion

	LCD_cmd(0x03);			// Datasheet suggestion
     2aa:	83 e0       	ldi	r24, 0x03	; 3
     2ac:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_cmd>

	LCD_cmd(0x02);			// Display enable
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_cmd>
	LCD_cmd(0x28);			// 4bit mode 16X2 LCD
     2b6:	88 e2       	ldi	r24, 0x28	; 40
     2b8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_cmd>
	LCD_cmd(0x0C);			// Display ON, Cursor OFF	
     2bc:	8c e0       	ldi	r24, 0x0C	; 12
     2be:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_cmd>
	LCD_cmd(0x01);			// Clear Display
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_cmd>
	LCD_cmd(0x06);			// Entry mode set: Increment cursor when write(shift cursor to right)
     2c8:	86 e0       	ldi	r24, 0x06	; 6
     2ca:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_cmd>
     2ce:	08 95       	ret

000002d0 <LCD_write>:
	PORTD&=~(1<<EN);		// Clear EN
	_delay_ms(1);
}

// Write data
void LCD_write(unsigned char data){
     2d0:	cf 93       	push	r28
     2d2:	c8 2f       	mov	r28, r24

	PORTD  |= (1<<RS);		// Select data register
     2d4:	8b b1       	in	r24, 0x0b	; 11
     2d6:	80 61       	ori	r24, 0x10	; 16
     2d8:	8b b9       	out	0x0b, r24	; 11

	// Sent high nibble
	LCD_prepare('H',data);	// Prepare high nibble
     2da:	6c 2f       	mov	r22, r28
     2dc:	88 e4       	ldi	r24, 0x48	; 72
     2de:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_prepare>
	PORTD  |= (1<<EN);		// Set EN
     2e2:	8b b1       	in	r24, 0x0b	; 11
     2e4:	80 62       	ori	r24, 0x20	; 32
     2e6:	8b b9       	out	0x0b, r24	; 11
     2e8:	8f e9       	ldi	r24, 0x9F	; 159
     2ea:	9f e0       	ldi	r25, 0x0F	; 15
     2ec:	01 97       	sbiw	r24, 0x01	; 1
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCD_write+0x1c>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD_write+0x22>
     2f2:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1<<EN);  	// Clear EN
     2f4:	8b b1       	in	r24, 0x0b	; 11
     2f6:	8f 7d       	andi	r24, 0xDF	; 223
     2f8:	8b b9       	out	0x0b, r24	; 11
     2fa:	8f e9       	ldi	r24, 0x9F	; 159
     2fc:	9f e0       	ldi	r25, 0x0F	; 15
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_write+0x2e>
     302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_write+0x34>
     304:	00 00       	nop
	_delay_ms(1);

	// Sent low nibble
	LCD_prepare('L',data);	// Prepare low nibble
     306:	6c 2f       	mov	r22, r28
     308:	8c e4       	ldi	r24, 0x4C	; 76
     30a:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_prepare>
	PORTD  |= (1<<EN);		// Set EN
     30e:	8b b1       	in	r24, 0x0b	; 11
     310:	80 62       	ori	r24, 0x20	; 32
     312:	8b b9       	out	0x0b, r24	; 11
     314:	8f e9       	ldi	r24, 0x9F	; 159
     316:	9f e0       	ldi	r25, 0x0F	; 15
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_write+0x48>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_write+0x4e>
     31e:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1<<EN);		// Clear EN
     320:	8b b1       	in	r24, 0x0b	; 11
     322:	8f 7d       	andi	r24, 0xDF	; 223
     324:	8b b9       	out	0x0b, r24	; 11
     326:	8f e9       	ldi	r24, 0x9F	; 159
     328:	9f e0       	ldi	r25, 0x0F	; 15
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_write+0x5a>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_write+0x60>
     330:	00 00       	nop
	_delay_ms(1);
}
     332:	cf 91       	pop	r28
     334:	08 95       	ret

00000336 <LCD_gotoxy>:


// Cursor location
void LCD_gotoxy (unsigned char row,unsigned char pos){            // row=1,2  pos=0,...,15
   	 char location=0;
   	 if(row<=1)
     336:	82 30       	cpi	r24, 0x02	; 2
     338:	30 f4       	brcc	.+12     	; 0x346 <LCD_gotoxy+0x10>
   	 {
	   	 location=(0x80) | ((pos) & 0x0f);  /*Print message on 1st row and desired location*/
     33a:	86 2f       	mov	r24, r22
     33c:	8f 70       	andi	r24, 0x0F	; 15
	   	 LCD_cmd(location);
     33e:	80 68       	ori	r24, 0x80	; 128
     340:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_cmd>
     344:	08 95       	ret
   	 }
   	 else
   	 {
	   	 location=(0xC0) | ((pos) & 0x0f);  /*Print message on 2nd row and desired location*/
     346:	86 2f       	mov	r24, r22
     348:	8f 70       	andi	r24, 0x0F	; 15
	   	 LCD_cmd(location);
     34a:	80 6c       	ori	r24, 0xC0	; 192
     34c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_cmd>
     350:	08 95       	ret

00000352 <LCD_write_string>:

	 LCD_write_string(msg);
 }  

// Write string
void LCD_write_string(const char *msg){
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	ec 01       	movw	r28, r24
	while((*msg)!=0)
     358:	03 c0       	rjmp	.+6      	; 0x360 <LCD_write_string+0xe>
	{
		LCD_write(*msg);
     35a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
		msg++;
     35e:	21 96       	adiw	r28, 0x01	; 1
	 LCD_write_string(msg);
 }  

// Write string
void LCD_write_string(const char *msg){
	while((*msg)!=0)
     360:	88 81       	ld	r24, Y
     362:	81 11       	cpse	r24, r1
     364:	fa cf       	rjmp	.-12     	; 0x35a <LCD_write_string+0x8>
	{
		LCD_write(*msg);
		msg++;
	}
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <LCD_write_string_xy>:
   	 }
}

// Write string in (x,y) --> x=1,2   y=0,...,15
void LCD_write_string_xy(const char *msg, unsigned char row, unsigned char pos)
 {
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	ec 01       	movw	r28, r24
	 char location=0;
	 if(row<=1)
     372:	62 30       	cpi	r22, 0x02	; 2
     374:	30 f4       	brcc	.+12     	; 0x382 <LCD_write_string_xy+0x16>
	 {
		 location=(0x80) | ((pos) & 0x0f);  /*Print message on 1st row and desired location*/
     376:	84 2f       	mov	r24, r20
     378:	8f 70       	andi	r24, 0x0F	; 15
		 LCD_cmd(location);
     37a:	80 68       	ori	r24, 0x80	; 128
     37c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_cmd>
     380:	05 c0       	rjmp	.+10     	; 0x38c <LCD_write_string_xy+0x20>
	 }
	 else
	 {
		 location=(0xC0) | ((pos) & 0x0f);  /*Print message on 2nd row and desired location*/
     382:	84 2f       	mov	r24, r20
     384:	8f 70       	andi	r24, 0x0F	; 15
		 LCD_cmd(location);
     386:	80 6c       	ori	r24, 0xC0	; 192
     388:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_cmd>
	 }
	 

	 LCD_write_string(msg);
     38c:	ce 01       	movw	r24, r28
     38e:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_write_string>
 }  
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <LCD_clear>:
	}
}

// Clear display
 void LCD_clear(void){
	 LCD_cmd(0x01);
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_cmd>
     39e:	08 95       	ret

000003a0 <LCD_blinkON>:
 }
 
// Turn on cursor
 void LCD_blinkON(void){
	 LCD_cmd(0x0F);			// Cursor Off
     3a0:	8f e0       	ldi	r24, 0x0F	; 15
     3a2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_cmd>
     3a6:	8f e9       	ldi	r24, 0x9F	; 159
     3a8:	9f e0       	ldi	r25, 0x0F	; 15
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <LCD_blinkON+0xa>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <LCD_blinkON+0x10>
     3b0:	00 00       	nop
     3b2:	08 95       	ret

000003b4 <LCD_blinkOFF>:
	 _delay_ms(1);
 }
 
// Turn off cursor
 void LCD_blinkOFF(void){
	 LCD_cmd(0x0C);			// Cursor Off
     3b4:	8c e0       	ldi	r24, 0x0C	; 12
     3b6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_cmd>
     3ba:	8f e9       	ldi	r24, 0x9F	; 159
     3bc:	9f e0       	ldi	r25, 0x0F	; 15
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <LCD_blinkOFF+0xa>
     3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <LCD_blinkOFF+0x10>
     3c4:	00 00       	nop
     3c6:	08 95       	ret

000003c8 <PWM_init>:
}

void PWM_on(void){
	TCCR1B|=(0<<CS12);
	TCCR1B|=(0<<CS11);
	TCCR1B|=(1<<CS10);
     3c8:	8f ef       	ldi	r24, 0xFF	; 255
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     3d0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     3d4:	a0 e8       	ldi	r26, 0x80	; 128
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	8c 91       	ld	r24, X
     3da:	80 62       	ori	r24, 0x20	; 32
     3dc:	8c 93       	st	X, r24
     3de:	e1 e8       	ldi	r30, 0x81	; 129
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	80 61       	ori	r24, 0x10	; 16
     3e6:	80 83       	st	Z, r24
     3e8:	80 81       	ld	r24, Z
     3ea:	88 60       	ori	r24, 0x08	; 8
     3ec:	80 83       	st	Z, r24
     3ee:	8c 91       	ld	r24, X
     3f0:	82 60       	ori	r24, 0x02	; 2
     3f2:	8c 93       	st	X, r24
     3f4:	8c 91       	ld	r24, X
     3f6:	8c 93       	st	X, r24
     3f8:	80 81       	ld	r24, Z
     3fa:	80 83       	st	Z, r24
     3fc:	80 81       	ld	r24, Z
     3fe:	80 83       	st	Z, r24
     400:	80 81       	ld	r24, Z
     402:	81 60       	ori	r24, 0x01	; 1
     404:	80 83       	st	Z, r24
     406:	08 95       	ret

00000408 <PWM_duty>:
}

void PWM_duty(float control){	// Rutina de actualizaci�n del ciclo de trabajo del PWM.
	OCR1B=(uint16_t)(control*1024/5);
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e8       	ldi	r20, 0x80	; 128
     40e:	54 e4       	ldi	r21, 0x44	; 68
     410:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     414:	20 e0       	ldi	r18, 0x00	; 0
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	40 ea       	ldi	r20, 0xA0	; 160
     41a:	50 e4       	ldi	r21, 0x40	; 64
     41c:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
     420:	0e 94 2d 13 	call	0x265a	; 0x265a <__fixunssfsi>
     424:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     428:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     42c:	08 95       	ret

0000042e <USART_Init>:

// UART Init
void USART_Init(void){
	
	// Mode select: Asynchronous USART
	UCSR0C|=(0<<UMSEL01)|(0<<UMSEL00);
     42e:	e2 ec       	ldi	r30, 0xC2	; 194
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	80 81       	ld	r24, Z
     434:	80 83       	st	Z, r24
	
	// Parity mode: Disabled
	UCSR0C|=(0<<UPM01)|(0<<UPM00);
     436:	80 81       	ld	r24, Z
     438:	80 83       	st	Z, r24
	
	// Stop bit: 1 bits
	UCSR0C|=(0<<USBS0);
     43a:	80 81       	ld	r24, Z
     43c:	80 83       	st	Z, r24
	
	// Number of data bits: 8 bits
	UCSR0B|=(0<<UCSZ02);
     43e:	a1 ec       	ldi	r26, 0xC1	; 193
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	8c 91       	ld	r24, X
     444:	8c 93       	st	X, r24
	UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
     446:	80 81       	ld	r24, Z
     448:	86 60       	ori	r24, 0x06	; 6
     44a:	80 83       	st	Z, r24
	
	// Clock polarity: Off
	UCSR0A|=(0<<UCPOL0);
     44c:	e0 ec       	ldi	r30, 0xC0	; 192
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	80 81       	ld	r24, Z
     452:	80 83       	st	Z, r24
	
	// UBRR set at baud rate: 9600 bauds
	UBRR0H=(unsigned char)((MYUBRR)>>8);
     454:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L=(unsigned char)(MYUBRR);
     458:	87 e6       	ldi	r24, 0x67	; 103
     45a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Receive Interrupt enable 
	UCSR0B|=(1<<RXCIE0);
     45e:	8c 91       	ld	r24, X
     460:	80 68       	ori	r24, 0x80	; 128
     462:	8c 93       	st	X, r24
     464:	08 95       	ret

00000466 <USART_write>:
}

// Write TX buffer
void USART_write(unsigned char data){
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
     466:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     46a:	95 ff       	sbrs	r25, 5
     46c:	fc cf       	rjmp	.-8      	; 0x466 <USART_write>
	
	// Put data into buffer, sends the data
	UDR0 = data;
     46e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     472:	08 95       	ret

00000474 <USART_read>:
}

// Read RX buffer
unsigned char USART_read(void){
	/* Get and return received data from buffer */
	return UDR0;
     474:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
     478:	08 95       	ret

0000047a <USART_enable>:

// Enable USART
void USART_enable(void){
	
	UCSR0B|=(1<<TXEN0)|(1<<RXEN0);
     47a:	e1 ec       	ldi	r30, 0xC1	; 193
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 81       	ld	r24, Z
     480:	88 61       	ori	r24, 0x18	; 24
     482:	80 83       	st	Z, r24
     484:	08 95       	ret

00000486 <USART_disable>:
}

// Disable USART
void USART_disable(void){
	
	UCSR0B&=~((1<<RXEN0)|(1<<TXEN0));
     486:	e1 ec       	ldi	r30, 0xC1	; 193
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	87 7e       	andi	r24, 0xE7	; 231
     48e:	80 83       	st	Z, r24
     490:	08 95       	ret

00000492 <__vector_18>:
	// Prescaler Timer0: 1024.
	TCCR0B|=(1<<CS02)|(0<<CS01)|(1<<CS00);
}
void mode_off(void){
	USART_disable();
	ADC_disable();
     492:	1f 92       	push	r1
     494:	0f 92       	push	r0
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	0f 92       	push	r0
     49a:	11 24       	eor	r1, r1
     49c:	2f 93       	push	r18
     49e:	3f 93       	push	r19
     4a0:	4f 93       	push	r20
     4a2:	5f 93       	push	r21
     4a4:	6f 93       	push	r22
     4a6:	7f 93       	push	r23
     4a8:	8f 93       	push	r24
     4aa:	9f 93       	push	r25
     4ac:	af 93       	push	r26
     4ae:	bf 93       	push	r27
     4b0:	ef 93       	push	r30
     4b2:	ff 93       	push	r31
     4b4:	0e 94 3a 02 	call	0x474	; 0x474 <USART_read>
     4b8:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <matlab>
     4bc:	ff 91       	pop	r31
     4be:	ef 91       	pop	r30
     4c0:	bf 91       	pop	r27
     4c2:	af 91       	pop	r26
     4c4:	9f 91       	pop	r25
     4c6:	8f 91       	pop	r24
     4c8:	7f 91       	pop	r23
     4ca:	6f 91       	pop	r22
     4cc:	5f 91       	pop	r21
     4ce:	4f 91       	pop	r20
     4d0:	3f 91       	pop	r19
     4d2:	2f 91       	pop	r18
     4d4:	0f 90       	pop	r0
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	0f 90       	pop	r0
     4da:	1f 90       	pop	r1
     4dc:	18 95       	reti

000004de <__vector_14>:
     4de:	1f 92       	push	r1
     4e0:	0f 92       	push	r0
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	0f 92       	push	r0
     4e6:	11 24       	eor	r1, r1
     4e8:	0f 90       	pop	r0
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	0f 90       	pop	r0
     4ee:	1f 90       	pop	r1
     4f0:	18 95       	reti

000004f2 <__vector_21>:
     4f2:	1f 92       	push	r1
     4f4:	0f 92       	push	r0
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	0f 92       	push	r0
     4fa:	11 24       	eor	r1, r1
     4fc:	2f 93       	push	r18
     4fe:	8f 93       	push	r24
     500:	9f 93       	push	r25
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <conversion>
     508:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <contador>
     50c:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <contador+0x1>
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <contador+0x1>
     516:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <contador>
     51a:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <contador>
     51e:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <contador+0x1>
     522:	84 3f       	cpi	r24, 0xF4	; 244
     524:	91 40       	sbci	r25, 0x01	; 1
     526:	39 f4       	brne	.+14     	; 0x536 <__vector_21+0x44>
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <actualizar>
     52e:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <contador+0x1>
     532:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <contador>
     536:	9f 91       	pop	r25
     538:	8f 91       	pop	r24
     53a:	2f 91       	pop	r18
     53c:	0f 90       	pop	r0
     53e:	0f be       	out	0x3f, r0	; 63
     540:	0f 90       	pop	r0
     542:	1f 90       	pop	r1
     544:	18 95       	reti

00000546 <__vector_2>:
     546:	1f 92       	push	r1
     548:	0f 92       	push	r0
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	0f 92       	push	r0
     54e:	11 24       	eor	r1, r1
     550:	8f 93       	push	r24
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <button>
     558:	8f 91       	pop	r24
     55a:	0f 90       	pop	r0
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	0f 90       	pop	r0
     560:	1f 90       	pop	r1
     562:	18 95       	reti

00000564 <__vector_1>:
     564:	1f 92       	push	r1
     566:	0f 92       	push	r0
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	0f 92       	push	r0
     56c:	11 24       	eor	r1, r1
     56e:	8f 93       	push	r24
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <turn>
     576:	8f 91       	pop	r24
     578:	0f 90       	pop	r0
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	0f 90       	pop	r0
     57e:	1f 90       	pop	r1
     580:	18 95       	reti

00000582 <TIMER0_init>:
     582:	84 b5       	in	r24, 0x24	; 36
     584:	84 bd       	out	0x24, r24	; 36
     586:	84 b5       	in	r24, 0x24	; 36
     588:	82 60       	ori	r24, 0x02	; 2
     58a:	84 bd       	out	0x24, r24	; 36
     58c:	85 b5       	in	r24, 0x25	; 37
     58e:	85 bd       	out	0x25, r24	; 37
     590:	8f e2       	ldi	r24, 0x2F	; 47
     592:	87 bd       	out	0x27, r24	; 39
     594:	ee e6       	ldi	r30, 0x6E	; 110
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 81       	ld	r24, Z
     59a:	82 60       	ori	r24, 0x02	; 2
     59c:	80 83       	st	Z, r24
     59e:	85 b5       	in	r24, 0x25	; 37
     5a0:	85 60       	ori	r24, 0x05	; 5
     5a2:	85 bd       	out	0x25, r24	; 37
     5a4:	08 95       	ret

000005a6 <print_value>:
			routine=1;
		}
	}
	return;
}
void print_value(unsigned char value_print, unsigned char cursor){	// Rutina de escritura de par�metros en display: 0.00 hasta 1.00
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	c8 2f       	mov	r28, r24
	int cursor_aux=cursor;
     5b0:	06 2f       	mov	r16, r22
     5b2:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char aux, i;
	if(value_print=='R'){
     5b4:	82 35       	cpi	r24, 0x52	; 82
     5b6:	39 f4       	brne	.+14     	; 0x5c6 <print_value+0x20>
		cursor_aux=5*cursor_aux;
     5b8:	c8 01       	movw	r24, r16
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	88 0f       	add	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	08 0f       	add	r16, r24
     5c4:	19 1f       	adc	r17, r25
	}
	LCD_gotoxy(2,0);
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
	LCD_write('>');
     5ce:	8e e3       	ldi	r24, 0x3E	; 62
     5d0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
	LCD_gotoxy(2,1);
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
	LCD_write(value_print);
     5dc:	8c 2f       	mov	r24, r28
     5de:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
	LCD_gotoxy(2,2);
     5e2:	62 e0       	ldi	r22, 0x02	; 2
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
	LCD_write('=');
     5ea:	8d e3       	ldi	r24, 0x3D	; 61
     5ec:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
	for(i=0;i<3;i++){
     5f0:	c0 e0       	ldi	r28, 0x00	; 0
     5f2:	25 c0       	rjmp	.+74     	; 0x63e <print_value+0x98>
		aux=cursor_aux%10;
		cursor_aux=cursor_aux/10;
     5f4:	c8 01       	movw	r24, r16
     5f6:	6a e0       	ldi	r22, 0x0A	; 10
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__divmodhi4>
     5fe:	8b 01       	movw	r16, r22
     600:	d8 2f       	mov	r29, r24
		if(i==2){
     602:	c2 30       	cpi	r28, 0x02	; 2
     604:	61 f4       	brne	.+24     	; 0x61e <print_value+0x78>
			LCD_gotoxy(2,4);
     606:	64 e0       	ldi	r22, 0x04	; 4
     608:	82 e0       	ldi	r24, 0x02	; 2
     60a:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
			LCD_write(',');
     60e:	8c e2       	ldi	r24, 0x2C	; 44
     610:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
			LCD_gotoxy(2,3);
     614:	63 e0       	ldi	r22, 0x03	; 3
     616:	82 e0       	ldi	r24, 0x02	; 2
     618:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
     61c:	05 c0       	rjmp	.+10     	; 0x628 <print_value+0x82>
		}
		else{
			LCD_gotoxy(2,6-i);
     61e:	66 e0       	ldi	r22, 0x06	; 6
     620:	6c 1b       	sub	r22, r28
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
		}
		LCD_write(48+aux);
     628:	80 e3       	ldi	r24, 0x30	; 48
     62a:	8d 0f       	add	r24, r29
     62c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
		if(i==2){
     630:	c2 30       	cpi	r28, 0x02	; 2
     632:	21 f4       	brne	.+8      	; 0x63c <print_value+0x96>
			LCD_gotoxy(2,7);
     634:	67 e0       	ldi	r22, 0x07	; 7
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
	LCD_write('>');
	LCD_gotoxy(2,1);
	LCD_write(value_print);
	LCD_gotoxy(2,2);
	LCD_write('=');
	for(i=0;i<3;i++){
     63c:	cf 5f       	subi	r28, 0xFF	; 255
     63e:	c3 30       	cpi	r28, 0x03	; 3
     640:	c8 f2       	brcs	.-78     	; 0x5f4 <print_value+0x4e>
		if(i==2){
			LCD_gotoxy(2,7);
		}
	}
	return;
}
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	08 95       	ret

0000064c <PID_parametters>:
}

/******PID functions*******/
void PID_parametters(void ){
	//select=0--> Vref	 select=1--> A		select=2--> b		select=3--> c		select=4--> Atras		select=5-->OK
	LCD_clear();
     64c:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_clear>
	LCD_write_string_xy("Parametros: ",1,0);
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	80 e3       	ldi	r24, 0x30	; 48
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
	print_value('R',curRef);
     65c:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <curRef>
     660:	82 e5       	ldi	r24, 0x52	; 82
     662:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <print_value>
	
	//Asigno valores por defecto
	x_ref[0]=(float)curRef*5/100;
     666:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <curRef>
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__floatunsisf>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 ea       	ldi	r20, 0xA0	; 160
     67a:	50 e4       	ldi	r21, 0x40	; 64
     67c:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	48 ec       	ldi	r20, 0xC8	; 200
     686:	52 e4       	ldi	r21, 0x42	; 66
     688:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
     68c:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <x_ref>
     690:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <x_ref+0x1>
     694:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <x_ref+0x2>
     698:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <x_ref+0x3>
	A=(float)curA/100;
     69c:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <curA>
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__floatunsisf>
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	48 ec       	ldi	r20, 0xC8	; 200
     6b0:	52 e4       	ldi	r21, 0x42	; 66
     6b2:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
     6b6:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <A>
     6ba:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <A+0x1>
     6be:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <A+0x2>
     6c2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <A+0x3>
	b=(float)curb/100;
     6c6:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <curb>
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__floatunsisf>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	48 ec       	ldi	r20, 0xC8	; 200
     6da:	52 e4       	ldi	r21, 0x42	; 66
     6dc:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
     6e0:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <b>
     6e4:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <b+0x1>
     6e8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <b+0x2>
     6ec:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <b+0x3>
	c=(float)curc/100;
     6f0:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <curc>
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__floatunsisf>
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	48 ec       	ldi	r20, 0xC8	; 200
     704:	52 e4       	ldi	r21, 0x42	; 66
     706:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
     70a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
     70e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     712:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     716:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	ok=0;
     71a:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <ok>
	select=0;
     71e:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <select>
	while(ok!=1){
     722:	5e c2       	rjmp	.+1212   	; 0xbe0 <__stack+0x2e1>
		if(turn){					// Detecto si se giro el encoder
     724:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <turn>
     728:	88 23       	and	r24, r24
     72a:	09 f4       	brne	.+2      	; 0x72e <PID_parametters+0xe2>
     72c:	b9 c0       	rjmp	.+370    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
			if(rotation()=='+'){
     72e:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
     732:	8b 32       	cpi	r24, 0x2B	; 43
     734:	59 f4       	brne	.+22     	; 0x74c <PID_parametters+0x100>
				if(select==5){select=0;}	// If OVF cursor...
     736:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <select>
     73a:	85 30       	cpi	r24, 0x05	; 5
     73c:	19 f4       	brne	.+6      	; 0x744 <PID_parametters+0xf8>
     73e:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <select>
     742:	13 c0       	rjmp	.+38     	; 0x76a <PID_parametters+0x11e>
				else{select++;}
     744:	8f 5f       	subi	r24, 0xFF	; 255
     746:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <select>
     74a:	0f c0       	rjmp	.+30     	; 0x76a <PID_parametters+0x11e>
			}
			else if(rotation()=='-'){
     74c:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
     750:	8d 32       	cpi	r24, 0x2D	; 45
     752:	59 f4       	brne	.+22     	; 0x76a <PID_parametters+0x11e>
				if(select==0){select=5;}	// If UDF cursor...
     754:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <select>
     758:	81 11       	cpse	r24, r1
     75a:	04 c0       	rjmp	.+8      	; 0x764 <PID_parametters+0x118>
     75c:	85 e0       	ldi	r24, 0x05	; 5
     75e:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <select>
     762:	03 c0       	rjmp	.+6      	; 0x76a <PID_parametters+0x11e>
				else{select--;}
     764:	81 50       	subi	r24, 0x01	; 1
     766:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <select>
			}
			LCD_write_string_xy("                ",2,0);
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	62 e0       	ldi	r22, 0x02	; 2
     76e:	8d e3       	ldi	r24, 0x3D	; 61
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
			switch(select){
     776:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <select>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	09 f4       	brne	.+2      	; 0x780 <PID_parametters+0x134>
     77e:	4b c0       	rjmp	.+150    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     780:	28 f4       	brcc	.+10     	; 0x78c <PID_parametters+0x140>
     782:	88 23       	and	r24, r24
     784:	61 f0       	breq	.+24     	; 0x79e <PID_parametters+0x152>
     786:	81 30       	cpi	r24, 0x01	; 1
     788:	59 f1       	breq	.+86     	; 0x7e0 <PID_parametters+0x194>
     78a:	88 c0       	rjmp	.+272    	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
     78c:	84 30       	cpi	r24, 0x04	; 4
     78e:	09 f4       	brne	.+2      	; 0x792 <PID_parametters+0x146>
     790:	78 c0       	rjmp	.+240    	; 0x882 <__DATA_REGION_LENGTH__+0x82>
     792:	08 f4       	brcc	.+2      	; 0x796 <PID_parametters+0x14a>
     794:	5b c0       	rjmp	.+182    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     796:	85 30       	cpi	r24, 0x05	; 5
     798:	09 f4       	brne	.+2      	; 0x79c <PID_parametters+0x150>
     79a:	7a c0       	rjmp	.+244    	; 0x890 <__DATA_REGION_LENGTH__+0x90>
     79c:	7f c0       	rjmp	.+254    	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
				case 0:
					print_value('R',curRef);
     79e:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <curRef>
     7a2:	82 e5       	ldi	r24, 0x52	; 82
     7a4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <print_value>
					x_ref[0]=(float)curRef*5/100;
     7a8:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <curRef>
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__floatunsisf>
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 ea       	ldi	r20, 0xA0	; 160
     7bc:	50 e4       	ldi	r21, 0x40	; 64
     7be:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	48 ec       	ldi	r20, 0xC8	; 200
     7c8:	52 e4       	ldi	r21, 0x42	; 66
     7ca:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
     7ce:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <x_ref>
     7d2:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <x_ref+0x1>
     7d6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <x_ref+0x2>
     7da:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <x_ref+0x3>
					break;
     7de:	5e c0       	rjmp	.+188    	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
				case 1:
					print_value('A',curA);
     7e0:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <curA>
     7e4:	81 e4       	ldi	r24, 0x41	; 65
     7e6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <print_value>
					A=(float)curA/100;
     7ea:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <curA>
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__floatunsisf>
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	48 ec       	ldi	r20, 0xC8	; 200
     7fe:	52 e4       	ldi	r21, 0x42	; 66
     800:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
     804:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <A>
     808:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <A+0x1>
     80c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <A+0x2>
     810:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <A+0x3>
					break;
     814:	43 c0       	rjmp	.+134    	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
				case 2:
					print_value('b',curb);
     816:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <curb>
     81a:	82 e6       	ldi	r24, 0x62	; 98
     81c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <print_value>
					b=(float)curb/100;
     820:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <curb>
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__floatunsisf>
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	48 ec       	ldi	r20, 0xC8	; 200
     834:	52 e4       	ldi	r21, 0x42	; 66
     836:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
     83a:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <b>
     83e:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <b+0x1>
     842:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <b+0x2>
     846:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <b+0x3>
					break;
     84a:	28 c0       	rjmp	.+80     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
				case 3:
					print_value('c',curc);
     84c:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <curc>
     850:	83 e6       	ldi	r24, 0x63	; 99
     852:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <print_value>
					c=(float)curc/100;
     856:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <curc>
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__floatunsisf>
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	48 ec       	ldi	r20, 0xC8	; 200
     86a:	52 e4       	ldi	r21, 0x42	; 66
     86c:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
     870:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
     874:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     878:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     87c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
					break;
     880:	0d c0       	rjmp	.+26     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
				case 4:
					LCD_write_string_xy(">Atras",2,0);
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	62 e0       	ldi	r22, 0x02	; 2
     886:	81 e1       	ldi	r24, 0x11	; 17
     888:	92 e0       	ldi	r25, 0x02	; 2
     88a:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
					break;
     88e:	06 c0       	rjmp	.+12     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
				case 5:
					LCD_write_string_xy(">OK",2,0);
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	62 e0       	ldi	r22, 0x02	; 2
     894:	8e e4       	ldi	r24, 0x4E	; 78
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
					break;
				default:
					break;
			}
			turn=0;					//  Clear flag
     89c:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <turn>
		}
		
		if(button&&select==0){		// Si se presiona el pulsador y el par�metro R se encuentra en pantalla...
     8a0:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
     8a4:	88 23       	and	r24, r24
     8a6:	09 f4       	brne	.+2      	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
     8a8:	60 c0       	rjmp	.+192    	; 0x96a <__stack+0x6b>
     8aa:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <select>
     8ae:	81 11       	cpse	r24, r1
     8b0:	5c c0       	rjmp	.+184    	; 0x96a <__stack+0x6b>
			button=0;
     8b2:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
			LCD_blinkON();
     8b6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_blinkON>
			intro=0;
     8ba:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <intro>
			while(intro!=1){
     8be:	50 c0       	rjmp	.+160    	; 0x960 <__stack+0x61>
				if(turn){
     8c0:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <turn>
     8c4:	88 23       	and	r24, r24
     8c6:	09 f4       	brne	.+2      	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
     8c8:	40 c0       	rjmp	.+128    	; 0x94a <__stack+0x4b>
					if(rotation()=='+'){
     8ca:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
     8ce:	8b 32       	cpi	r24, 0x2B	; 43
     8d0:	59 f4       	brne	.+22     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
						if(curRef==100){curRef=0;}	// If OVF cursor...
     8d2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <curRef>
     8d6:	84 36       	cpi	r24, 0x64	; 100
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
     8da:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <curRef>
     8de:	13 c0       	rjmp	.+38     	; 0x906 <__stack+0x7>
						else{curRef++;}
     8e0:	8f 5f       	subi	r24, 0xFF	; 255
     8e2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <curRef>
     8e6:	0f c0       	rjmp	.+30     	; 0x906 <__stack+0x7>
					}
					else if(rotation()=='-'){
     8e8:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
     8ec:	8d 32       	cpi	r24, 0x2D	; 45
     8ee:	59 f4       	brne	.+22     	; 0x906 <__stack+0x7>
						if(curRef==0){curRef=100;}	// If UDF cursor...
     8f0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <curRef>
     8f4:	81 11       	cpse	r24, r1
     8f6:	04 c0       	rjmp	.+8      	; 0x900 <__stack+0x1>
     8f8:	84 e6       	ldi	r24, 0x64	; 100
     8fa:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <curRef>
     8fe:	03 c0       	rjmp	.+6      	; 0x906 <__stack+0x7>
						else{curRef--;}
     900:	81 50       	subi	r24, 0x01	; 1
     902:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <curRef>
					}
					print_value('R',curRef);
     906:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <curRef>
     90a:	82 e5       	ldi	r24, 0x52	; 82
     90c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <print_value>
					x_ref[0]=(float)curRef*5/100;
     910:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <curRef>
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__floatunsisf>
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	40 ea       	ldi	r20, 0xA0	; 160
     924:	50 e4       	ldi	r21, 0x40	; 64
     926:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	48 ec       	ldi	r20, 0xC8	; 200
     930:	52 e4       	ldi	r21, 0x42	; 66
     932:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
     936:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <x_ref>
     93a:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <x_ref+0x1>
     93e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <x_ref+0x2>
     942:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <x_ref+0x3>
					turn=0;
     946:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <turn>
				}
				if(button){button=0; intro=1; LCD_blinkOFF();}
     94a:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
     94e:	88 23       	and	r24, r24
     950:	39 f0       	breq	.+14     	; 0x960 <__stack+0x61>
     952:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <intro>
     95c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_blinkOFF>
		
		if(button&&select==0){		// Si se presiona el pulsador y el par�metro R se encuentra en pantalla...
			button=0;
			LCD_blinkON();
			intro=0;
			while(intro!=1){
     960:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <intro>
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	09 f0       	breq	.+2      	; 0x96a <__stack+0x6b>
     968:	ab cf       	rjmp	.-170    	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
					turn=0;
				}
				if(button){button=0; intro=1; LCD_blinkOFF();}
			}
		}
		if(button&&select==1){		// Si se presiona el pulsador y el par�metro A se encuentra en pantalla...
     96a:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
     96e:	88 23       	and	r24, r24
     970:	09 f4       	brne	.+2      	; 0x974 <__stack+0x75>
     972:	5a c0       	rjmp	.+180    	; 0xa28 <__stack+0x129>
     974:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <select>
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	09 f0       	breq	.+2      	; 0x97e <__stack+0x7f>
     97c:	55 c0       	rjmp	.+170    	; 0xa28 <__stack+0x129>
			button=0;
     97e:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
			LCD_blinkON();
     982:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_blinkON>
			intro=0;
     986:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <intro>
			while(intro!=1){
     98a:	49 c0       	rjmp	.+146    	; 0xa1e <__stack+0x11f>
				if(turn){
     98c:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <turn>
     990:	88 23       	and	r24, r24
     992:	d1 f1       	breq	.+116    	; 0xa08 <__stack+0x109>
					if(rotation()=='+'){
     994:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
     998:	8b 32       	cpi	r24, 0x2B	; 43
     99a:	59 f4       	brne	.+22     	; 0x9b2 <__stack+0xb3>
						if(curA==100){curA=0;}	// If OVF cursor...
     99c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <curA>
     9a0:	84 36       	cpi	r24, 0x64	; 100
     9a2:	19 f4       	brne	.+6      	; 0x9aa <__stack+0xab>
     9a4:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <curA>
     9a8:	13 c0       	rjmp	.+38     	; 0x9d0 <__stack+0xd1>
						else{curA++;}
     9aa:	8f 5f       	subi	r24, 0xFF	; 255
     9ac:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <curA>
     9b0:	0f c0       	rjmp	.+30     	; 0x9d0 <__stack+0xd1>
					}
					else if(rotation()=='-'){
     9b2:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
     9b6:	8d 32       	cpi	r24, 0x2D	; 45
     9b8:	59 f4       	brne	.+22     	; 0x9d0 <__stack+0xd1>
						if(curA==0){curA=100;}	// If UDF cursor...
     9ba:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <curA>
     9be:	81 11       	cpse	r24, r1
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__stack+0xcb>
     9c2:	84 e6       	ldi	r24, 0x64	; 100
     9c4:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <curA>
     9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <__stack+0xd1>
						else{curA--;}
     9ca:	81 50       	subi	r24, 0x01	; 1
     9cc:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <curA>
					}
					print_value('A',curA);
     9d0:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <curA>
     9d4:	81 e4       	ldi	r24, 0x41	; 65
     9d6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <print_value>
					A=(float)curA/100;
     9da:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <curA>
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__floatunsisf>
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	48 ec       	ldi	r20, 0xC8	; 200
     9ee:	52 e4       	ldi	r21, 0x42	; 66
     9f0:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
     9f4:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <A>
     9f8:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <A+0x1>
     9fc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <A+0x2>
     a00:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <A+0x3>
					turn=0;
     a04:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <turn>
				}
				if(button){button=0; intro=1; LCD_blinkOFF();}
     a08:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
     a0c:	88 23       	and	r24, r24
     a0e:	39 f0       	breq	.+14     	; 0xa1e <__stack+0x11f>
     a10:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <intro>
     a1a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_blinkOFF>
		}
		if(button&&select==1){		// Si se presiona el pulsador y el par�metro A se encuentra en pantalla...
			button=0;
			LCD_blinkON();
			intro=0;
			while(intro!=1){
     a1e:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <intro>
     a22:	81 30       	cpi	r24, 0x01	; 1
     a24:	09 f0       	breq	.+2      	; 0xa28 <__stack+0x129>
     a26:	b2 cf       	rjmp	.-156    	; 0x98c <__stack+0x8d>
					turn=0;
				}
				if(button){button=0; intro=1; LCD_blinkOFF();}
			}
		}
		if(button&&select==2){		// Si se presiona el pulsador y el par�metro b se encuentra en pantalla...
     a28:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
     a2c:	88 23       	and	r24, r24
     a2e:	09 f4       	brne	.+2      	; 0xa32 <__stack+0x133>
     a30:	5a c0       	rjmp	.+180    	; 0xae6 <__stack+0x1e7>
     a32:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <select>
     a36:	82 30       	cpi	r24, 0x02	; 2
     a38:	09 f0       	breq	.+2      	; 0xa3c <__stack+0x13d>
     a3a:	55 c0       	rjmp	.+170    	; 0xae6 <__stack+0x1e7>
			button=0;
     a3c:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
			LCD_blinkON();
     a40:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_blinkON>
			intro=0;
     a44:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <intro>
			while(intro!=1){
     a48:	49 c0       	rjmp	.+146    	; 0xadc <__stack+0x1dd>
				if(turn){
     a4a:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <turn>
     a4e:	88 23       	and	r24, r24
     a50:	d1 f1       	breq	.+116    	; 0xac6 <__stack+0x1c7>
					if((rotation())=='+'){
     a52:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
     a56:	8b 32       	cpi	r24, 0x2B	; 43
     a58:	59 f4       	brne	.+22     	; 0xa70 <__stack+0x171>
						if(curb==100){curb=0;}	// If OVF cur...
     a5a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <curb>
     a5e:	84 36       	cpi	r24, 0x64	; 100
     a60:	19 f4       	brne	.+6      	; 0xa68 <__stack+0x169>
     a62:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <curb>
     a66:	13 c0       	rjmp	.+38     	; 0xa8e <__stack+0x18f>
						else{curb++;}
     a68:	8f 5f       	subi	r24, 0xFF	; 255
     a6a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <curb>
     a6e:	0f c0       	rjmp	.+30     	; 0xa8e <__stack+0x18f>
					}
					else if((rotation())=='-'){
     a70:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
     a74:	8d 32       	cpi	r24, 0x2D	; 45
     a76:	59 f4       	brne	.+22     	; 0xa8e <__stack+0x18f>
						if(curb==0){curb=100;}	// If UDF cur...
     a78:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <curb>
     a7c:	81 11       	cpse	r24, r1
     a7e:	04 c0       	rjmp	.+8      	; 0xa88 <__stack+0x189>
     a80:	84 e6       	ldi	r24, 0x64	; 100
     a82:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <curb>
     a86:	03 c0       	rjmp	.+6      	; 0xa8e <__stack+0x18f>
						else{curb--;}
     a88:	81 50       	subi	r24, 0x01	; 1
     a8a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <curb>
					}
					print_value('b',curb);
     a8e:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <curb>
     a92:	82 e6       	ldi	r24, 0x62	; 98
     a94:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <print_value>
					b=(float)curb/100;
     a98:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <curb>
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__floatunsisf>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	48 ec       	ldi	r20, 0xC8	; 200
     aac:	52 e4       	ldi	r21, 0x42	; 66
     aae:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
     ab2:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <b>
     ab6:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <b+0x1>
     aba:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <b+0x2>
     abe:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <b+0x3>
					turn=0;
     ac2:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <turn>
				}
				if(button){button=0; intro=1; LCD_blinkOFF();}
     ac6:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
     aca:	88 23       	and	r24, r24
     acc:	39 f0       	breq	.+14     	; 0xadc <__stack+0x1dd>
     ace:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <intro>
     ad8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_blinkOFF>
		}
		if(button&&select==2){		// Si se presiona el pulsador y el par�metro b se encuentra en pantalla...
			button=0;
			LCD_blinkON();
			intro=0;
			while(intro!=1){
     adc:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <intro>
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	09 f0       	breq	.+2      	; 0xae6 <__stack+0x1e7>
     ae4:	b2 cf       	rjmp	.-156    	; 0xa4a <__stack+0x14b>
					turn=0;
				}
				if(button){button=0; intro=1; LCD_blinkOFF();}
			}
		}
		if(button&&select==3){		// Si se presiona el pulsador y el par�metro c se encuentra en pantalla...
     ae6:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
     aea:	88 23       	and	r24, r24
     aec:	09 f4       	brne	.+2      	; 0xaf0 <__stack+0x1f1>
     aee:	5a c0       	rjmp	.+180    	; 0xba4 <__stack+0x2a5>
     af0:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <select>
     af4:	83 30       	cpi	r24, 0x03	; 3
     af6:	09 f0       	breq	.+2      	; 0xafa <__stack+0x1fb>
     af8:	55 c0       	rjmp	.+170    	; 0xba4 <__stack+0x2a5>
			button=0;
     afa:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
			LCD_blinkON();
     afe:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_blinkON>
			intro=0;
     b02:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <intro>
			while(intro!=1){
     b06:	49 c0       	rjmp	.+146    	; 0xb9a <__stack+0x29b>
				if(turn){
     b08:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <turn>
     b0c:	88 23       	and	r24, r24
     b0e:	d1 f1       	breq	.+116    	; 0xb84 <__stack+0x285>
					if((rotation())=='+'){
     b10:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
     b14:	8b 32       	cpi	r24, 0x2B	; 43
     b16:	59 f4       	brne	.+22     	; 0xb2e <__stack+0x22f>
						if(curc==100){curc=0;}	// If OVF cur...
     b18:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <curc>
     b1c:	84 36       	cpi	r24, 0x64	; 100
     b1e:	19 f4       	brne	.+6      	; 0xb26 <__stack+0x227>
     b20:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <curc>
     b24:	13 c0       	rjmp	.+38     	; 0xb4c <__stack+0x24d>
						else{curc++;}
     b26:	8f 5f       	subi	r24, 0xFF	; 255
     b28:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <curc>
     b2c:	0f c0       	rjmp	.+30     	; 0xb4c <__stack+0x24d>
					}
					else if((rotation())=='-'){
     b2e:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
     b32:	8d 32       	cpi	r24, 0x2D	; 45
     b34:	59 f4       	brne	.+22     	; 0xb4c <__stack+0x24d>
						if(curc==0){curc=100;}	// If UDF cur...
     b36:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <curc>
     b3a:	81 11       	cpse	r24, r1
     b3c:	04 c0       	rjmp	.+8      	; 0xb46 <__stack+0x247>
     b3e:	84 e6       	ldi	r24, 0x64	; 100
     b40:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <curc>
     b44:	03 c0       	rjmp	.+6      	; 0xb4c <__stack+0x24d>
						else{curc--;}
     b46:	81 50       	subi	r24, 0x01	; 1
     b48:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <curc>
					}
					print_value('c',curc);
     b4c:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <curc>
     b50:	83 e6       	ldi	r24, 0x63	; 99
     b52:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <print_value>
					c=(float)curc/100;
     b56:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <curc>
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__floatunsisf>
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	48 ec       	ldi	r20, 0xC8	; 200
     b6a:	52 e4       	ldi	r21, 0x42	; 66
     b6c:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
     b70:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
     b74:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b78:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     b7c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
					turn=0;
     b80:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <turn>
				}
				if(button){button=0; intro=1; LCD_blinkOFF();}
     b84:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
     b88:	88 23       	and	r24, r24
     b8a:	39 f0       	breq	.+14     	; 0xb9a <__stack+0x29b>
     b8c:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <intro>
     b96:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_blinkOFF>
		}
		if(button&&select==3){		// Si se presiona el pulsador y el par�metro c se encuentra en pantalla...
			button=0;
			LCD_blinkON();
			intro=0;
			while(intro!=1){
     b9a:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <intro>
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	09 f0       	breq	.+2      	; 0xba4 <__stack+0x2a5>
     ba2:	b2 cf       	rjmp	.-156    	; 0xb08 <__stack+0x209>
					turn=0;
				}
				if(button){button=0; intro=1; LCD_blinkOFF();}
			}
		}
		if(button&&select==4){		// Si se presiona el pulsador y el par�metro Atras se encuentra en pantalla...
     ba4:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
     ba8:	88 23       	and	r24, r24
     baa:	59 f0       	breq	.+22     	; 0xbc2 <__stack+0x2c3>
     bac:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <select>
     bb0:	84 30       	cpi	r24, 0x04	; 4
     bb2:	39 f4       	brne	.+14     	; 0xbc2 <__stack+0x2c3>
			button=0;
     bb4:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
			ok=1;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <ok>
			routine=0;
     bbe:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <routine>
		}
		if(button&&select==5){		// Si se presiona el pulsador y el par�metro OK se encuentra en pantalla...
     bc2:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
     bc6:	88 23       	and	r24, r24
     bc8:	59 f0       	breq	.+22     	; 0xbe0 <__stack+0x2e1>
     bca:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <select>
     bce:	85 30       	cpi	r24, 0x05	; 5
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__stack+0x2e1>
			button=0;
     bd2:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
			ok=1;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <ok>
			routine=1;
     bdc:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <routine>
	b=(float)curb/100;
	c=(float)curc/100;
	
	ok=0;
	select=0;
	while(ok!=1){
     be0:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <ok>
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	09 f0       	breq	.+2      	; 0xbea <__stack+0x2eb>
     be8:	9d cd       	rjmp	.-1222   	; 0x724 <PID_parametters+0xd8>
			ok=1;
			routine=1;
		}
	}
	return;
}
     bea:	08 95       	ret

00000bec <update_value>:
			LCD_gotoxy(2,7);
		}
	}
	return;
}
void update_value(unsigned char value_print, unsigned char cursor, unsigned char mod){	// Rutina de escritura de par�metros en display: 0.00 hasta 1.00
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
	uint16_t cursor_aux=cursor;
     bf8:	c6 2f       	mov	r28, r22
     bfa:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char aux, i, fila, columna;
	if((value_print=='R')&&(mod==0)){
     bfc:	82 35       	cpi	r24, 0x52	; 82
     bfe:	81 f4       	brne	.+32     	; 0xc20 <update_value+0x34>
     c00:	41 11       	cpse	r20, r1
     c02:	0e c0       	rjmp	.+28     	; 0xc20 <update_value+0x34>
		cursor_aux=5*cursor_aux;
     c04:	ce 01       	movw	r24, r28
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	c8 0f       	add	r28, r24
     c10:	d9 1f       	adc	r29, r25
		fila=2;
		columna=8;
     c12:	68 94       	set
     c14:	ee 24       	eor	r14, r14
     c16:	e3 f8       	bld	r14, 3
void update_value(unsigned char value_print, unsigned char cursor, unsigned char mod){	// Rutina de escritura de par�metros en display: 0.00 hasta 1.00
	uint16_t cursor_aux=cursor;
	unsigned char aux, i, fila, columna;
	if((value_print=='R')&&(mod==0)){
		cursor_aux=5*cursor_aux;
		fila=2;
     c18:	68 94       	set
     c1a:	ff 24       	eor	r15, r15
     c1c:	f1 f8       	bld	r15, 1
		columna=8;
     c1e:	49 c0       	rjmp	.+146    	; 0xcb2 <update_value+0xc6>
	}
	else if((value_print=='R')&&(mod=1)){
     c20:	82 35       	cpi	r24, 0x52	; 82
     c22:	71 f4       	brne	.+28     	; 0xc40 <update_value+0x54>
		cursor_aux=5*cursor_aux;
     c24:	ce 01       	movw	r24, r28
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	c8 0f       	add	r28, r24
     c30:	d9 1f       	adc	r29, r25
		fila=1;
		columna=9;
     c32:	0f 2e       	mov	r0, r31
     c34:	f9 e0       	ldi	r31, 0x09	; 9
     c36:	ef 2e       	mov	r14, r31
     c38:	f0 2d       	mov	r31, r0
		fila=2;
		columna=8;
	}
	else if((value_print=='R')&&(mod=1)){
		cursor_aux=5*cursor_aux;
		fila=1;
     c3a:	ff 24       	eor	r15, r15
     c3c:	f3 94       	inc	r15
		columna=9;
     c3e:	39 c0       	rjmp	.+114    	; 0xcb2 <update_value+0xc6>
	}
	else if((value_print=='A')&&(mod==0)){
     c40:	81 34       	cpi	r24, 0x41	; 65
     c42:	11 f4       	brne	.+4      	; 0xc48 <update_value+0x5c>
     c44:	44 23       	and	r20, r20
     c46:	39 f1       	breq	.+78     	; 0xc96 <update_value+0xaa>
		fila=1;
		columna=15;
	}
	else if((value_print=='A')&&(mod==1)){
     c48:	81 34       	cpi	r24, 0x41	; 65
     c4a:	11 f4       	brne	.+4      	; 0xc50 <update_value+0x64>
     c4c:	41 30       	cpi	r20, 0x01	; 1
     c4e:	51 f1       	breq	.+84     	; 0xca4 <update_value+0xb8>
		columna=6;
	}
	else{
		fila=1;
		columna=8;
		cursor_aux=ADC;
     c50:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c54:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		cursor_aux=(int)(((float)cursor_aux*5/1024)*100);
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__floatunsisf>
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 ea       	ldi	r20, 0xA0	; 160
     c66:	50 e4       	ldi	r21, 0x40	; 64
     c68:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	40 e8       	ldi	r20, 0x80	; 128
     c72:	5a e3       	ldi	r21, 0x3A	; 58
     c74:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	48 ec       	ldi	r20, 0xC8	; 200
     c7e:	52 e4       	ldi	r21, 0x42	; 66
     c80:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     c84:	0e 94 26 13 	call	0x264c	; 0x264c <__fixsfsi>
     c88:	eb 01       	movw	r28, r22
		fila=2;
		columna=6;
	}
	else{
		fila=1;
		columna=8;
     c8a:	68 94       	set
     c8c:	ee 24       	eor	r14, r14
     c8e:	e3 f8       	bld	r14, 3
	else if((value_print=='A')&&(mod==1)){
		fila=2;
		columna=6;
	}
	else{
		fila=1;
     c90:	ff 24       	eor	r15, r15
     c92:	f3 94       	inc	r15
     c94:	0e c0       	rjmp	.+28     	; 0xcb2 <update_value+0xc6>
		fila=1;
		columna=9;
	}
	else if((value_print=='A')&&(mod==0)){
		fila=1;
		columna=15;
     c96:	0f 2e       	mov	r0, r31
     c98:	ff e0       	ldi	r31, 0x0F	; 15
     c9a:	ef 2e       	mov	r14, r31
     c9c:	f0 2d       	mov	r31, r0
		cursor_aux=5*cursor_aux;
		fila=1;
		columna=9;
	}
	else if((value_print=='A')&&(mod==0)){
		fila=1;
     c9e:	ff 24       	eor	r15, r15
     ca0:	f3 94       	inc	r15
     ca2:	07 c0       	rjmp	.+14     	; 0xcb2 <update_value+0xc6>
		columna=15;
	}
	else if((value_print=='A')&&(mod==1)){
		fila=2;
		columna=6;
     ca4:	0f 2e       	mov	r0, r31
     ca6:	f6 e0       	ldi	r31, 0x06	; 6
     ca8:	ef 2e       	mov	r14, r31
     caa:	f0 2d       	mov	r31, r0
	else if((value_print=='A')&&(mod==0)){
		fila=1;
		columna=15;
	}
	else if((value_print=='A')&&(mod==1)){
		fila=2;
     cac:	68 94       	set
     cae:	ff 24       	eor	r15, r15
     cb0:	f1 f8       	bld	r15, 1
		columna=8;
		cursor_aux=ADC;
		cursor_aux=(int)(((float)cursor_aux*5/1024)*100);
		
	}
	for(i=0;i<3;i++){
     cb2:	10 e0       	ldi	r17, 0x00	; 0
     cb4:	3c c0       	rjmp	.+120    	; 0xd2e <update_value+0x142>
		aux=cursor_aux%10;
     cb6:	9e 01       	movw	r18, r28
     cb8:	ad ec       	ldi	r26, 0xCD	; 205
     cba:	bc ec       	ldi	r27, 0xCC	; 204
     cbc:	0e 94 ef 14 	call	0x29de	; 0x29de <__umulhisi3>
     cc0:	96 95       	lsr	r25
     cc2:	87 95       	ror	r24
     cc4:	96 95       	lsr	r25
     cc6:	87 95       	ror	r24
     cc8:	96 95       	lsr	r25
     cca:	87 95       	ror	r24
     ccc:	9c 01       	movw	r18, r24
     cce:	22 0f       	add	r18, r18
     cd0:	33 1f       	adc	r19, r19
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	82 0f       	add	r24, r18
     ce0:	93 1f       	adc	r25, r19
     ce2:	0c 2f       	mov	r16, r28
     ce4:	08 1b       	sub	r16, r24
		cursor_aux=cursor_aux/10;
     ce6:	9e 01       	movw	r18, r28
     ce8:	0e 94 ef 14 	call	0x29de	; 0x29de <__umulhisi3>
     cec:	ec 01       	movw	r28, r24
     cee:	d6 95       	lsr	r29
     cf0:	c7 95       	ror	r28
     cf2:	d6 95       	lsr	r29
     cf4:	c7 95       	ror	r28
     cf6:	d6 95       	lsr	r29
     cf8:	c7 95       	ror	r28
		if(i==2){
     cfa:	12 30       	cpi	r17, 0x02	; 2
     cfc:	71 f4       	brne	.+28     	; 0xd1a <update_value+0x12e>
			LCD_gotoxy(fila,columna-2);
     cfe:	6e ef       	ldi	r22, 0xFE	; 254
     d00:	6e 0d       	add	r22, r14
     d02:	8f 2d       	mov	r24, r15
     d04:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
			LCD_write(',');
     d08:	8c e2       	ldi	r24, 0x2C	; 44
     d0a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
			LCD_gotoxy(fila,columna-3);
     d0e:	6d ef       	ldi	r22, 0xFD	; 253
     d10:	6e 0d       	add	r22, r14
     d12:	8f 2d       	mov	r24, r15
     d14:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
     d18:	05 c0       	rjmp	.+10     	; 0xd24 <update_value+0x138>
		}
		else{
			LCD_gotoxy(fila,columna-i);
     d1a:	6e 2d       	mov	r22, r14
     d1c:	61 1b       	sub	r22, r17
     d1e:	8f 2d       	mov	r24, r15
     d20:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
		}
		LCD_write(48+aux);
     d24:	80 e3       	ldi	r24, 0x30	; 48
     d26:	80 0f       	add	r24, r16
     d28:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
		columna=8;
		cursor_aux=ADC;
		cursor_aux=(int)(((float)cursor_aux*5/1024)*100);
		
	}
	for(i=0;i<3;i++){
     d2c:	1f 5f       	subi	r17, 0xFF	; 255
     d2e:	13 30       	cpi	r17, 0x03	; 3
     d30:	10 f2       	brcs	.-124    	; 0xcb6 <update_value+0xca>
			LCD_gotoxy(fila,columna-i);
		}
		LCD_write(48+aux);
	}
	return;
}
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	08 95       	ret

00000d40 <accion_de_control>:
float accion_de_control(void){										// Rutina de c�lculo de acci�n de control
     d40:	2f 92       	push	r2
     d42:	3f 92       	push	r3
     d44:	4f 92       	push	r4
     d46:	5f 92       	push	r5
     d48:	6f 92       	push	r6
     d4a:	7f 92       	push	r7
     d4c:	8f 92       	push	r8
     d4e:	9f 92       	push	r9
     d50:	af 92       	push	r10
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	00 d0       	rcall	.+0      	; 0xd66 <accion_de_control+0x26>
     d66:	00 d0       	rcall	.+0      	; 0xd68 <accion_de_control+0x28>
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
	// Filtro a la referencia
	y_ref[0]=b_ref[0]*x_ref[0]+b_ref[1]*x_ref[1]+b_ref[2]*x_ref[2]-a_ref[1]*y_ref[1]-a_ref[2]*y_ref[2];
     d6c:	0e e8       	ldi	r16, 0x8E	; 142
     d6e:	12 e0       	ldi	r17, 0x02	; 2
     d70:	d8 01       	movw	r26, r16
     d72:	6d 91       	ld	r22, X+
     d74:	7d 91       	ld	r23, X+
     d76:	8d 91       	ld	r24, X+
     d78:	9c 91       	ld	r25, X
     d7a:	a0 e1       	ldi	r26, 0x10	; 16
     d7c:	b1 e0       	ldi	r27, 0x01	; 1
     d7e:	2d 91       	ld	r18, X+
     d80:	3d 91       	ld	r19, X+
     d82:	4d 91       	ld	r20, X+
     d84:	5c 91       	ld	r21, X
     d86:	29 83       	std	Y+1, r18	; 0x01
     d88:	3a 83       	std	Y+2, r19	; 0x02
     d8a:	4b 83       	std	Y+3, r20	; 0x03
     d8c:	5c 83       	std	Y+4, r21	; 0x04
     d8e:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     d92:	6b 01       	movw	r12, r22
     d94:	7c 01       	movw	r14, r24
     d96:	f8 01       	movw	r30, r16
     d98:	64 81       	ldd	r22, Z+4	; 0x04
     d9a:	75 81       	ldd	r23, Z+5	; 0x05
     d9c:	86 81       	ldd	r24, Z+6	; 0x06
     d9e:	97 81       	ldd	r25, Z+7	; 0x07
     da0:	40 90 14 01 	lds	r4, 0x0114	; 0x800114 <x_ref+0x4>
     da4:	50 90 15 01 	lds	r5, 0x0115	; 0x800115 <x_ref+0x5>
     da8:	60 90 16 01 	lds	r6, 0x0116	; 0x800116 <x_ref+0x6>
     dac:	70 90 17 01 	lds	r7, 0x0117	; 0x800117 <x_ref+0x7>
     db0:	a3 01       	movw	r20, r6
     db2:	92 01       	movw	r18, r4
     db4:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     db8:	9b 01       	movw	r18, r22
     dba:	ac 01       	movw	r20, r24
     dbc:	c7 01       	movw	r24, r14
     dbe:	b6 01       	movw	r22, r12
     dc0:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
     dc4:	6b 01       	movw	r12, r22
     dc6:	7c 01       	movw	r14, r24
     dc8:	d8 01       	movw	r26, r16
     dca:	18 96       	adiw	r26, 0x08	; 8
     dcc:	6d 91       	ld	r22, X+
     dce:	7d 91       	ld	r23, X+
     dd0:	8d 91       	ld	r24, X+
     dd2:	9c 91       	ld	r25, X
     dd4:	1b 97       	sbiw	r26, 0x0b	; 11
     dd6:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <x_ref+0x8>
     dda:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <x_ref+0x9>
     dde:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <x_ref+0xa>
     de2:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <x_ref+0xb>
     de6:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     dea:	9b 01       	movw	r18, r22
     dec:	ac 01       	movw	r20, r24
     dee:	c7 01       	movw	r24, r14
     df0:	b6 01       	movw	r22, r12
     df2:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
     df6:	6b 01       	movw	r12, r22
     df8:	7c 01       	movw	r14, r24
     dfa:	0f 2e       	mov	r0, r31
     dfc:	f2 e8       	ldi	r31, 0x82	; 130
     dfe:	2f 2e       	mov	r2, r31
     e00:	f2 e0       	ldi	r31, 0x02	; 2
     e02:	3f 2e       	mov	r3, r31
     e04:	f0 2d       	mov	r31, r0
     e06:	f1 01       	movw	r30, r2
     e08:	64 81       	ldd	r22, Z+4	; 0x04
     e0a:	75 81       	ldd	r23, Z+5	; 0x05
     e0c:	86 81       	ldd	r24, Z+6	; 0x06
     e0e:	97 81       	ldd	r25, Z+7	; 0x07
     e10:	0a e9       	ldi	r16, 0x9A	; 154
     e12:	12 e0       	ldi	r17, 0x02	; 2
     e14:	d8 01       	movw	r26, r16
     e16:	14 96       	adiw	r26, 0x04	; 4
     e18:	8d 90       	ld	r8, X+
     e1a:	9d 90       	ld	r9, X+
     e1c:	ad 90       	ld	r10, X+
     e1e:	bc 90       	ld	r11, X
     e20:	17 97       	sbiw	r26, 0x07	; 7
     e22:	a5 01       	movw	r20, r10
     e24:	94 01       	movw	r18, r8
     e26:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     e2a:	9b 01       	movw	r18, r22
     e2c:	ac 01       	movw	r20, r24
     e2e:	c7 01       	movw	r24, r14
     e30:	b6 01       	movw	r22, r12
     e32:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
     e36:	6b 01       	movw	r12, r22
     e38:	7c 01       	movw	r14, r24
     e3a:	f1 01       	movw	r30, r2
     e3c:	60 85       	ldd	r22, Z+8	; 0x08
     e3e:	71 85       	ldd	r23, Z+9	; 0x09
     e40:	82 85       	ldd	r24, Z+10	; 0x0a
     e42:	93 85       	ldd	r25, Z+11	; 0x0b
     e44:	d8 01       	movw	r26, r16
     e46:	18 96       	adiw	r26, 0x08	; 8
     e48:	2d 91       	ld	r18, X+
     e4a:	3d 91       	ld	r19, X+
     e4c:	4d 91       	ld	r20, X+
     e4e:	5c 91       	ld	r21, X
     e50:	1b 97       	sbiw	r26, 0x0b	; 11
     e52:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     e56:	9b 01       	movw	r18, r22
     e58:	ac 01       	movw	r20, r24
     e5a:	c7 01       	movw	r24, r14
     e5c:	b6 01       	movw	r22, r12
     e5e:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
     e62:	6b 01       	movw	r12, r22
     e64:	7c 01       	movw	r14, r24
     e66:	f8 01       	movw	r30, r16
     e68:	60 83       	st	Z, r22
     e6a:	71 83       	std	Z+1, r23	; 0x01
     e6c:	82 83       	std	Z+2, r24	; 0x02
     e6e:	93 83       	std	Z+3, r25	; 0x03

	// Actualizo valores del filtro a la referencia
	y_ref[2]=y_ref[1];
     e70:	80 86       	std	Z+8, r8	; 0x08
     e72:	91 86       	std	Z+9, r9	; 0x09
     e74:	a2 86       	std	Z+10, r10	; 0x0a
     e76:	b3 86       	std	Z+11, r11	; 0x0b
	y_ref[1]=y_ref[0];
     e78:	64 83       	std	Z+4, r22	; 0x04
     e7a:	75 83       	std	Z+5, r23	; 0x05
     e7c:	86 83       	std	Z+6, r24	; 0x06
     e7e:	97 83       	std	Z+7, r25	; 0x07
	
	x_ref[2]=x_ref[1];
     e80:	40 92 18 01 	sts	0x0118, r4	; 0x800118 <x_ref+0x8>
     e84:	50 92 19 01 	sts	0x0119, r5	; 0x800119 <x_ref+0x9>
     e88:	60 92 1a 01 	sts	0x011A, r6	; 0x80011a <x_ref+0xa>
     e8c:	70 92 1b 01 	sts	0x011B, r7	; 0x80011b <x_ref+0xb>
	x_ref[1]=x_ref[0];
     e90:	29 81       	ldd	r18, Y+1	; 0x01
     e92:	3a 81       	ldd	r19, Y+2	; 0x02
     e94:	4b 81       	ldd	r20, Y+3	; 0x03
     e96:	5c 81       	ldd	r21, Y+4	; 0x04
     e98:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <x_ref+0x4>
     e9c:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <x_ref+0x5>
     ea0:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <x_ref+0x6>
     ea4:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <x_ref+0x7>
	
	// Calculo del error y parámetros del PID paralelo
	error_actual=y_ref[0]-((float)ADC*5/1024);	// Obtenci�n del error
     ea8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     eac:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__floatunsisf>
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 ea       	ldi	r20, 0xA0	; 160
     ebe:	50 e4       	ldi	r21, 0x40	; 64
     ec0:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5a e3       	ldi	r21, 0x3A	; 58
     ecc:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     ed0:	9b 01       	movw	r18, r22
     ed2:	ac 01       	movw	r20, r24
     ed4:	c7 01       	movw	r24, r14
     ed6:	b6 01       	movw	r22, r12
     ed8:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
     edc:	6b 01       	movw	r12, r22
     ede:	7c 01       	movw	r14, r24
     ee0:	60 93 da 02 	sts	0x02DA, r22	; 0x8002da <error_actual>
     ee4:	70 93 db 02 	sts	0x02DB, r23	; 0x8002db <error_actual+0x1>
     ee8:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <error_actual+0x2>
     eec:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <error_actual+0x3>
	P=error_actual*Kxp;							// Proporcional
     ef0:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <Kxp>
     ef4:	30 91 e3 02 	lds	r19, 0x02E3	; 0x8002e3 <Kxp+0x1>
     ef8:	40 91 e4 02 	lds	r20, 0x02E4	; 0x8002e4 <Kxp+0x2>
     efc:	50 91 e5 02 	lds	r21, 0x02E5	; 0x8002e5 <Kxp+0x3>
     f00:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     f04:	2b 01       	movw	r4, r22
     f06:	3c 01       	movw	r6, r24
     f08:	60 93 d6 02 	sts	0x02D6, r22	; 0x8002d6 <P>
     f0c:	70 93 d7 02 	sts	0x02D7, r23	; 0x8002d7 <P+0x1>
     f10:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <P+0x2>
     f14:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <P+0x3>
	I+=error_actual*q*KI;						// Integral
     f18:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <q>
     f1c:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <q+0x1>
     f20:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <q+0x2>
     f24:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <q+0x3>
     f28:	c7 01       	movw	r24, r14
     f2a:	b6 01       	movw	r22, r12
     f2c:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     f30:	20 91 ca 02 	lds	r18, 0x02CA	; 0x8002ca <KI>
     f34:	30 91 cb 02 	lds	r19, 0x02CB	; 0x8002cb <KI+0x1>
     f38:	40 91 cc 02 	lds	r20, 0x02CC	; 0x8002cc <KI+0x2>
     f3c:	50 91 cd 02 	lds	r21, 0x02CD	; 0x8002cd <KI+0x3>
     f40:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     f44:	20 91 d2 02 	lds	r18, 0x02D2	; 0x8002d2 <I>
     f48:	30 91 d3 02 	lds	r19, 0x02D3	; 0x8002d3 <I+0x1>
     f4c:	40 91 d4 02 	lds	r20, 0x02D4	; 0x8002d4 <I+0x2>
     f50:	50 91 d5 02 	lds	r21, 0x02D5	; 0x8002d5 <I+0x3>
     f54:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
     f58:	69 83       	std	Y+1, r22	; 0x01
     f5a:	7a 83       	std	Y+2, r23	; 0x02
     f5c:	8b 83       	std	Y+3, r24	; 0x03
     f5e:	9c 83       	std	Y+4, r25	; 0x04
     f60:	60 93 d2 02 	sts	0x02D2, r22	; 0x8002d2 <I>
     f64:	70 93 d3 02 	sts	0x02D3, r23	; 0x8002d3 <I+0x1>
     f68:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <I+0x2>
     f6c:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <I+0x3>
	D=(error_actual-error_anterior)*KD;			// Derivativo		
     f70:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <error_anterior>
     f74:	30 91 df 02 	lds	r19, 0x02DF	; 0x8002df <error_anterior+0x1>
     f78:	40 91 e0 02 	lds	r20, 0x02E0	; 0x8002e0 <error_anterior+0x2>
     f7c:	50 91 e1 02 	lds	r21, 0x02E1	; 0x8002e1 <error_anterior+0x3>
     f80:	c7 01       	movw	r24, r14
     f82:	b6 01       	movw	r22, r12
     f84:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
     f88:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <KD>
     f8c:	30 91 c7 02 	lds	r19, 0x02C7	; 0x8002c7 <KD+0x1>
     f90:	40 91 c8 02 	lds	r20, 0x02C8	; 0x8002c8 <KD+0x2>
     f94:	50 91 c9 02 	lds	r21, 0x02C9	; 0x8002c9 <KD+0x3>
     f98:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
     f9c:	4b 01       	movw	r8, r22
     f9e:	5c 01       	movw	r10, r24
     fa0:	60 93 ce 02 	sts	0x02CE, r22	; 0x8002ce <D>
     fa4:	70 93 cf 02 	sts	0x02CF, r23	; 0x8002cf <D+0x1>
     fa8:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <D+0x2>
     fac:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <D+0x3>
			
	x_pid[0]=P+I+D;								// Calculo la accion de control
     fb0:	29 81       	ldd	r18, Y+1	; 0x01
     fb2:	3a 81       	ldd	r19, Y+2	; 0x02
     fb4:	4b 81       	ldd	r20, Y+3	; 0x03
     fb6:	5c 81       	ldd	r21, Y+4	; 0x04
     fb8:	c3 01       	movw	r24, r6
     fba:	b2 01       	movw	r22, r4
     fbc:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
     fc0:	9b 01       	movw	r18, r22
     fc2:	ac 01       	movw	r20, r24
     fc4:	c5 01       	movw	r24, r10
     fc6:	b4 01       	movw	r22, r8
     fc8:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
     fcc:	4b 01       	movw	r8, r22
     fce:	5c 01       	movw	r10, r24
     fd0:	ae eb       	ldi	r26, 0xBE	; 190
     fd2:	b2 e0       	ldi	r27, 0x02	; 2
     fd4:	6d 93       	st	X+, r22
     fd6:	7d 93       	st	X+, r23
     fd8:	8d 93       	st	X+, r24
     fda:	9c 93       	st	X, r25
     fdc:	13 97       	sbiw	r26, 0x03	; 3
	error_anterior=error_actual;				// Actualizo el error
     fde:	c0 92 de 02 	sts	0x02DE, r12	; 0x8002de <error_anterior>
     fe2:	d0 92 df 02 	sts	0x02DF, r13	; 0x8002df <error_anterior+0x1>
     fe6:	e0 92 e0 02 	sts	0x02E0, r14	; 0x8002e0 <error_anterior+0x2>
     fea:	f0 92 e1 02 	sts	0x02E1, r15	; 0x8002e1 <error_anterior+0x3>
	
	// Filtro para el PID paralelo
	y_pid[0]=b_pid[0]*(x_pid[0]+x_pid[1])-a_pid[1]*y_pid[1];	
     fee:	c0 90 a6 02 	lds	r12, 0x02A6	; 0x8002a6 <b_pid>
     ff2:	d0 90 a7 02 	lds	r13, 0x02A7	; 0x8002a7 <b_pid+0x1>
     ff6:	e0 90 a8 02 	lds	r14, 0x02A8	; 0x8002a8 <b_pid+0x2>
     ffa:	f0 90 a9 02 	lds	r15, 0x02A9	; 0x8002a9 <b_pid+0x3>
     ffe:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <x_pid+0x4>
    1002:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <x_pid+0x5>
    1006:	40 91 c4 02 	lds	r20, 0x02C4	; 0x8002c4 <x_pid+0x6>
    100a:	50 91 c5 02 	lds	r21, 0x02C5	; 0x8002c5 <x_pid+0x7>
    100e:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    1012:	9b 01       	movw	r18, r22
    1014:	ac 01       	movw	r20, r24
    1016:	c7 01       	movw	r24, r14
    1018:	b6 01       	movw	r22, r12
    101a:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    101e:	6b 01       	movw	r12, r22
    1020:	7c 01       	movw	r14, r24
    1022:	60 91 b2 02 	lds	r22, 0x02B2	; 0x8002b2 <a_pid+0x4>
    1026:	70 91 b3 02 	lds	r23, 0x02B3	; 0x8002b3 <a_pid+0x5>
    102a:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <a_pid+0x6>
    102e:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <a_pid+0x7>
    1032:	06 eb       	ldi	r16, 0xB6	; 182
    1034:	12 e0       	ldi	r17, 0x02	; 2
    1036:	f8 01       	movw	r30, r16
    1038:	24 81       	ldd	r18, Z+4	; 0x04
    103a:	35 81       	ldd	r19, Z+5	; 0x05
    103c:	46 81       	ldd	r20, Z+6	; 0x06
    103e:	57 81       	ldd	r21, Z+7	; 0x07
    1040:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    1044:	9b 01       	movw	r18, r22
    1046:	ac 01       	movw	r20, r24
    1048:	c7 01       	movw	r24, r14
    104a:	b6 01       	movw	r22, r12
    104c:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
    1050:	6b 01       	movw	r12, r22
    1052:	7c 01       	movw	r14, r24
    1054:	d8 01       	movw	r26, r16
    1056:	6d 93       	st	X+, r22
    1058:	7d 93       	st	X+, r23
    105a:	8d 93       	st	X+, r24
    105c:	9c 93       	st	X, r25
    105e:	13 97       	sbiw	r26, 0x03	; 3
	
	// Actualizo valores del PID
	y_pid[1]=y_pid[0];
    1060:	f8 01       	movw	r30, r16
    1062:	64 83       	std	Z+4, r22	; 0x04
    1064:	75 83       	std	Z+5, r23	; 0x05
    1066:	86 83       	std	Z+6, r24	; 0x06
    1068:	97 83       	std	Z+7, r25	; 0x07
	x_pid[1]=x_pid[0];
    106a:	80 92 c2 02 	sts	0x02C2, r8	; 0x8002c2 <x_pid+0x4>
    106e:	90 92 c3 02 	sts	0x02C3, r9	; 0x8002c3 <x_pid+0x5>
    1072:	a0 92 c4 02 	sts	0x02C4, r10	; 0x8002c4 <x_pid+0x6>
    1076:	b0 92 c5 02 	sts	0x02C5, r11	; 0x8002c5 <x_pid+0x7>


	// Retorno de valores
	if(y_pid[0]>5){			// Saturacion
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 ea       	ldi	r20, 0xA0	; 160
    1080:	50 e4       	ldi	r21, 0x40	; 64
    1082:	0e 94 0e 14 	call	0x281c	; 0x281c <__gesf2>
    1086:	18 16       	cp	r1, r24
    1088:	ac f4       	brge	.+42     	; 0x10b4 <accion_de_control+0x374>
		y_pid[0]=5;
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	a0 ea       	ldi	r26, 0xA0	; 160
    1090:	b0 e4       	ldi	r27, 0x40	; 64
    1092:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <y_pid>
    1096:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <y_pid+0x1>
    109a:	a0 93 b8 02 	sts	0x02B8, r26	; 0x8002b8 <y_pid+0x2>
    109e:	b0 93 b9 02 	sts	0x02B9, r27	; 0x8002b9 <y_pid+0x3>
		q=0;
    10a2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <q>
    10a6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <q+0x1>
    10aa:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <q+0x2>
    10ae:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <q+0x3>
    10b2:	26 c0       	rjmp	.+76     	; 0x1100 <accion_de_control+0x3c0>
	}
	else if(y_pid[0]<0){	// Saturacion
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	a9 01       	movw	r20, r18
    10ba:	c7 01       	movw	r24, r14
    10bc:	b6 01       	movw	r22, r12
    10be:	0e 94 af 12 	call	0x255e	; 0x255e <__cmpsf2>
    10c2:	88 23       	and	r24, r24
    10c4:	8c f4       	brge	.+34     	; 0x10e8 <accion_de_control+0x3a8>
		y_pid[0]=0;
    10c6:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <y_pid>
    10ca:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <y_pid+0x1>
    10ce:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <y_pid+0x2>
    10d2:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <y_pid+0x3>
		q=0;
    10d6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <q>
    10da:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <q+0x1>
    10de:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <q+0x2>
    10e2:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <q+0x3>
    10e6:	0c c0       	rjmp	.+24     	; 0x1100 <accion_de_control+0x3c0>
	}
	else{
		q=1;
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a0 e8       	ldi	r26, 0x80	; 128
    10ee:	bf e3       	ldi	r27, 0x3F	; 63
    10f0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <q>
    10f4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <q+0x1>
    10f8:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <q+0x2>
    10fc:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <q+0x3>
	}
	
	return y_pid[0];
    1100:	60 91 b6 02 	lds	r22, 0x02B6	; 0x8002b6 <y_pid>
    1104:	70 91 b7 02 	lds	r23, 0x02B7	; 0x8002b7 <y_pid+0x1>
    1108:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <y_pid+0x2>
    110c:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <y_pid+0x3>
	
}
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	cf 90       	pop	r12
    1128:	bf 90       	pop	r11
    112a:	af 90       	pop	r10
    112c:	9f 90       	pop	r9
    112e:	8f 90       	pop	r8
    1130:	7f 90       	pop	r7
    1132:	6f 90       	pop	r6
    1134:	5f 90       	pop	r5
    1136:	4f 90       	pop	r4
    1138:	3f 90       	pop	r3
    113a:	2f 90       	pop	r2
    113c:	08 95       	ret

0000113e <step_on>:
void step_on(void){
	OCR1B=1023;
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	93 e0       	ldi	r25, 0x03	; 3
    1142:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1146:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    114a:	08 95       	ret

0000114c <step_off>:
}
void step_off(void){
	OCR1B=0;
    114c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1150:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1154:	08 95       	ret

00001156 <dispatch>:
/********************************************************************************************************/
/********************************************************************************************************/

/******************************************FUNCTION DECLARATION******************************************/
/********************************************************************************************************/
void dispatch (void ){
    1156:	2f 92       	push	r2
    1158:	3f 92       	push	r3
    115a:	4f 92       	push	r4
    115c:	5f 92       	push	r5
    115e:	6f 92       	push	r6
    1160:	7f 92       	push	r7
    1162:	8f 92       	push	r8
    1164:	9f 92       	push	r9
    1166:	af 92       	push	r10
    1168:	bf 92       	push	r11
    116a:	cf 92       	push	r12
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	a8 97       	sbiw	r28, 0x28	; 40
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
	
	// Si el ADC tiene una conversi�n, actuo
	if(conversion){
    118a:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <conversion>
    118e:	88 23       	and	r24, r24
    1190:	09 f4       	brne	.+2      	; 0x1194 <dispatch+0x3e>
    1192:	53 c0       	rjmp	.+166    	; 0x123a <dispatch+0xe4>
		if(modo==PID){
    1194:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <modo>
    1198:	8a 30       	cpi	r24, 0x0A	; 10
    119a:	e9 f4       	brne	.+58     	; 0x11d6 <dispatch+0x80>
			// Actualizo el ciclo de trabajo del PWM
			PWM_duty(accion_de_control());
    119c:	0e 94 a0 06 	call	0xd40	; 0xd40 <accion_de_control>
    11a0:	0e 94 04 02 	call	0x408	; 0x408 <PWM_duty>
			if(actualizar==1){
    11a4:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <actualizar>
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	09 f0       	breq	.+2      	; 0x11ae <dispatch+0x58>
    11ac:	44 c0       	rjmp	.+136    	; 0x1236 <dispatch+0xe0>
				update_value('R',curRef,0);
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <curRef>
    11b4:	82 e5       	ldi	r24, 0x52	; 82
    11b6:	0e 94 f6 05 	call	0xbec	; 0xbec <update_value>
				update_value('O',0,0);
    11ba:	40 e0       	ldi	r20, 0x00	; 0
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	8f e4       	ldi	r24, 0x4F	; 79
    11c0:	0e 94 f6 05 	call	0xbec	; 0xbec <update_value>
				update_value('A',curA,0);	
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <curA>
    11ca:	81 e4       	ldi	r24, 0x41	; 65
    11cc:	0e 94 f6 05 	call	0xbec	; 0xbec <update_value>
				actualizar=0;
    11d0:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <actualizar>
    11d4:	30 c0       	rjmp	.+96     	; 0x1236 <dispatch+0xe0>
			}
		}
		else if(modo==ADQ){
    11d6:	89 30       	cpi	r24, 0x09	; 9
    11d8:	71 f5       	brne	.+92     	; 0x1236 <dispatch+0xe0>
			// Env�o datos por el puerto serie a la PC
			USART_write(ADC&0xFF);
    11da:	a8 e7       	ldi	r26, 0x78	; 120
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	8d 91       	ld	r24, X+
    11e0:	9c 91       	ld	r25, X
    11e2:	0e 94 33 02 	call	0x466	; 0x466 <USART_write>
			USART_write(ADC>>8);
    11e6:	e8 e7       	ldi	r30, 0x78	; 120
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	91 81       	ldd	r25, Z+1	; 0x01
    11ee:	89 2f       	mov	r24, r25
    11f0:	0e 94 33 02 	call	0x466	; 0x466 <USART_write>
			// Si la PC env�a "1", entonces finaliza la transmisi�n, se desactiva el USART y el ADC y se vuelve al inicio.
			if(matlab==1){
    11f4:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <matlab>
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	e9 f4       	brne	.+58     	; 0x1236 <dispatch+0xe0>
				LCD_clear();
    11fc:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_clear>
				LCD_write_string_xy("Fin de muestreo.",1,0);
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	82 e5       	ldi	r24, 0x52	; 82
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
    120c:	ff ef       	ldi	r31, 0xFF	; 255
    120e:	2b e7       	ldi	r18, 0x7B	; 123
    1210:	32 e9       	ldi	r19, 0x92	; 146
    1212:	f1 50       	subi	r31, 0x01	; 1
    1214:	20 40       	sbci	r18, 0x00	; 0
    1216:	30 40       	sbci	r19, 0x00	; 0
    1218:	e1 f7       	brne	.-8      	; 0x1212 <dispatch+0xbc>
    121a:	00 c0       	rjmp	.+0      	; 0x121c <dispatch+0xc6>
    121c:	00 00       	nop
				_delay_ms(3000);
				routine=0;
    121e:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <routine>
				mode_selection=0;
    1222:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <mode_selection>
				modo=0;
    1226:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <modo>
				USART_disable();
    122a:	0e 94 43 02 	call	0x486	; 0x486 <USART_disable>
				ADC_disable();
    122e:	0e 94 93 00 	call	0x126	; 0x126 <ADC_disable>
				step_off();
    1232:	0e 94 a6 08 	call	0x114c	; 0x114c <step_off>
			}
		}
		conversion=0;	// Clear flag
    1236:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <conversion>
	}
	// Si se presiona el boton del encoder y me encuentro en el modo PID, detengo el controlador y entro al menú de parámetros
	if(button&&(modo==PID)){
    123a:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
    123e:	88 23       	and	r24, r24
    1240:	09 f4       	brne	.+2      	; 0x1244 <dispatch+0xee>
    1242:	ec c3       	rjmp	.+2008   	; 0x1a1c <dispatch+0x8c6>
    1244:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <modo>
    1248:	8a 30       	cpi	r24, 0x0A	; 10
    124a:	09 f0       	breq	.+2      	; 0x124e <dispatch+0xf8>
    124c:	e7 c3       	rjmp	.+1998   	; 0x1a1c <dispatch+0x8c6>
		button=0;
    124e:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
		OCR1B=0;
    1252:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1256:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		P=0; I=0; D=0;
    125a:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <P>
    125e:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <P+0x1>
    1262:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <P+0x2>
    1266:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <P+0x3>
    126a:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <I>
    126e:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <I+0x1>
    1272:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <I+0x2>
    1276:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <I+0x3>
    127a:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <D>
    127e:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <D+0x1>
    1282:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <D+0x2>
    1286:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <D+0x3>

		LCD_clear();
    128a:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_clear>
		LCD_write_string_xy(">Vref=      OK",1,0);
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	83 e6       	ldi	r24, 0x63	; 99
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
		LCD_write_string_xy(" A=      Atras",2,0);
    129a:	40 e0       	ldi	r20, 0x00	; 0
    129c:	62 e0       	ldi	r22, 0x02	; 2
    129e:	82 e7       	ldi	r24, 0x72	; 114
    12a0:	91 e0       	ldi	r25, 0x01	; 1
    12a2:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
		update_value('R',curRef,1);
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <curRef>
    12ac:	82 e5       	ldi	r24, 0x52	; 82
    12ae:	0e 94 f6 05 	call	0xbec	; 0xbec <update_value>
		update_value('A',curA,1);
    12b2:	41 e0       	ldi	r20, 0x01	; 1
    12b4:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <curA>
    12b8:	81 e4       	ldi	r24, 0x41	; 65
    12ba:	0e 94 f6 05 	call	0xbec	; 0xbec <update_value>

		cursor=0;
    12be:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <cursor>
		enter=0;
    12c2:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <enter>
		while(enter!=1){
    12c6:	a5 c3       	rjmp	.+1866   	; 0x1a12 <dispatch+0x8bc>
			if(turn){
    12c8:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <turn>
    12cc:	88 23       	and	r24, r24
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <dispatch+0x17c>
    12d0:	9e c0       	rjmp	.+316    	; 0x140e <dispatch+0x2b8>
				if((rotation())=='+'){
    12d2:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
    12d6:	8b 32       	cpi	r24, 0x2B	; 43
    12d8:	59 f4       	brne	.+22     	; 0x12f0 <dispatch+0x19a>
					if(cursor==3){cursor=0;}	// If OVF cursor...
    12da:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    12de:	83 30       	cpi	r24, 0x03	; 3
    12e0:	19 f4       	brne	.+6      	; 0x12e8 <dispatch+0x192>
    12e2:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <cursor>
    12e6:	13 c0       	rjmp	.+38     	; 0x130e <dispatch+0x1b8>
					else{cursor++;}
    12e8:	8f 5f       	subi	r24, 0xFF	; 255
    12ea:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <cursor>
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <dispatch+0x1b8>
				}
				else if((rotation())=='-'){
    12f0:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
    12f4:	8d 32       	cpi	r24, 0x2D	; 45
    12f6:	59 f4       	brne	.+22     	; 0x130e <dispatch+0x1b8>
					if(cursor==0){cursor=3;}	// If UDF cursor...
    12f8:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    12fc:	81 11       	cpse	r24, r1
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <dispatch+0x1b2>
    1300:	83 e0       	ldi	r24, 0x03	; 3
    1302:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <cursor>
    1306:	03 c0       	rjmp	.+6      	; 0x130e <dispatch+0x1b8>
					else{cursor--;}
    1308:	81 50       	subi	r24, 0x01	; 1
    130a:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <cursor>
				}
				switch(cursor){
    130e:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	21 f1       	breq	.+72     	; 0x135e <dispatch+0x208>
    1316:	30 f0       	brcs	.+12     	; 0x1324 <dispatch+0x1ce>
    1318:	82 30       	cpi	r24, 0x02	; 2
    131a:	f1 f1       	breq	.+124    	; 0x1398 <dispatch+0x242>
    131c:	83 30       	cpi	r24, 0x03	; 3
    131e:	09 f4       	brne	.+2      	; 0x1322 <dispatch+0x1cc>
    1320:	58 c0       	rjmp	.+176    	; 0x13d2 <dispatch+0x27c>
    1322:	73 c0       	rjmp	.+230    	; 0x140a <dispatch+0x2b4>
					case 0:
					{
						LCD_gotoxy(1,0);
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
						LCD_write('>');
    132c:	8e e3       	ldi	r24, 0x3E	; 62
    132e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>

						LCD_gotoxy(1,11);
    1332:	6b e0       	ldi	r22, 0x0B	; 11
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
						LCD_write(' ');
    133a:	80 e2       	ldi	r24, 0x20	; 32
    133c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
						LCD_gotoxy(2,0);
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
						LCD_write(' ');
    1348:	80 e2       	ldi	r24, 0x20	; 32
    134a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
						LCD_gotoxy(2,8);
    134e:	68 e0       	ldi	r22, 0x08	; 8
    1350:	82 e0       	ldi	r24, 0x02	; 2
    1352:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
						LCD_write(' ');
    1356:	80 e2       	ldi	r24, 0x20	; 32
    1358:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
						break;
    135c:	56 c0       	rjmp	.+172    	; 0x140a <dispatch+0x2b4>
					}
					case 1:
					{
						LCD_gotoxy(1,11);
    135e:	6b e0       	ldi	r22, 0x0B	; 11
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
						LCD_write('>');
    1366:	8e e3       	ldi	r24, 0x3E	; 62
    1368:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>

						LCD_gotoxy(1,0);
    136c:	60 e0       	ldi	r22, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
						LCD_write(' ');
    1374:	80 e2       	ldi	r24, 0x20	; 32
    1376:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
						LCD_gotoxy(2,0);
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
						LCD_write(' ');
    1382:	80 e2       	ldi	r24, 0x20	; 32
    1384:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
						LCD_gotoxy(2,8);
    1388:	68 e0       	ldi	r22, 0x08	; 8
    138a:	82 e0       	ldi	r24, 0x02	; 2
    138c:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
						LCD_write(' ');
    1390:	80 e2       	ldi	r24, 0x20	; 32
    1392:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
						break;
    1396:	39 c0       	rjmp	.+114    	; 0x140a <dispatch+0x2b4>
					}

					case 2:
					{
						LCD_gotoxy(2,0);
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	82 e0       	ldi	r24, 0x02	; 2
    139c:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
						LCD_write('>');
    13a0:	8e e3       	ldi	r24, 0x3E	; 62
    13a2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>

						LCD_gotoxy(1,11);
    13a6:	6b e0       	ldi	r22, 0x0B	; 11
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
						LCD_write(' ');
    13ae:	80 e2       	ldi	r24, 0x20	; 32
    13b0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
						LCD_gotoxy(1,0);
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
						LCD_write(' ');
    13bc:	80 e2       	ldi	r24, 0x20	; 32
    13be:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
						LCD_gotoxy(2,8);
    13c2:	68 e0       	ldi	r22, 0x08	; 8
    13c4:	82 e0       	ldi	r24, 0x02	; 2
    13c6:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
						LCD_write(' ');
    13ca:	80 e2       	ldi	r24, 0x20	; 32
    13cc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
						break;
    13d0:	1c c0       	rjmp	.+56     	; 0x140a <dispatch+0x2b4>
					}

					case 3:
					{
						LCD_gotoxy(2,8);
    13d2:	68 e0       	ldi	r22, 0x08	; 8
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
						LCD_write('>');
    13da:	8e e3       	ldi	r24, 0x3E	; 62
    13dc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>

						LCD_gotoxy(1,11);
    13e0:	6b e0       	ldi	r22, 0x0B	; 11
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
						LCD_write(' ');
    13e8:	80 e2       	ldi	r24, 0x20	; 32
    13ea:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
						LCD_gotoxy(1,0);
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
						LCD_write(' ');
    13f6:	80 e2       	ldi	r24, 0x20	; 32
    13f8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
						LCD_gotoxy(2,0);
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
						LCD_write(' ');
    1404:	80 e2       	ldi	r24, 0x20	; 32
    1406:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
					}

					default:
						break;
					}
				turn=0;
    140a:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <turn>
			}
			if(button&&cursor==0){	// Rutina si se presiona la opción Vref
    140e:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
    1412:	88 23       	and	r24, r24
    1414:	09 f4       	brne	.+2      	; 0x1418 <dispatch+0x2c2>
    1416:	65 c0       	rjmp	.+202    	; 0x14e2 <dispatch+0x38c>
    1418:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    141c:	81 11       	cpse	r24, r1
    141e:	61 c0       	rjmp	.+194    	; 0x14e2 <dispatch+0x38c>
				button=0;
    1420:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
				LCD_gotoxy(1,7);
    1424:	67 e0       	ldi	r22, 0x07	; 7
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
				LCD_blinkON();
    142c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_blinkON>
				intro=0;
    1430:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <intro>
				while(intro!=1){
    1434:	51 c0       	rjmp	.+162    	; 0x14d8 <dispatch+0x382>
					if(turn){
    1436:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <turn>
    143a:	88 23       	and	r24, r24
    143c:	09 f4       	brne	.+2      	; 0x1440 <dispatch+0x2ea>
    143e:	41 c0       	rjmp	.+130    	; 0x14c2 <dispatch+0x36c>
						if(rotation()=='+'){
    1440:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
    1444:	8b 32       	cpi	r24, 0x2B	; 43
    1446:	59 f4       	brne	.+22     	; 0x145e <dispatch+0x308>
							if(curRef==100){curRef=0;}	// If OVF cursor...
    1448:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <curRef>
    144c:	84 36       	cpi	r24, 0x64	; 100
    144e:	19 f4       	brne	.+6      	; 0x1456 <dispatch+0x300>
    1450:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <curRef>
    1454:	13 c0       	rjmp	.+38     	; 0x147c <dispatch+0x326>
							else{curRef++;}
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <curRef>
    145c:	0f c0       	rjmp	.+30     	; 0x147c <dispatch+0x326>
						}
						else if(rotation()=='-'){
    145e:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
    1462:	8d 32       	cpi	r24, 0x2D	; 45
    1464:	59 f4       	brne	.+22     	; 0x147c <dispatch+0x326>
							if(curRef==0){curRef=100;}	// If UDF cursor...
    1466:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <curRef>
    146a:	81 11       	cpse	r24, r1
    146c:	04 c0       	rjmp	.+8      	; 0x1476 <dispatch+0x320>
    146e:	84 e6       	ldi	r24, 0x64	; 100
    1470:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <curRef>
    1474:	03 c0       	rjmp	.+6      	; 0x147c <dispatch+0x326>
							else{curRef--;}
    1476:	81 50       	subi	r24, 0x01	; 1
    1478:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <curRef>
						}
						update_value('R',curRef,1);
    147c:	41 e0       	ldi	r20, 0x01	; 1
    147e:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <curRef>
    1482:	82 e5       	ldi	r24, 0x52	; 82
    1484:	0e 94 f6 05 	call	0xbec	; 0xbec <update_value>
						x_ref[0]=(float)curRef*5/100;
    1488:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <curRef>
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__floatunsisf>
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 ea       	ldi	r20, 0xA0	; 160
    149c:	50 e4       	ldi	r21, 0x40	; 64
    149e:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	48 ec       	ldi	r20, 0xC8	; 200
    14a8:	52 e4       	ldi	r21, 0x42	; 66
    14aa:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    14ae:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <x_ref>
    14b2:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <x_ref+0x1>
    14b6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <x_ref+0x2>
    14ba:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <x_ref+0x3>
						turn=0;
    14be:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <turn>
					}
					if(button){button=0; intro=1; LCD_blinkOFF();}
    14c2:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
    14c6:	88 23       	and	r24, r24
    14c8:	39 f0       	breq	.+14     	; 0x14d8 <dispatch+0x382>
    14ca:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <intro>
    14d4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_blinkOFF>
			if(button&&cursor==0){	// Rutina si se presiona la opción Vref
				button=0;
				LCD_gotoxy(1,7);
				LCD_blinkON();
				intro=0;
				while(intro!=1){
    14d8:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <intro>
    14dc:	81 30       	cpi	r24, 0x01	; 1
    14de:	09 f0       	breq	.+2      	; 0x14e2 <dispatch+0x38c>
    14e0:	aa cf       	rjmp	.-172    	; 0x1436 <dispatch+0x2e0>
						turn=0;
					}
					if(button){button=0; intro=1; LCD_blinkOFF();}
				}
			}
			if(button&&cursor==1){	// Rutina si se presiona la opción OK
    14e2:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
    14e6:	88 23       	and	r24, r24
    14e8:	b1 f0       	breq	.+44     	; 0x1516 <dispatch+0x3c0>
    14ea:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	91 f4       	brne	.+36     	; 0x1516 <dispatch+0x3c0>
				button=0;
    14f2:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
				enter=1;
    14f6:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <enter>

				LCD_clear();
    14fa:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_clear>
				LCD_write_string_xy("Vout=     A=    ",1,0);
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	61 e0       	ldi	r22, 0x01	; 1
    1502:	81 e8       	ldi	r24, 0x81	; 129
    1504:	91 e0       	ldi	r25, 0x01	; 1
    1506:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
				LCD_write_string_xy("Vref=",2,0);
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	62 e0       	ldi	r22, 0x02	; 2
    150e:	82 e9       	ldi	r24, 0x92	; 146
    1510:	91 e0       	ldi	r25, 0x01	; 1
    1512:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
			}
			if(button&&cursor==2){	// Rutina si se presiona la opción A
    1516:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
    151a:	88 23       	and	r24, r24
    151c:	09 f4       	brne	.+2      	; 0x1520 <dispatch+0x3ca>
    151e:	68 c2       	rjmp	.+1232   	; 0x19f0 <dispatch+0x89a>
    1520:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    1524:	82 30       	cpi	r24, 0x02	; 2
    1526:	09 f0       	breq	.+2      	; 0x152a <dispatch+0x3d4>
    1528:	63 c2       	rjmp	.+1222   	; 0x19f0 <dispatch+0x89a>
				button=0;
    152a:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
				LCD_gotoxy(2,4);
    152e:	64 e0       	ldi	r22, 0x04	; 4
    1530:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
				LCD_blinkON();
    1534:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_blinkON>
				intro=0;
    1538:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <intro>
				while(intro!=1){
    153c:	4a c0       	rjmp	.+148    	; 0x15d2 <dispatch+0x47c>
					if(turn){
    153e:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <turn>
    1542:	88 23       	and	r24, r24
    1544:	d9 f1       	breq	.+118    	; 0x15bc <dispatch+0x466>
						if(rotation()=='+'){
    1546:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
    154a:	8b 32       	cpi	r24, 0x2B	; 43
    154c:	59 f4       	brne	.+22     	; 0x1564 <dispatch+0x40e>
							if(curA==100){curA=0;}	// If OVF cursor...
    154e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <curA>
    1552:	84 36       	cpi	r24, 0x64	; 100
    1554:	19 f4       	brne	.+6      	; 0x155c <dispatch+0x406>
    1556:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <curA>
    155a:	13 c0       	rjmp	.+38     	; 0x1582 <dispatch+0x42c>
							else{curA++;}
    155c:	8f 5f       	subi	r24, 0xFF	; 255
    155e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <curA>
    1562:	0f c0       	rjmp	.+30     	; 0x1582 <dispatch+0x42c>
						}
						else if(rotation()=='-'){
    1564:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
    1568:	8d 32       	cpi	r24, 0x2D	; 45
    156a:	59 f4       	brne	.+22     	; 0x1582 <dispatch+0x42c>
							if(curA==0){curA=100;}	// If UDF cursor...
    156c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <curA>
    1570:	81 11       	cpse	r24, r1
    1572:	04 c0       	rjmp	.+8      	; 0x157c <dispatch+0x426>
    1574:	84 e6       	ldi	r24, 0x64	; 100
    1576:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <curA>
    157a:	03 c0       	rjmp	.+6      	; 0x1582 <dispatch+0x42c>
							else{curA--;}
    157c:	81 50       	subi	r24, 0x01	; 1
    157e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <curA>
						}
						update_value('A',curA,1);
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <curA>
    1588:	81 e4       	ldi	r24, 0x41	; 65
    158a:	0e 94 f6 05 	call	0xbec	; 0xbec <update_value>
						A=(float)curA/100;
    158e:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <curA>
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__floatunsisf>
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	48 ec       	ldi	r20, 0xC8	; 200
    15a2:	52 e4       	ldi	r21, 0x42	; 66
    15a4:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    15a8:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <A>
    15ac:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <A+0x1>
    15b0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <A+0x2>
    15b4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <A+0x3>
						turn=0;
    15b8:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <turn>
					}
					if(button){button=0; intro=1; LCD_blinkOFF();}
    15bc:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
    15c0:	88 23       	and	r24, r24
    15c2:	39 f0       	breq	.+14     	; 0x15d2 <dispatch+0x47c>
    15c4:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <intro>
    15ce:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_blinkOFF>
			if(button&&cursor==2){	// Rutina si se presiona la opción A
				button=0;
				LCD_gotoxy(2,4);
				LCD_blinkON();
				intro=0;
				while(intro!=1){
    15d2:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <intro>
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	09 f0       	breq	.+2      	; 0x15dc <dispatch+0x486>
    15da:	b1 cf       	rjmp	.-158    	; 0x153e <dispatch+0x3e8>
						turn=0;
					}
					if(button){button=0; intro=1; LCD_blinkOFF();}
				}
				// Al cambiar el valor de A, cambian los coeficientes
				Tf=L*A/2;
    15dc:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <A>
    15e0:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <A+0x1>
    15e4:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <A+0x2>
    15e8:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <A+0x3>
    15ec:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <L>
    15f0:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <L+0x1>
    15f4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <L+0x2>
    15f8:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <L+0x3>
    15fc:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	5f e3       	ldi	r21, 0x3F	; 63
    1608:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    160c:	60 93 fa 02 	sts	0x02FA, r22	; 0x8002fa <Tf>
    1610:	70 93 fb 02 	sts	0x02FB, r23	; 0x8002fb <Tf+0x1>
    1614:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <Tf+0x2>
    1618:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <Tf+0x3>

				// Coeficientes del filtro PID
				a_pid[0]=T_samp+2*Tf;
    161c:	9b 01       	movw	r18, r22
    161e:	ac 01       	movw	r20, r24
    1620:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    1624:	6b 01       	movw	r12, r22
    1626:	7c 01       	movw	r14, r24
    1628:	40 90 0c 01 	lds	r4, 0x010C	; 0x80010c <T_samp>
    162c:	50 90 0d 01 	lds	r5, 0x010D	; 0x80010d <T_samp+0x1>
    1630:	60 90 0e 01 	lds	r6, 0x010E	; 0x80010e <T_samp+0x2>
    1634:	70 90 0f 01 	lds	r7, 0x010F	; 0x80010f <T_samp+0x3>
    1638:	a3 01       	movw	r20, r6
    163a:	92 01       	movw	r18, r4
    163c:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    1640:	6d 8b       	std	Y+21, r22	; 0x15
    1642:	7e 8b       	std	Y+22, r23	; 0x16
    1644:	8f 8b       	std	Y+23, r24	; 0x17
    1646:	98 8f       	std	Y+24, r25	; 0x18
    1648:	ae ea       	ldi	r26, 0xAE	; 174
    164a:	b2 e0       	ldi	r27, 0x02	; 2
    164c:	6d 93       	st	X+, r22
    164e:	7d 93       	st	X+, r23
    1650:	8d 93       	st	X+, r24
    1652:	9c 93       	st	X, r25
    1654:	13 97       	sbiw	r26, 0x03	; 3
				a_pid[1]=T_samp-2*Tf;
    1656:	a7 01       	movw	r20, r14
    1658:	96 01       	movw	r18, r12
    165a:	c3 01       	movw	r24, r6
    165c:	b2 01       	movw	r22, r4
    165e:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
    1662:	69 8f       	std	Y+25, r22	; 0x19
    1664:	7a 8f       	std	Y+26, r23	; 0x1a
    1666:	8b 8f       	std	Y+27, r24	; 0x1b
    1668:	9c 8f       	std	Y+28, r25	; 0x1c

				b_pid[0]=T_samp;
    166a:	0f 2e       	mov	r0, r31
    166c:	f6 ea       	ldi	r31, 0xA6	; 166
    166e:	2f 2e       	mov	r2, r31
    1670:	f2 e0       	ldi	r31, 0x02	; 2
    1672:	3f 2e       	mov	r3, r31
    1674:	f0 2d       	mov	r31, r0
				b_pid[1]=T_samp;
    1676:	f1 01       	movw	r30, r2
    1678:	44 82       	std	Z+4, r4	; 0x04
    167a:	55 82       	std	Z+5, r5	; 0x05
    167c:	66 82       	std	Z+6, r6	; 0x06
    167e:	77 82       	std	Z+7, r7	; 0x07

				// Coeficientes del filtro a la referencia
				b_ref[0]=T_samp*T_samp+b*Tip*2*T_samp+c*Tip*Tdp*4;
    1680:	a3 01       	movw	r20, r6
    1682:	92 01       	movw	r18, r4
    1684:	c3 01       	movw	r24, r6
    1686:	b2 01       	movw	r22, r4
    1688:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    168c:	69 83       	std	Y+1, r22	; 0x01
    168e:	7a 83       	std	Y+2, r23	; 0x02
    1690:	8b 83       	std	Y+3, r24	; 0x03
    1692:	9c 83       	std	Y+4, r25	; 0x04
    1694:	80 90 e6 02 	lds	r8, 0x02E6	; 0x8002e6 <Tip>
    1698:	90 90 e7 02 	lds	r9, 0x02E7	; 0x8002e7 <Tip+0x1>
    169c:	a0 90 e8 02 	lds	r10, 0x02E8	; 0x8002e8 <Tip+0x2>
    16a0:	b0 90 e9 02 	lds	r11, 0x02E9	; 0x8002e9 <Tip+0x3>
    16a4:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <b>
    16a8:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <b+0x1>
    16ac:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <b+0x2>
    16b0:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <b+0x3>
    16b4:	c5 01       	movw	r24, r10
    16b6:	b4 01       	movw	r22, r8
    16b8:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    16bc:	9b 01       	movw	r18, r22
    16be:	ac 01       	movw	r20, r24
    16c0:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    16c4:	9b 01       	movw	r18, r22
    16c6:	ac 01       	movw	r20, r24
    16c8:	c3 01       	movw	r24, r6
    16ca:	b2 01       	movw	r22, r4
    16cc:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    16d0:	6d 87       	std	Y+13, r22	; 0x0d
    16d2:	7e 87       	std	Y+14, r23	; 0x0e
    16d4:	8f 87       	std	Y+15, r24	; 0x0f
    16d6:	98 8b       	std	Y+16, r25	; 0x10
    16d8:	9b 01       	movw	r18, r22
    16da:	ac 01       	movw	r20, r24
    16dc:	69 81       	ldd	r22, Y+1	; 0x01
    16de:	7a 81       	ldd	r23, Y+2	; 0x02
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    16e8:	6d 83       	std	Y+5, r22	; 0x05
    16ea:	7e 83       	std	Y+6, r23	; 0x06
    16ec:	8f 83       	std	Y+7, r24	; 0x07
    16ee:	98 87       	std	Y+8, r25	; 0x08
    16f0:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    16f4:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    16f8:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    16fc:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1700:	a7 01       	movw	r20, r14
    1702:	96 01       	movw	r18, r12
    1704:	c5 01       	movw	r24, r10
    1706:	b4 01       	movw	r22, r8
    1708:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    170c:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <Tdp>
    1710:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <Tdp+0x1>
    1714:	40 91 ec 02 	lds	r20, 0x02EC	; 0x8002ec <Tdp+0x2>
    1718:	50 91 ed 02 	lds	r21, 0x02ED	; 0x8002ed <Tdp+0x3>
    171c:	29 87       	std	Y+9, r18	; 0x09
    171e:	3a 87       	std	Y+10, r19	; 0x0a
    1720:	4b 87       	std	Y+11, r20	; 0x0b
    1722:	5c 87       	std	Y+12, r21	; 0x0c
    1724:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	50 e4       	ldi	r21, 0x40	; 64
    1730:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    1734:	69 8b       	std	Y+17, r22	; 0x11
    1736:	7a 8b       	std	Y+18, r23	; 0x12
    1738:	8b 8b       	std	Y+19, r24	; 0x13
    173a:	9c 8b       	std	Y+20, r25	; 0x14
    173c:	9b 01       	movw	r18, r22
    173e:	ac 01       	movw	r20, r24
    1740:	6d 81       	ldd	r22, Y+5	; 0x05
    1742:	7e 81       	ldd	r23, Y+6	; 0x06
    1744:	8f 81       	ldd	r24, Y+7	; 0x07
    1746:	98 85       	ldd	r25, Y+8	; 0x08
    1748:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    174c:	6d 8f       	std	Y+29, r22	; 0x1d
    174e:	7e 8f       	std	Y+30, r23	; 0x1e
    1750:	8f 8f       	std	Y+31, r24	; 0x1f
    1752:	98 a3       	std	Y+32, r25	; 0x20
				b_ref[1]=2*T_samp*T_samp-8*c*Tip*Tdp;
    1754:	a3 01       	movw	r20, r6
    1756:	92 01       	movw	r18, r4
    1758:	c3 01       	movw	r24, r6
    175a:	b2 01       	movw	r22, r4
    175c:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    1760:	9b 01       	movw	r18, r22
    1762:	ac 01       	movw	r20, r24
    1764:	c3 01       	movw	r24, r6
    1766:	b2 01       	movw	r22, r4
    1768:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    176c:	6d 83       	std	Y+5, r22	; 0x05
    176e:	7e 83       	std	Y+6, r23	; 0x06
    1770:	8f 83       	std	Y+7, r24	; 0x07
    1772:	98 87       	std	Y+8, r25	; 0x08
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	51 e4       	ldi	r21, 0x41	; 65
    177c:	c7 01       	movw	r24, r14
    177e:	b6 01       	movw	r22, r12
    1780:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    1784:	9b 01       	movw	r18, r22
    1786:	ac 01       	movw	r20, r24
    1788:	c5 01       	movw	r24, r10
    178a:	b4 01       	movw	r22, r8
    178c:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    1790:	9b 01       	movw	r18, r22
    1792:	ac 01       	movw	r20, r24
    1794:	69 85       	ldd	r22, Y+9	; 0x09
    1796:	7a 85       	ldd	r23, Y+10	; 0x0a
    1798:	8b 85       	ldd	r24, Y+11	; 0x0b
    179a:	9c 85       	ldd	r25, Y+12	; 0x0c
    179c:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    17a0:	9b 01       	movw	r18, r22
    17a2:	ac 01       	movw	r20, r24
    17a4:	6d 81       	ldd	r22, Y+5	; 0x05
    17a6:	7e 81       	ldd	r23, Y+6	; 0x06
    17a8:	8f 81       	ldd	r24, Y+7	; 0x07
    17aa:	98 85       	ldd	r25, Y+8	; 0x08
    17ac:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
    17b0:	69 a3       	std	Y+33, r22	; 0x21
    17b2:	7a a3       	std	Y+34, r23	; 0x22
    17b4:	8b a3       	std	Y+35, r24	; 0x23
    17b6:	9c a3       	std	Y+36, r25	; 0x24
				b_ref[2]=T_samp*T_samp-b*Tip*2*T_samp+c*Tip*Tdp*4;
    17b8:	2d 85       	ldd	r18, Y+13	; 0x0d
    17ba:	3e 85       	ldd	r19, Y+14	; 0x0e
    17bc:	4f 85       	ldd	r20, Y+15	; 0x0f
    17be:	58 89       	ldd	r21, Y+16	; 0x10
    17c0:	69 81       	ldd	r22, Y+1	; 0x01
    17c2:	7a 81       	ldd	r23, Y+2	; 0x02
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
    17cc:	9b 01       	movw	r18, r22
    17ce:	ac 01       	movw	r20, r24
    17d0:	69 89       	ldd	r22, Y+17	; 0x11
    17d2:	7a 89       	ldd	r23, Y+18	; 0x12
    17d4:	8b 89       	ldd	r24, Y+19	; 0x13
    17d6:	9c 89       	ldd	r25, Y+20	; 0x14
    17d8:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    17dc:	6d a3       	std	Y+37, r22	; 0x25
    17de:	7e a3       	std	Y+38, r23	; 0x26
    17e0:	8f a3       	std	Y+39, r24	; 0x27
    17e2:	98 a7       	std	Y+40, r25	; 0x28
							
				a_ref[0]=T_samp*T_samp+Tip*2*T_samp+Tip*Tdp*4;
    17e4:	a5 01       	movw	r20, r10
    17e6:	94 01       	movw	r18, r8
    17e8:	c5 01       	movw	r24, r10
    17ea:	b4 01       	movw	r22, r8
    17ec:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    17f0:	9b 01       	movw	r18, r22
    17f2:	ac 01       	movw	r20, r24
    17f4:	c3 01       	movw	r24, r6
    17f6:	b2 01       	movw	r22, r4
    17f8:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    17fc:	6d 87       	std	Y+13, r22	; 0x0d
    17fe:	7e 87       	std	Y+14, r23	; 0x0e
    1800:	8f 87       	std	Y+15, r24	; 0x0f
    1802:	98 8b       	std	Y+16, r25	; 0x10
    1804:	9b 01       	movw	r18, r22
    1806:	ac 01       	movw	r20, r24
    1808:	69 81       	ldd	r22, Y+1	; 0x01
    180a:	7a 81       	ldd	r23, Y+2	; 0x02
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	9c 81       	ldd	r25, Y+4	; 0x04
    1810:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    1814:	6b 01       	movw	r12, r22
    1816:	7c 01       	movw	r14, r24
    1818:	29 85       	ldd	r18, Y+9	; 0x09
    181a:	3a 85       	ldd	r19, Y+10	; 0x0a
    181c:	4b 85       	ldd	r20, Y+11	; 0x0b
    181e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1820:	c5 01       	movw	r24, r10
    1822:	b4 01       	movw	r22, r8
    1824:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e8       	ldi	r20, 0x80	; 128
    182e:	50 e4       	ldi	r21, 0x40	; 64
    1830:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    1834:	69 8b       	std	Y+17, r22	; 0x11
    1836:	7a 8b       	std	Y+18, r23	; 0x12
    1838:	8b 8b       	std	Y+19, r24	; 0x13
    183a:	9c 8b       	std	Y+20, r25	; 0x14
    183c:	9b 01       	movw	r18, r22
    183e:	ac 01       	movw	r20, r24
    1840:	c7 01       	movw	r24, r14
    1842:	b6 01       	movw	r22, r12
    1844:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    1848:	6b 01       	movw	r12, r22
    184a:	7c 01       	movw	r14, r24
    184c:	02 e8       	ldi	r16, 0x82	; 130
    184e:	12 e0       	ldi	r17, 0x02	; 2
    1850:	d8 01       	movw	r26, r16
    1852:	6d 93       	st	X+, r22
    1854:	7d 93       	st	X+, r23
    1856:	8d 93       	st	X+, r24
    1858:	9c 93       	st	X, r25
    185a:	13 97       	sbiw	r26, 0x03	; 3
				a_ref[1]=2*T_samp*T_samp-8*Tip*Tdp;
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e0       	ldi	r20, 0x00	; 0
    1862:	51 e4       	ldi	r21, 0x41	; 65
    1864:	c5 01       	movw	r24, r10
    1866:	b4 01       	movw	r22, r8
    1868:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    186c:	9b 01       	movw	r18, r22
    186e:	ac 01       	movw	r20, r24
    1870:	69 85       	ldd	r22, Y+9	; 0x09
    1872:	7a 85       	ldd	r23, Y+10	; 0x0a
    1874:	8b 85       	ldd	r24, Y+11	; 0x0b
    1876:	9c 85       	ldd	r25, Y+12	; 0x0c
    1878:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    187c:	9b 01       	movw	r18, r22
    187e:	ac 01       	movw	r20, r24
    1880:	6d 81       	ldd	r22, Y+5	; 0x05
    1882:	7e 81       	ldd	r23, Y+6	; 0x06
    1884:	8f 81       	ldd	r24, Y+7	; 0x07
    1886:	98 85       	ldd	r25, Y+8	; 0x08
    1888:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
    188c:	6d 83       	std	Y+5, r22	; 0x05
    188e:	7e 83       	std	Y+6, r23	; 0x06
    1890:	8f 83       	std	Y+7, r24	; 0x07
    1892:	98 87       	std	Y+8, r25	; 0x08
				a_ref[2]=T_samp*T_samp-Tip*2*T_samp+Tip*Tdp*4;
    1894:	2d 85       	ldd	r18, Y+13	; 0x0d
    1896:	3e 85       	ldd	r19, Y+14	; 0x0e
    1898:	4f 85       	ldd	r20, Y+15	; 0x0f
    189a:	58 89       	ldd	r21, Y+16	; 0x10
    189c:	69 81       	ldd	r22, Y+1	; 0x01
    189e:	7a 81       	ldd	r23, Y+2	; 0x02
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	9c 81       	ldd	r25, Y+4	; 0x04
    18a4:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
    18a8:	9b 01       	movw	r18, r22
    18aa:	ac 01       	movw	r20, r24
    18ac:	69 89       	ldd	r22, Y+17	; 0x11
    18ae:	7a 89       	ldd	r23, Y+18	; 0x12
    18b0:	8b 89       	ldd	r24, Y+19	; 0x13
    18b2:	9c 89       	ldd	r25, Y+20	; 0x14
    18b4:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    18b8:	69 83       	std	Y+1, r22	; 0x01
    18ba:	7a 83       	std	Y+2, r23	; 0x02
    18bc:	8b 83       	std	Y+3, r24	; 0x03
    18be:	9c 83       	std	Y+4, r25	; 0x04

				// Disminuyo la cantidad de operaciones en punto flotante al redefinir los coeficientes
				b_ref[0]=b_ref[0]/a_ref[0];
    18c0:	a7 01       	movw	r20, r14
    18c2:	96 01       	movw	r18, r12
    18c4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    18c6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    18c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18ca:	98 a1       	ldd	r25, Y+32	; 0x20
    18cc:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    18d0:	ee e8       	ldi	r30, 0x8E	; 142
    18d2:	f2 e0       	ldi	r31, 0x02	; 2
    18d4:	60 83       	st	Z, r22
    18d6:	71 83       	std	Z+1, r23	; 0x01
    18d8:	82 83       	std	Z+2, r24	; 0x02
    18da:	93 83       	std	Z+3, r25	; 0x03
				b_ref[1]=b_ref[1]/a_ref[0];
    18dc:	a7 01       	movw	r20, r14
    18de:	96 01       	movw	r18, r12
    18e0:	69 a1       	ldd	r22, Y+33	; 0x21
    18e2:	7a a1       	ldd	r23, Y+34	; 0x22
    18e4:	8b a1       	ldd	r24, Y+35	; 0x23
    18e6:	9c a1       	ldd	r25, Y+36	; 0x24
    18e8:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    18ec:	60 93 92 02 	sts	0x0292, r22	; 0x800292 <b_ref+0x4>
    18f0:	70 93 93 02 	sts	0x0293, r23	; 0x800293 <b_ref+0x5>
    18f4:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <b_ref+0x6>
    18f8:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <b_ref+0x7>
				b_ref[2]=b_ref[2]/a_ref[0];
    18fc:	a7 01       	movw	r20, r14
    18fe:	96 01       	movw	r18, r12
    1900:	6d a1       	ldd	r22, Y+37	; 0x25
    1902:	7e a1       	ldd	r23, Y+38	; 0x26
    1904:	8f a1       	ldd	r24, Y+39	; 0x27
    1906:	98 a5       	ldd	r25, Y+40	; 0x28
    1908:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    190c:	60 93 96 02 	sts	0x0296, r22	; 0x800296 <b_ref+0x8>
    1910:	70 93 97 02 	sts	0x0297, r23	; 0x800297 <b_ref+0x9>
    1914:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <b_ref+0xa>
    1918:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <b_ref+0xb>
				a_ref[1]=a_ref[1]/a_ref[0];
    191c:	a7 01       	movw	r20, r14
    191e:	96 01       	movw	r18, r12
    1920:	6d 81       	ldd	r22, Y+5	; 0x05
    1922:	7e 81       	ldd	r23, Y+6	; 0x06
    1924:	8f 81       	ldd	r24, Y+7	; 0x07
    1926:	98 85       	ldd	r25, Y+8	; 0x08
    1928:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    192c:	d8 01       	movw	r26, r16
    192e:	14 96       	adiw	r26, 0x04	; 4
    1930:	6d 93       	st	X+, r22
    1932:	7d 93       	st	X+, r23
    1934:	8d 93       	st	X+, r24
    1936:	9c 93       	st	X, r25
    1938:	17 97       	sbiw	r26, 0x07	; 7
				a_ref[2]=a_ref[2]/a_ref[0];
    193a:	a7 01       	movw	r20, r14
    193c:	96 01       	movw	r18, r12
    193e:	69 81       	ldd	r22, Y+1	; 0x01
    1940:	7a 81       	ldd	r23, Y+2	; 0x02
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	9c 81       	ldd	r25, Y+4	; 0x04
    1946:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    194a:	f8 01       	movw	r30, r16
    194c:	60 87       	std	Z+8, r22	; 0x08
    194e:	71 87       	std	Z+9, r23	; 0x09
    1950:	82 87       	std	Z+10, r24	; 0x0a
    1952:	93 87       	std	Z+11, r25	; 0x0b

				b_pid[0]=b_pid[0]/a_pid[0];
    1954:	2d 89       	ldd	r18, Y+21	; 0x15
    1956:	3e 89       	ldd	r19, Y+22	; 0x16
    1958:	4f 89       	ldd	r20, Y+23	; 0x17
    195a:	58 8d       	ldd	r21, Y+24	; 0x18
    195c:	c3 01       	movw	r24, r6
    195e:	b2 01       	movw	r22, r4
    1960:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    1964:	d1 01       	movw	r26, r2
    1966:	6d 93       	st	X+, r22
    1968:	7d 93       	st	X+, r23
    196a:	8d 93       	st	X+, r24
    196c:	9c 93       	st	X, r25
    196e:	13 97       	sbiw	r26, 0x03	; 3
				a_pid[1]=a_pid[1]/a_pid[0];
    1970:	2d 89       	ldd	r18, Y+21	; 0x15
    1972:	3e 89       	ldd	r19, Y+22	; 0x16
    1974:	4f 89       	ldd	r20, Y+23	; 0x17
    1976:	58 8d       	ldd	r21, Y+24	; 0x18
    1978:	69 8d       	ldd	r22, Y+25	; 0x19
    197a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    197c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    197e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1980:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    1984:	60 93 b2 02 	sts	0x02B2, r22	; 0x8002b2 <a_pid+0x4>
    1988:	70 93 b3 02 	sts	0x02B3, r23	; 0x8002b3 <a_pid+0x5>
    198c:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <a_pid+0x6>
    1990:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <a_pid+0x7>

				KI=(Kxp*T_samp)/Tip;
    1994:	c0 90 e2 02 	lds	r12, 0x02E2	; 0x8002e2 <Kxp>
    1998:	d0 90 e3 02 	lds	r13, 0x02E3	; 0x8002e3 <Kxp+0x1>
    199c:	e0 90 e4 02 	lds	r14, 0x02E4	; 0x8002e4 <Kxp+0x2>
    19a0:	f0 90 e5 02 	lds	r15, 0x02E5	; 0x8002e5 <Kxp+0x3>
    19a4:	a7 01       	movw	r20, r14
    19a6:	96 01       	movw	r18, r12
    19a8:	c3 01       	movw	r24, r6
    19aa:	b2 01       	movw	r22, r4
    19ac:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    19b0:	a5 01       	movw	r20, r10
    19b2:	94 01       	movw	r18, r8
    19b4:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    19b8:	60 93 ca 02 	sts	0x02CA, r22	; 0x8002ca <KI>
    19bc:	70 93 cb 02 	sts	0x02CB, r23	; 0x8002cb <KI+0x1>
    19c0:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <KI+0x2>
    19c4:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <KI+0x3>
				KD=(Tdp*Kxp)/T_samp;
    19c8:	a7 01       	movw	r20, r14
    19ca:	96 01       	movw	r18, r12
    19cc:	69 85       	ldd	r22, Y+9	; 0x09
    19ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    19d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    19d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    19d4:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    19d8:	a3 01       	movw	r20, r6
    19da:	92 01       	movw	r18, r4
    19dc:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    19e0:	60 93 c6 02 	sts	0x02C6, r22	; 0x8002c6 <KD>
    19e4:	70 93 c7 02 	sts	0x02C7, r23	; 0x8002c7 <KD+0x1>
    19e8:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <KD+0x2>
    19ec:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <KD+0x3>
			}
			if(button&&cursor==3){	// Rutina si se presiona la opción Atras
    19f0:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
    19f4:	88 23       	and	r24, r24
    19f6:	69 f0       	breq	.+26     	; 0x1a12 <dispatch+0x8bc>
    19f8:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    19fc:	83 30       	cpi	r24, 0x03	; 3
    19fe:	49 f4       	brne	.+18     	; 0x1a12 <dispatch+0x8bc>
				button=0;
    1a00:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
				enter=1;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <enter>
				routine=0;
    1a0a:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <routine>
				LCD_clear();
    1a0e:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_clear>
		update_value('R',curRef,1);
		update_value('A',curA,1);

		cursor=0;
		enter=0;
		while(enter!=1){
    1a12:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <enter>
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <dispatch+0x8c6>
    1a1a:	56 cc       	rjmp	.-1876   	; 0x12c8 <dispatch+0x172>
				routine=0;
				LCD_clear();
			}
		}
	}
}
    1a1c:	a8 96       	adiw	r28, 0x28	; 40
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	ff 90       	pop	r15
    1a32:	ef 90       	pop	r14
    1a34:	df 90       	pop	r13
    1a36:	cf 90       	pop	r12
    1a38:	bf 90       	pop	r11
    1a3a:	af 90       	pop	r10
    1a3c:	9f 90       	pop	r9
    1a3e:	8f 90       	pop	r8
    1a40:	7f 90       	pop	r7
    1a42:	6f 90       	pop	r6
    1a44:	5f 90       	pop	r5
    1a46:	4f 90       	pop	r4
    1a48:	3f 90       	pop	r3
    1a4a:	2f 90       	pop	r2
    1a4c:	08 95       	ret

00001a4e <main>:
/********************************************************************************************************/

/**********************************************MAIN PROGRAM**********************************************/
/********************************************************************************************************/
int main(void)
{	
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	ac 97       	sbiw	r28, 0x2c	; 44
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
	// Acción de control
	DDRB|= (1<<DDB2);
    1a62:	84 b1       	in	r24, 0x04	; 4
    1a64:	84 60       	ori	r24, 0x04	; 4
    1a66:	84 b9       	out	0x04, r24	; 4
	
	// LED built-on
	DDRB|=(1<<DDB5);
    1a68:	84 b1       	in	r24, 0x04	; 4
    1a6a:	80 62       	ori	r24, 0x20	; 32
    1a6c:	84 b9       	out	0x04, r24	; 4
	
	/****************************************************************/
	// LCD Initialization
	LCD_Init();
    1a6e:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Init>
	
	// UART Initialization
	USART_Init();
    1a72:	0e 94 17 02 	call	0x42e	; 0x42e <USART_Init>
	
	// Encoder Initialization
	encoder_init();
    1a76:	0e 94 99 00 	call	0x132	; 0x132 <encoder_init>
	
	// Timer0 Initialization
	TIMER0_init();
    1a7a:	0e 94 c1 02 	call	0x582	; 0x582 <TIMER0_init>

	 LCD_write_string_xy("   Bienvenido   ",1,1);
    1a7e:	41 e0       	ldi	r20, 0x01	; 1
    1a80:	61 e0       	ldi	r22, 0x01	; 1
    1a82:	88 e9       	ldi	r24, 0x98	; 152
    1a84:	91 e0       	ldi	r25, 0x01	; 1
    1a86:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
    1a8a:	2f ef       	ldi	r18, 0xFF	; 255
    1a8c:	83 ed       	ldi	r24, 0xD3	; 211
    1a8e:	90 e3       	ldi	r25, 0x30	; 48
    1a90:	21 50       	subi	r18, 0x01	; 1
    1a92:	80 40       	sbci	r24, 0x00	; 0
    1a94:	90 40       	sbci	r25, 0x00	; 0
    1a96:	e1 f7       	brne	.-8      	; 0x1a90 <main+0x42>
    1a98:	00 c0       	rjmp	.+0      	; 0x1a9a <main+0x4c>
    1a9a:	00 00       	nop
	_delay_ms(1000);
	LCD_clear();
    1a9c:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_clear>
	
	LCD_write_string_xy("Control III &",1,1);
    1aa0:	41 e0       	ldi	r20, 0x01	; 1
    1aa2:	61 e0       	ldi	r22, 0x01	; 1
    1aa4:	89 ea       	ldi	r24, 0xA9	; 169
    1aa6:	91 e0       	ldi	r25, 0x01	; 1
    1aa8:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
	LCD_write_string_xy("Arquitectura",2,1);
    1aac:	41 e0       	ldi	r20, 0x01	; 1
    1aae:	62 e0       	ldi	r22, 0x02	; 2
    1ab0:	87 eb       	ldi	r24, 0xB7	; 183
    1ab2:	91 e0       	ldi	r25, 0x01	; 1
    1ab4:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
    1ab8:	af ef       	ldi	r26, 0xFF	; 255
    1aba:	b3 ed       	ldi	r27, 0xD3	; 211
    1abc:	e0 e3       	ldi	r30, 0x30	; 48
    1abe:	a1 50       	subi	r26, 0x01	; 1
    1ac0:	b0 40       	sbci	r27, 0x00	; 0
    1ac2:	e0 40       	sbci	r30, 0x00	; 0
    1ac4:	e1 f7       	brne	.-8      	; 0x1abe <main+0x70>
    1ac6:	00 c0       	rjmp	.+0      	; 0x1ac8 <main+0x7a>
    1ac8:	00 00       	nop
	_delay_ms(1000);
	
	
	// Global interrupts enable
	sei();
    1aca:	78 94       	sei
	
	while(1){
		if(mode_selection!=1){
    1acc:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <mode_selection>
    1ad0:	81 30       	cpi	r24, 0x01	; 1
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <main+0x88>
    1ad4:	74 c0       	rjmp	.+232    	; 0x1bbe <main+0x170>
			/* Rutina de selecci�n de modo */
			LCD_clear();
    1ad6:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_clear>
			LCD_write_string_xy("Seleccione modo:",1,0);
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	61 e0       	ldi	r22, 0x01	; 1
    1ade:	84 ec       	ldi	r24, 0xC4	; 196
    1ae0:	91 e0       	ldi	r25, 0x01	; 1
    1ae2:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
			LCD_write_string_xy("PID",2,1);
    1ae6:	41 e0       	ldi	r20, 0x01	; 1
    1ae8:	62 e0       	ldi	r22, 0x02	; 2
    1aea:	85 ed       	ldi	r24, 0xD5	; 213
    1aec:	91 e0       	ldi	r25, 0x01	; 1
    1aee:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
			LCD_write_string_xy("ADQ",2,13);
    1af2:	4d e0       	ldi	r20, 0x0D	; 13
    1af4:	62 e0       	ldi	r22, 0x02	; 2
    1af6:	86 ee       	ldi	r24, 0xE6	; 230
    1af8:	91 e0       	ldi	r25, 0x01	; 1
    1afa:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
			LCD_gotoxy(2,0);
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
			LCD_write('>');
    1b06:	8e e3       	ldi	r24, 0x3E	; 62
    1b08:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
			cursor=0;
    1b0c:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <cursor>
    1b10:	56 c0       	rjmp	.+172    	; 0x1bbe <main+0x170>
		}
		while(mode_selection!=1){
			// Detecto si se gira el potenciometro del encoder
			if(turn){
    1b12:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <turn>
    1b16:	88 23       	and	r24, r24
    1b18:	89 f1       	breq	.+98     	; 0x1b7c <main+0x12e>
				if((rotation())=='+'){
    1b1a:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
    1b1e:	8b 32       	cpi	r24, 0x2B	; 43
    1b20:	59 f4       	brne	.+22     	; 0x1b38 <main+0xea>
					if(cursor==1){cursor=0;}	// If OVF cursor...
    1b22:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	19 f4       	brne	.+6      	; 0x1b30 <main+0xe2>
    1b2a:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <cursor>
    1b2e:	13 c0       	rjmp	.+38     	; 0x1b56 <main+0x108>
					else{cursor++;}
    1b30:	8f 5f       	subi	r24, 0xFF	; 255
    1b32:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <cursor>
    1b36:	0f c0       	rjmp	.+30     	; 0x1b56 <main+0x108>
				}
				else if((rotation())=='-'){
    1b38:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
    1b3c:	8d 32       	cpi	r24, 0x2D	; 45
    1b3e:	59 f4       	brne	.+22     	; 0x1b56 <main+0x108>
					if(cursor==0){cursor=1;}	// If UDF cursor...
    1b40:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    1b44:	81 11       	cpse	r24, r1
    1b46:	04 c0       	rjmp	.+8      	; 0x1b50 <main+0x102>
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <cursor>
    1b4e:	03 c0       	rjmp	.+6      	; 0x1b56 <main+0x108>
					else{cursor--;}
    1b50:	81 50       	subi	r24, 0x01	; 1
    1b52:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <cursor>
				}
				// Una vez hecho el giro del potenciometro, muevo el "cursor" del display al modo seleccionado
				if(cursor==0){LCD_write_string_xy(">PID         ADQ",2,0);}
    1b56:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    1b5a:	81 11       	cpse	r24, r1
    1b5c:	07 c0       	rjmp	.+14     	; 0x1b6c <main+0x11e>
    1b5e:	40 e0       	ldi	r20, 0x00	; 0
    1b60:	62 e0       	ldi	r22, 0x02	; 2
    1b62:	89 ed       	ldi	r24, 0xD9	; 217
    1b64:	91 e0       	ldi	r25, 0x01	; 1
    1b66:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
    1b6a:	06 c0       	rjmp	.+12     	; 0x1b78 <main+0x12a>
				else{LCD_write_string_xy(" PID        >ADQ",2,0);}
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	62 e0       	ldi	r22, 0x02	; 2
    1b70:	8a ee       	ldi	r24, 0xEA	; 234
    1b72:	91 e0       	ldi	r25, 0x01	; 1
    1b74:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
				turn=0;
    1b78:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <turn>
			}
			// Detecto si se presiona el pulsador del encoder
			if(button&&!(cursor)){modo=PID; button=0; mode_selection=1;}
    1b7c:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
    1b80:	88 23       	and	r24, r24
    1b82:	69 f0       	breq	.+26     	; 0x1b9e <main+0x150>
    1b84:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    1b88:	81 11       	cpse	r24, r1
    1b8a:	09 c0       	rjmp	.+18     	; 0x1b9e <main+0x150>
    1b8c:	8a e0       	ldi	r24, 0x0A	; 10
    1b8e:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <modo>
    1b92:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <mode_selection>
    1b9c:	10 c0       	rjmp	.+32     	; 0x1bbe <main+0x170>
			else if(button&&cursor){modo=ADQ; button=0; mode_selection=1;}
    1b9e:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
    1ba2:	88 23       	and	r24, r24
    1ba4:	61 f0       	breq	.+24     	; 0x1bbe <main+0x170>
    1ba6:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    1baa:	88 23       	and	r24, r24
    1bac:	41 f0       	breq	.+16     	; 0x1bbe <main+0x170>
    1bae:	89 e0       	ldi	r24, 0x09	; 9
    1bb0:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <modo>
    1bb4:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <mode_selection>
			LCD_write_string_xy("ADQ",2,13);
			LCD_gotoxy(2,0);
			LCD_write('>');
			cursor=0;
		}
		while(mode_selection!=1){
    1bbe:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <mode_selection>
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	09 f0       	breq	.+2      	; 0x1bc8 <main+0x17a>
    1bc6:	a5 cf       	rjmp	.-182    	; 0x1b12 <main+0xc4>
			// Detecto si se presiona el pulsador del encoder
			if(button&&!(cursor)){modo=PID; button=0; mode_selection=1;}
			else if(button&&cursor){modo=ADQ; button=0; mode_selection=1;}
		}
		/*Rutina de inicilizaci�n del modo adquisidor de datos*/
		if(modo==ADQ){
    1bc8:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <modo>
    1bcc:	89 30       	cpi	r24, 0x09	; 9
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <main+0x184>
    1bd0:	43 c0       	rjmp	.+134    	; 0x1c58 <main+0x20a>
			OCR1B=0;
    1bd2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1bd6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			ADC_init(ADQ);
    1bda:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
			PWM_init();
    1bde:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <PWM_init>
			USART_enable();
    1be2:	0e 94 3d 02 	call	0x47a	; 0x47a <USART_enable>
			
			LCD_clear();
    1be6:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_clear>
			LCD_write_string_xy("Esperando a",1,0);
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	61 e0       	ldi	r22, 0x01	; 1
    1bee:	8b ef       	ldi	r24, 0xFB	; 251
    1bf0:	91 e0       	ldi	r25, 0x01	; 1
    1bf2:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
			LCD_write_string_xy("MATLAB... >Atras",2,0);
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	62 e0       	ldi	r22, 0x02	; 2
    1bfa:	87 e0       	ldi	r24, 0x07	; 7
    1bfc:	92 e0       	ldi	r25, 0x02	; 2
    1bfe:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
			// Me quedo a la espera de que matlab me envie la se�al de inicio por puerto serie, mientras, observo el pulsador del encoder
			// Si se presiona el boton, se sale del bucle y se vuelve al menu de selecci�n de modo
			matlab=0; // Clear flag
    1c02:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <matlab>
			while(matlab==0){
    1c06:	0f c0       	rjmp	.+30     	; 0x1c26 <main+0x1d8>
				if(button){button=0; routine=0; matlab=2; mode_selection=0; modo=0;}
    1c08:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
    1c0c:	88 23       	and	r24, r24
    1c0e:	59 f0       	breq	.+22     	; 0x1c26 <main+0x1d8>
    1c10:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
    1c14:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <routine>
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <matlab>
    1c1e:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <mode_selection>
    1c22:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <modo>
			LCD_write_string_xy("Esperando a",1,0);
			LCD_write_string_xy("MATLAB... >Atras",2,0);
			// Me quedo a la espera de que matlab me envie la se�al de inicio por puerto serie, mientras, observo el pulsador del encoder
			// Si se presiona el boton, se sale del bucle y se vuelve al menu de selecci�n de modo
			matlab=0; // Clear flag
			while(matlab==0){
    1c26:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <matlab>
    1c2a:	88 23       	and	r24, r24
    1c2c:	69 f3       	breq	.-38     	; 0x1c08 <main+0x1ba>
				if(button){button=0; routine=0; matlab=2; mode_selection=0; modo=0;}
			}
			// Si se recibió la señal deseada, muestreo
			if(matlab==1){
    1c2e:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <matlab>
    1c32:	81 30       	cpi	r24, 0x01	; 1
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <main+0x1ea>
    1c36:	21 c4       	rjmp	.+2114   	; 0x247a <main+0xa2c>
				LCD_clear();
    1c38:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_clear>
				LCD_write_string_xy("Muestreando...",1,0);
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	61 e0       	ldi	r22, 0x01	; 1
    1c40:	88 e1       	ldi	r24, 0x18	; 24
    1c42:	92 e0       	ldi	r25, 0x02	; 2
    1c44:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
				routine=1;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <routine>
				matlab=0;
    1c4e:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <matlab>
				step_on();	// Aplico un escal�n a la planta
    1c52:	0e 94 9f 08 	call	0x113e	; 0x113e <step_on>
    1c56:	11 c4       	rjmp	.+2082   	; 0x247a <main+0xa2c>
			}
		}
		/*Rutina de inicializaci�n del modo controlador PID*/
		else if(modo==PID){
    1c58:	8a 30       	cpi	r24, 0x0A	; 10
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <main+0x210>
    1c5c:	0a c4       	rjmp	.+2068   	; 0x2472 <main+0xa24>
			LCD_clear();
    1c5e:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_clear>
			LCD_write_string_xy("Controlador:",1,0);
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	61 e0       	ldi	r22, 0x01	; 1
    1c66:	87 e2       	ldi	r24, 0x27	; 39
    1c68:	92 e0       	ldi	r25, 0x02	; 2
    1c6a:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
			LCD_write_string_xy("Canc. polo/cero",2,1);
    1c6e:	41 e0       	ldi	r20, 0x01	; 1
    1c70:	62 e0       	ldi	r22, 0x02	; 2
    1c72:	84 e3       	ldi	r24, 0x34	; 52
    1c74:	92 e0       	ldi	r25, 0x02	; 2
    1c76:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
			LCD_gotoxy(2,0);
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	82 e0       	ldi	r24, 0x02	; 2
    1c7e:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
			LCD_write('>');
    1c82:	8e e3       	ldi	r24, 0x3E	; 62
    1c84:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
			cursor=0;
    1c88:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <cursor>
			controller_selection=0;
    1c8c:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <controller_selection>
			enter=0;
    1c90:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <enter>
			// Selecciono el controlador que se desea implementar
			while(enter!=1){
    1c94:	8f c0       	rjmp	.+286    	; 0x1db4 <main+0x366>
				// Detecto si se gira el potenciometro del encoder
				if(turn){
    1c96:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <turn>
    1c9a:	88 23       	and	r24, r24
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <main+0x252>
    1c9e:	51 c0       	rjmp	.+162    	; 0x1d42 <main+0x2f4>
					if((rotation())=='+'){
    1ca0:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
    1ca4:	8b 32       	cpi	r24, 0x2B	; 43
    1ca6:	59 f4       	brne	.+22     	; 0x1cbe <main+0x270>
						if(cursor==2){cursor=0;}	// If OVF cursor...
    1ca8:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    1cac:	82 30       	cpi	r24, 0x02	; 2
    1cae:	19 f4       	brne	.+6      	; 0x1cb6 <main+0x268>
    1cb0:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <cursor>
    1cb4:	13 c0       	rjmp	.+38     	; 0x1cdc <main+0x28e>
						else{cursor++;}
    1cb6:	8f 5f       	subi	r24, 0xFF	; 255
    1cb8:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <cursor>
    1cbc:	0f c0       	rjmp	.+30     	; 0x1cdc <main+0x28e>
					}
					else if((rotation())=='-'){
    1cbe:	0e 94 ba 00 	call	0x174	; 0x174 <rotation>
    1cc2:	8d 32       	cpi	r24, 0x2D	; 45
    1cc4:	59 f4       	brne	.+22     	; 0x1cdc <main+0x28e>
						if(cursor==0){cursor=2;}	// If UDF cursor...
    1cc6:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    1cca:	81 11       	cpse	r24, r1
    1ccc:	04 c0       	rjmp	.+8      	; 0x1cd6 <main+0x288>
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <cursor>
    1cd4:	03 c0       	rjmp	.+6      	; 0x1cdc <main+0x28e>
						else{cursor--;}
    1cd6:	81 50       	subi	r24, 0x01	; 1
    1cd8:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <cursor>
					}
					// Una vez hecho el giro del potenciometro, muevo el "cursor" del display al controlador seleccionado
					switch(cursor){
    1cdc:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    1ce0:	81 30       	cpi	r24, 0x01	; 1
    1ce2:	91 f0       	breq	.+36     	; 0x1d08 <main+0x2ba>
    1ce4:	18 f0       	brcs	.+6      	; 0x1cec <main+0x29e>
    1ce6:	82 30       	cpi	r24, 0x02	; 2
    1ce8:	e9 f0       	breq	.+58     	; 0x1d24 <main+0x2d6>
    1cea:	29 c0       	rjmp	.+82     	; 0x1d3e <main+0x2f0>
						case 0:
						{
							LCD_write_string_xy("Canc. polo/cero ",2,1);
    1cec:	41 e0       	ldi	r20, 0x01	; 1
    1cee:	62 e0       	ldi	r22, 0x02	; 2
    1cf0:	84 e4       	ldi	r24, 0x44	; 68
    1cf2:	92 e0       	ldi	r25, 0x02	; 2
    1cf4:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
							LCD_gotoxy(2,0);
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
							LCD_write('>');
    1d00:	8e e3       	ldi	r24, 0x3E	; 62
    1d02:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
							break;
    1d06:	1b c0       	rjmp	.+54     	; 0x1d3e <main+0x2f0>
						}
						case 1:
						{
							LCD_write_string_xy("Enfoque IMC     ",2,1);
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	62 e0       	ldi	r22, 0x02	; 2
    1d0c:	85 e5       	ldi	r24, 0x55	; 85
    1d0e:	92 e0       	ldi	r25, 0x02	; 2
    1d10:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
							LCD_gotoxy(2,0);
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
							LCD_write('>');
    1d1c:	8e e3       	ldi	r24, 0x3E	; 62
    1d1e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
							break;
    1d22:	0d c0       	rjmp	.+26     	; 0x1d3e <main+0x2f0>
						}
						case 2:
						{
							LCD_write_string_xy("Atras           ",2,1);
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	62 e0       	ldi	r22, 0x02	; 2
    1d28:	86 e6       	ldi	r24, 0x66	; 102
    1d2a:	92 e0       	ldi	r25, 0x02	; 2
    1d2c:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
							LCD_gotoxy(2,0);
    1d30:	60 e0       	ldi	r22, 0x00	; 0
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_gotoxy>
							LCD_write('>');
    1d38:	8e e3       	ldi	r24, 0x3E	; 62
    1d3a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write>
							break;
						}
						default:
						break;
					}
					turn=0;
    1d3e:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <turn>
				}
				// Detecto si se presiona el pulsador del encoder
				if(button&&(cursor==0)){controller_selection=PID_canPC; button=0; enter=1;}
    1d42:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
    1d46:	88 23       	and	r24, r24
    1d48:	69 f0       	breq	.+26     	; 0x1d64 <main+0x316>
    1d4a:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    1d4e:	81 11       	cpse	r24, r1
    1d50:	09 c0       	rjmp	.+18     	; 0x1d64 <main+0x316>
    1d52:	8c e0       	ldi	r24, 0x0C	; 12
    1d54:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <controller_selection>
    1d58:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <enter>
    1d62:	28 c0       	rjmp	.+80     	; 0x1db4 <main+0x366>
				else if(button&&(cursor==1)){controller_selection=PID_IMC; button=0; enter=1;}
    1d64:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
    1d68:	88 23       	and	r24, r24
    1d6a:	69 f0       	breq	.+26     	; 0x1d86 <main+0x338>
    1d6c:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    1d70:	81 30       	cpi	r24, 0x01	; 1
    1d72:	49 f4       	brne	.+18     	; 0x1d86 <main+0x338>
    1d74:	8b e0       	ldi	r24, 0x0B	; 11
    1d76:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <controller_selection>
    1d7a:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <enter>
    1d84:	17 c0       	rjmp	.+46     	; 0x1db4 <main+0x366>
				else if(button&&(cursor==2)){controller_selection=0; button=0; enter=1; routine=0; mode_selection=0; modo=0;}
    1d86:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <button>
    1d8a:	88 23       	and	r24, r24
    1d8c:	91 f0       	breq	.+36     	; 0x1db2 <main+0x364>
    1d8e:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <cursor>
    1d92:	82 30       	cpi	r24, 0x02	; 2
    1d94:	71 f4       	brne	.+28     	; 0x1db2 <main+0x364>
    1d96:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <controller_selection>
    1d9a:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <button>
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <enter>
    1da4:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <routine>
    1da8:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <mode_selection>
    1dac:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <modo>
    1db0:	01 c0       	rjmp	.+2      	; 0x1db4 <main+0x366>
				else{asm("NOP");}
    1db2:	00 00       	nop
			LCD_write('>');
			cursor=0;
			controller_selection=0;
			enter=0;
			// Selecciono el controlador que se desea implementar
			while(enter!=1){
    1db4:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <enter>
    1db8:	81 30       	cpi	r24, 0x01	; 1
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <main+0x370>
    1dbc:	6c cf       	rjmp	.-296    	; 0x1c96 <main+0x248>
				else if(button&&(cursor==2)){controller_selection=0; button=0; enter=1; routine=0; mode_selection=0; modo=0;}
				else{asm("NOP");}
			}
			// En caso de se haya seleccionado algun controlador, calculo los par�metros, sino, vuelvo al menu de selección de modo
			//toggle(PORTB,PORTB5);
			switch(controller_selection){
    1dbe:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <controller_selection>
    1dc2:	8b 30       	cpi	r24, 0x0B	; 11
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <main+0x37a>
    1dc6:	72 c0       	rjmp	.+228    	; 0x1eac <main+0x45e>
    1dc8:	8c 30       	cpi	r24, 0x0C	; 12
    1dca:	09 f0       	breq	.+2      	; 0x1dce <main+0x380>
    1dcc:	c3 c0       	rjmp	.+390    	; 0x1f54 <main+0x506>
				case 0:
					break;
				case PID_canPC:
				{
					// Selección de parámetros A (alpha), b y c
					PID_parametters();
    1dce:	0e 94 26 03 	call	0x64c	; 0x64c <PID_parametters>
					
					// C�lculo de parámetros del controlador por cancelación polo-cero
					T0=(sqrt(A*A+A)+A)*L/2;
    1dd2:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <A>
    1dd6:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <A+0x1>
    1dda:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <A+0x2>
    1dde:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <A+0x3>
    1de2:	a7 01       	movw	r20, r14
    1de4:	96 01       	movw	r18, r12
    1de6:	c7 01       	movw	r24, r14
    1de8:	b6 01       	movw	r22, r12
    1dea:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    1dee:	9b 01       	movw	r18, r22
    1df0:	ac 01       	movw	r20, r24
    1df2:	c7 01       	movw	r24, r14
    1df4:	b6 01       	movw	r22, r12
    1df6:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    1dfa:	0e 94 86 14 	call	0x290c	; 0x290c <sqrt>
    1dfe:	9b 01       	movw	r18, r22
    1e00:	ac 01       	movw	r20, r24
    1e02:	c7 01       	movw	r24, r14
    1e04:	b6 01       	movw	r22, r12
    1e06:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    1e0a:	c0 90 28 01 	lds	r12, 0x0128	; 0x800128 <L>
    1e0e:	d0 90 29 01 	lds	r13, 0x0129	; 0x800129 <L+0x1>
    1e12:	e0 90 2a 01 	lds	r14, 0x012A	; 0x80012a <L+0x2>
    1e16:	f0 90 2b 01 	lds	r15, 0x012B	; 0x80012b <L+0x3>
    1e1a:	a7 01       	movw	r20, r14
    1e1c:	96 01       	movw	r18, r12
    1e1e:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	5f e3       	ldi	r21, 0x3F	; 63
    1e2a:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    1e2e:	4b 01       	movw	r8, r22
    1e30:	5c 01       	movw	r10, r24
    1e32:	60 93 fe 02 	sts	0x02FE, r22	; 0x8002fe <T0>
    1e36:	70 93 ff 02 	sts	0x02FF, r23	; 0x8002ff <T0+0x1>
    1e3a:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <T0+0x2>
    1e3e:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <T0+0x3>
					Kxs=(2*T)/((L+4*T0)*Kp);
    1e42:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <T>
    1e46:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <T+0x1>
    1e4a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <T+0x2>
    1e4e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <T+0x3>
    1e52:	9b 01       	movw	r18, r22
    1e54:	ac 01       	movw	r20, r24
    1e56:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    1e5a:	2b 01       	movw	r4, r22
    1e5c:	3c 01       	movw	r6, r24
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e8       	ldi	r20, 0x80	; 128
    1e64:	50 e4       	ldi	r21, 0x40	; 64
    1e66:	c5 01       	movw	r24, r10
    1e68:	b4 01       	movw	r22, r8
    1e6a:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    1e6e:	9b 01       	movw	r18, r22
    1e70:	ac 01       	movw	r20, r24
    1e72:	c7 01       	movw	r24, r14
    1e74:	b6 01       	movw	r22, r12
    1e76:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    1e7a:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <Kp>
    1e7e:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <Kp+0x1>
    1e82:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <Kp+0x2>
    1e86:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <Kp+0x3>
    1e8a:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    1e8e:	9b 01       	movw	r18, r22
    1e90:	ac 01       	movw	r20, r24
    1e92:	c3 01       	movw	r24, r6
    1e94:	b2 01       	movw	r22, r4
    1e96:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    1e9a:	60 93 ee 02 	sts	0x02EE, r22	; 0x8002ee <Kxs>
    1e9e:	70 93 ef 02 	sts	0x02EF, r23	; 0x8002ef <Kxs+0x1>
    1ea2:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <Kxs+0x2>
    1ea6:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <Kxs+0x3>
					
					break;
    1eaa:	54 c0       	rjmp	.+168    	; 0x1f54 <main+0x506>
				}
				case PID_IMC:
				{
					// Seleccián de parámetros A (alpha), b y c
					PID_parametters();
    1eac:	0e 94 26 03 	call	0x64c	; 0x64c <PID_parametters>

					// Cálculo de parámetros del controlador IMC
					T0=L*A/(1-A);
    1eb0:	c0 90 28 01 	lds	r12, 0x0128	; 0x800128 <L>
    1eb4:	d0 90 29 01 	lds	r13, 0x0129	; 0x800129 <L+0x1>
    1eb8:	e0 90 2a 01 	lds	r14, 0x012A	; 0x80012a <L+0x2>
    1ebc:	f0 90 2b 01 	lds	r15, 0x012B	; 0x80012b <L+0x3>
    1ec0:	80 90 08 01 	lds	r8, 0x0108	; 0x800108 <A>
    1ec4:	90 90 09 01 	lds	r9, 0x0109	; 0x800109 <A+0x1>
    1ec8:	a0 90 0a 01 	lds	r10, 0x010A	; 0x80010a <A+0x2>
    1ecc:	b0 90 0b 01 	lds	r11, 0x010B	; 0x80010b <A+0x3>
    1ed0:	a5 01       	movw	r20, r10
    1ed2:	94 01       	movw	r18, r8
    1ed4:	c7 01       	movw	r24, r14
    1ed6:	b6 01       	movw	r22, r12
    1ed8:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    1edc:	2b 01       	movw	r4, r22
    1ede:	3c 01       	movw	r6, r24
    1ee0:	a5 01       	movw	r20, r10
    1ee2:	94 01       	movw	r18, r8
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	70 e0       	ldi	r23, 0x00	; 0
    1ee8:	80 e8       	ldi	r24, 0x80	; 128
    1eea:	9f e3       	ldi	r25, 0x3F	; 63
    1eec:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
    1ef0:	9b 01       	movw	r18, r22
    1ef2:	ac 01       	movw	r20, r24
    1ef4:	c3 01       	movw	r24, r6
    1ef6:	b2 01       	movw	r22, r4
    1ef8:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    1efc:	9b 01       	movw	r18, r22
    1efe:	ac 01       	movw	r20, r24
    1f00:	60 93 fe 02 	sts	0x02FE, r22	; 0x8002fe <T0>
    1f04:	70 93 ff 02 	sts	0x02FF, r23	; 0x8002ff <T0+0x1>
    1f08:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <T0+0x2>
    1f0c:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <T0+0x3>
					Kxs=T/(L+T0)/Kp;
    1f10:	c7 01       	movw	r24, r14
    1f12:	b6 01       	movw	r22, r12
    1f14:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    1f18:	9b 01       	movw	r18, r22
    1f1a:	ac 01       	movw	r20, r24
    1f1c:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <T>
    1f20:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <T+0x1>
    1f24:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <T+0x2>
    1f28:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <T+0x3>
    1f2c:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    1f30:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <Kp>
    1f34:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <Kp+0x1>
    1f38:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <Kp+0x2>
    1f3c:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <Kp+0x3>
    1f40:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    1f44:	60 93 ee 02 	sts	0x02EE, r22	; 0x8002ee <Kxs>
    1f48:	70 93 ef 02 	sts	0x02EF, r23	; 0x8002ef <Kxs+0x1>
    1f4c:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <Kxs+0x2>
    1f50:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <Kxs+0x3>
					break;
				}
			}

			// En caso de haber seleccionado "OK", se inicializa el ADC y el TIMER1 (PWM) para generar la acción de control y se calculan los coeficientes
			if(routine){
    1f54:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <routine>
    1f58:	88 23       	and	r24, r24
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <main+0x510>
    1f5c:	8e c2       	rjmp	.+1308   	; 0x247a <main+0xa2c>
				ADC_init(PID);
    1f5e:	8a e0       	ldi	r24, 0x0A	; 10
    1f60:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
				PWM_init();
    1f64:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <PWM_init>
				cursor=0;
    1f68:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <cursor>
				
				// Calculo de parámetros del PID serie
				Tds=L/2;
    1f6c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <L>
    1f70:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <L+0x1>
    1f74:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <L+0x2>
    1f78:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <L+0x3>
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	9a 83       	std	Y+2, r25	; 0x02
    1f80:	ab 83       	std	Y+3, r26	; 0x03
    1f82:	bc 83       	std	Y+4, r27	; 0x04
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	cd 01       	movw	r24, r26
    1f90:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    1f94:	4b 01       	movw	r8, r22
    1f96:	5c 01       	movw	r10, r24
    1f98:	60 93 f6 02 	sts	0x02F6, r22	; 0x8002f6 <Tds>
    1f9c:	70 93 f7 02 	sts	0x02F7, r23	; 0x8002f7 <Tds+0x1>
    1fa0:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <Tds+0x2>
    1fa4:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <Tds+0x3>
				Tis=T;
    1fa8:	c0 90 24 01 	lds	r12, 0x0124	; 0x800124 <T>
    1fac:	d0 90 25 01 	lds	r13, 0x0125	; 0x800125 <T+0x1>
    1fb0:	e0 90 26 01 	lds	r14, 0x0126	; 0x800126 <T+0x2>
    1fb4:	f0 90 27 01 	lds	r15, 0x0127	; 0x800127 <T+0x3>
    1fb8:	c0 92 f2 02 	sts	0x02F2, r12	; 0x8002f2 <Tis>
    1fbc:	d0 92 f3 02 	sts	0x02F3, r13	; 0x8002f3 <Tis+0x1>
    1fc0:	e0 92 f4 02 	sts	0x02F4, r14	; 0x8002f4 <Tis+0x2>
    1fc4:	f0 92 f5 02 	sts	0x02F5, r15	; 0x8002f5 <Tis+0x3>

				// Cálculo de parámetros de PID paralelo
				Tip=Tis+Tds;
    1fc8:	a7 01       	movw	r20, r14
    1fca:	96 01       	movw	r18, r12
    1fcc:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    1fd0:	2b 01       	movw	r4, r22
    1fd2:	3c 01       	movw	r6, r24
    1fd4:	60 93 e6 02 	sts	0x02E6, r22	; 0x8002e6 <Tip>
    1fd8:	70 93 e7 02 	sts	0x02E7, r23	; 0x8002e7 <Tip+0x1>
    1fdc:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <Tip+0x2>
    1fe0:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <Tip+0x3>
				Tdp=Tis*Tds/Tip;
    1fe4:	a7 01       	movw	r20, r14
    1fe6:	96 01       	movw	r18, r12
    1fe8:	c5 01       	movw	r24, r10
    1fea:	b4 01       	movw	r22, r8
    1fec:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    1ff0:	a3 01       	movw	r20, r6
    1ff2:	92 01       	movw	r18, r4
    1ff4:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    1ff8:	6d 83       	std	Y+5, r22	; 0x05
    1ffa:	7e 83       	std	Y+6, r23	; 0x06
    1ffc:	8f 83       	std	Y+7, r24	; 0x07
    1ffe:	98 87       	std	Y+8, r25	; 0x08
    2000:	60 93 ea 02 	sts	0x02EA, r22	; 0x8002ea <Tdp>
    2004:	70 93 eb 02 	sts	0x02EB, r23	; 0x8002eb <Tdp+0x1>
    2008:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <Tdp+0x2>
    200c:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <Tdp+0x3>
				Kxp=Kxs*Tip/Tis;
    2010:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <Kxs>
    2014:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <Kxs+0x1>
    2018:	40 91 f0 02 	lds	r20, 0x02F0	; 0x8002f0 <Kxs+0x2>
    201c:	50 91 f1 02 	lds	r21, 0x02F1	; 0x8002f1 <Kxs+0x3>
    2020:	c3 01       	movw	r24, r6
    2022:	b2 01       	movw	r22, r4
    2024:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    2028:	a7 01       	movw	r20, r14
    202a:	96 01       	movw	r18, r12
    202c:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    2030:	6d 8b       	std	Y+21, r22	; 0x15
    2032:	7e 8b       	std	Y+22, r23	; 0x16
    2034:	8f 8b       	std	Y+23, r24	; 0x17
    2036:	98 8f       	std	Y+24, r25	; 0x18
    2038:	60 93 e2 02 	sts	0x02E2, r22	; 0x8002e2 <Kxp>
    203c:	70 93 e3 02 	sts	0x02E3, r23	; 0x8002e3 <Kxp+0x1>
    2040:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <Kxp+0x2>
    2044:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <Kxp+0x3>
				Tf=L*A/2;
    2048:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <A>
    204c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <A+0x1>
    2050:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <A+0x2>
    2054:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <A+0x3>
    2058:	69 81       	ldd	r22, Y+1	; 0x01
    205a:	7a 81       	ldd	r23, Y+2	; 0x02
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	5f e3       	ldi	r21, 0x3F	; 63
    206c:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    2070:	60 93 fa 02 	sts	0x02FA, r22	; 0x8002fa <Tf>
    2074:	70 93 fb 02 	sts	0x02FB, r23	; 0x8002fb <Tf+0x1>
    2078:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <Tf+0x2>
    207c:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <Tf+0x3>

				// Coeficientes del filtro PID
				a_pid[0]=T_samp+2*Tf;
    2080:	9b 01       	movw	r18, r22
    2082:	ac 01       	movw	r20, r24
    2084:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    2088:	6b 01       	movw	r12, r22
    208a:	7c 01       	movw	r14, r24
    208c:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <T_samp>
    2090:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <T_samp+0x1>
    2094:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <T_samp+0x2>
    2098:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <T_samp+0x3>
    209c:	a5 01       	movw	r20, r10
    209e:	94 01       	movw	r18, r8
    20a0:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    20a4:	69 8f       	std	Y+25, r22	; 0x19
    20a6:	7a 8f       	std	Y+26, r23	; 0x1a
    20a8:	8b 8f       	std	Y+27, r24	; 0x1b
    20aa:	9c 8f       	std	Y+28, r25	; 0x1c
    20ac:	0f 2e       	mov	r0, r31
    20ae:	fe ea       	ldi	r31, 0xAE	; 174
    20b0:	2f 2e       	mov	r2, r31
    20b2:	f2 e0       	ldi	r31, 0x02	; 2
    20b4:	3f 2e       	mov	r3, r31
    20b6:	f0 2d       	mov	r31, r0
    20b8:	d1 01       	movw	r26, r2
    20ba:	6d 93       	st	X+, r22
    20bc:	7d 93       	st	X+, r23
    20be:	8d 93       	st	X+, r24
    20c0:	9c 93       	st	X, r25
    20c2:	13 97       	sbiw	r26, 0x03	; 3
				a_pid[1]=T_samp-2*Tf;
    20c4:	a7 01       	movw	r20, r14
    20c6:	96 01       	movw	r18, r12
    20c8:	c5 01       	movw	r24, r10
    20ca:	b4 01       	movw	r22, r8
    20cc:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
    20d0:	6d 8f       	std	Y+29, r22	; 0x1d
    20d2:	7e 8f       	std	Y+30, r23	; 0x1e
    20d4:	8f 8f       	std	Y+31, r24	; 0x1f
    20d6:	98 a3       	std	Y+32, r25	; 0x20

				b_pid[0]=T_samp;
				b_pid[1]=T_samp;
    20d8:	80 92 aa 02 	sts	0x02AA, r8	; 0x8002aa <b_pid+0x4>
    20dc:	90 92 ab 02 	sts	0x02AB, r9	; 0x8002ab <b_pid+0x5>
    20e0:	a0 92 ac 02 	sts	0x02AC, r10	; 0x8002ac <b_pid+0x6>
    20e4:	b0 92 ad 02 	sts	0x02AD, r11	; 0x8002ad <b_pid+0x7>

				// Coeficientes del filtro a la referencia
				b_ref[0]=T_samp*T_samp+b*Tip*2*T_samp+c*Tip*Tdp*4;
    20e8:	a5 01       	movw	r20, r10
    20ea:	94 01       	movw	r18, r8
    20ec:	c5 01       	movw	r24, r10
    20ee:	b4 01       	movw	r22, r8
    20f0:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    20f4:	69 83       	std	Y+1, r22	; 0x01
    20f6:	7a 83       	std	Y+2, r23	; 0x02
    20f8:	8b 83       	std	Y+3, r24	; 0x03
    20fa:	9c 83       	std	Y+4, r25	; 0x04
    20fc:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <b>
    2100:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <b+0x1>
    2104:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <b+0x2>
    2108:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <b+0x3>
    210c:	c3 01       	movw	r24, r6
    210e:	b2 01       	movw	r22, r4
    2110:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    2114:	9b 01       	movw	r18, r22
    2116:	ac 01       	movw	r20, r24
    2118:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    211c:	9b 01       	movw	r18, r22
    211e:	ac 01       	movw	r20, r24
    2120:	c5 01       	movw	r24, r10
    2122:	b4 01       	movw	r22, r8
    2124:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    2128:	6d 87       	std	Y+13, r22	; 0x0d
    212a:	7e 87       	std	Y+14, r23	; 0x0e
    212c:	8f 87       	std	Y+15, r24	; 0x0f
    212e:	98 8b       	std	Y+16, r25	; 0x10
    2130:	9b 01       	movw	r18, r22
    2132:	ac 01       	movw	r20, r24
    2134:	69 81       	ldd	r22, Y+1	; 0x01
    2136:	7a 81       	ldd	r23, Y+2	; 0x02
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	9c 81       	ldd	r25, Y+4	; 0x04
    213c:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    2140:	69 87       	std	Y+9, r22	; 0x09
    2142:	7a 87       	std	Y+10, r23	; 0x0a
    2144:	8b 87       	std	Y+11, r24	; 0x0b
    2146:	9c 87       	std	Y+12, r25	; 0x0c
    2148:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    214c:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2150:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    2154:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    2158:	a7 01       	movw	r20, r14
    215a:	96 01       	movw	r18, r12
    215c:	c3 01       	movw	r24, r6
    215e:	b2 01       	movw	r22, r4
    2160:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    2164:	9b 01       	movw	r18, r22
    2166:	ac 01       	movw	r20, r24
    2168:	6d 81       	ldd	r22, Y+5	; 0x05
    216a:	7e 81       	ldd	r23, Y+6	; 0x06
    216c:	8f 81       	ldd	r24, Y+7	; 0x07
    216e:	98 85       	ldd	r25, Y+8	; 0x08
    2170:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e8       	ldi	r20, 0x80	; 128
    217a:	50 e4       	ldi	r21, 0x40	; 64
    217c:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    2180:	69 8b       	std	Y+17, r22	; 0x11
    2182:	7a 8b       	std	Y+18, r23	; 0x12
    2184:	8b 8b       	std	Y+19, r24	; 0x13
    2186:	9c 8b       	std	Y+20, r25	; 0x14
    2188:	9b 01       	movw	r18, r22
    218a:	ac 01       	movw	r20, r24
    218c:	69 85       	ldd	r22, Y+9	; 0x09
    218e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2190:	8b 85       	ldd	r24, Y+11	; 0x0b
    2192:	9c 85       	ldd	r25, Y+12	; 0x0c
    2194:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    2198:	69 a3       	std	Y+33, r22	; 0x21
    219a:	7a a3       	std	Y+34, r23	; 0x22
    219c:	8b a3       	std	Y+35, r24	; 0x23
    219e:	9c a3       	std	Y+36, r25	; 0x24
				b_ref[1]=2*T_samp*T_samp-8*c*Tip*Tdp;
    21a0:	a5 01       	movw	r20, r10
    21a2:	94 01       	movw	r18, r8
    21a4:	c5 01       	movw	r24, r10
    21a6:	b4 01       	movw	r22, r8
    21a8:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    21ac:	9b 01       	movw	r18, r22
    21ae:	ac 01       	movw	r20, r24
    21b0:	c5 01       	movw	r24, r10
    21b2:	b4 01       	movw	r22, r8
    21b4:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    21b8:	69 87       	std	Y+9, r22	; 0x09
    21ba:	7a 87       	std	Y+10, r23	; 0x0a
    21bc:	8b 87       	std	Y+11, r24	; 0x0b
    21be:	9c 87       	std	Y+12, r25	; 0x0c
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	51 e4       	ldi	r21, 0x41	; 65
    21c8:	c7 01       	movw	r24, r14
    21ca:	b6 01       	movw	r22, r12
    21cc:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    21d0:	9b 01       	movw	r18, r22
    21d2:	ac 01       	movw	r20, r24
    21d4:	c3 01       	movw	r24, r6
    21d6:	b2 01       	movw	r22, r4
    21d8:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    21dc:	9b 01       	movw	r18, r22
    21de:	ac 01       	movw	r20, r24
    21e0:	6d 81       	ldd	r22, Y+5	; 0x05
    21e2:	7e 81       	ldd	r23, Y+6	; 0x06
    21e4:	8f 81       	ldd	r24, Y+7	; 0x07
    21e6:	98 85       	ldd	r25, Y+8	; 0x08
    21e8:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    21ec:	9b 01       	movw	r18, r22
    21ee:	ac 01       	movw	r20, r24
    21f0:	69 85       	ldd	r22, Y+9	; 0x09
    21f2:	7a 85       	ldd	r23, Y+10	; 0x0a
    21f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    21f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    21f8:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
    21fc:	6d a3       	std	Y+37, r22	; 0x25
    21fe:	7e a3       	std	Y+38, r23	; 0x26
    2200:	8f a3       	std	Y+39, r24	; 0x27
    2202:	98 a7       	std	Y+40, r25	; 0x28
				b_ref[2]=T_samp*T_samp-b*Tip*2*T_samp+c*Tip*Tdp*4;
    2204:	2d 85       	ldd	r18, Y+13	; 0x0d
    2206:	3e 85       	ldd	r19, Y+14	; 0x0e
    2208:	4f 85       	ldd	r20, Y+15	; 0x0f
    220a:	58 89       	ldd	r21, Y+16	; 0x10
    220c:	69 81       	ldd	r22, Y+1	; 0x01
    220e:	7a 81       	ldd	r23, Y+2	; 0x02
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
    2218:	9b 01       	movw	r18, r22
    221a:	ac 01       	movw	r20, r24
    221c:	69 89       	ldd	r22, Y+17	; 0x11
    221e:	7a 89       	ldd	r23, Y+18	; 0x12
    2220:	8b 89       	ldd	r24, Y+19	; 0x13
    2222:	9c 89       	ldd	r25, Y+20	; 0x14
    2224:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    2228:	69 a7       	std	Y+41, r22	; 0x29
    222a:	7a a7       	std	Y+42, r23	; 0x2a
    222c:	8b a7       	std	Y+43, r24	; 0x2b
    222e:	9c a7       	std	Y+44, r25	; 0x2c
							
				a_ref[0]=T_samp*T_samp+Tip*2*T_samp+Tip*Tdp*4;
    2230:	a3 01       	movw	r20, r6
    2232:	92 01       	movw	r18, r4
    2234:	c3 01       	movw	r24, r6
    2236:	b2 01       	movw	r22, r4
    2238:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    223c:	9b 01       	movw	r18, r22
    223e:	ac 01       	movw	r20, r24
    2240:	c5 01       	movw	r24, r10
    2242:	b4 01       	movw	r22, r8
    2244:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    2248:	6d 87       	std	Y+13, r22	; 0x0d
    224a:	7e 87       	std	Y+14, r23	; 0x0e
    224c:	8f 87       	std	Y+15, r24	; 0x0f
    224e:	98 8b       	std	Y+16, r25	; 0x10
    2250:	9b 01       	movw	r18, r22
    2252:	ac 01       	movw	r20, r24
    2254:	69 81       	ldd	r22, Y+1	; 0x01
    2256:	7a 81       	ldd	r23, Y+2	; 0x02
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	9c 81       	ldd	r25, Y+4	; 0x04
    225c:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    2260:	6b 01       	movw	r12, r22
    2262:	7c 01       	movw	r14, r24
    2264:	2d 81       	ldd	r18, Y+5	; 0x05
    2266:	3e 81       	ldd	r19, Y+6	; 0x06
    2268:	4f 81       	ldd	r20, Y+7	; 0x07
    226a:	58 85       	ldd	r21, Y+8	; 0x08
    226c:	c3 01       	movw	r24, r6
    226e:	b2 01       	movw	r22, r4
    2270:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e8       	ldi	r20, 0x80	; 128
    227a:	50 e4       	ldi	r21, 0x40	; 64
    227c:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    2280:	69 8b       	std	Y+17, r22	; 0x11
    2282:	7a 8b       	std	Y+18, r23	; 0x12
    2284:	8b 8b       	std	Y+19, r24	; 0x13
    2286:	9c 8b       	std	Y+20, r25	; 0x14
    2288:	9b 01       	movw	r18, r22
    228a:	ac 01       	movw	r20, r24
    228c:	c7 01       	movw	r24, r14
    228e:	b6 01       	movw	r22, r12
    2290:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    2294:	6b 01       	movw	r12, r22
    2296:	7c 01       	movw	r14, r24
    2298:	02 e8       	ldi	r16, 0x82	; 130
    229a:	12 e0       	ldi	r17, 0x02	; 2
    229c:	f8 01       	movw	r30, r16
    229e:	60 83       	st	Z, r22
    22a0:	71 83       	std	Z+1, r23	; 0x01
    22a2:	82 83       	std	Z+2, r24	; 0x02
    22a4:	93 83       	std	Z+3, r25	; 0x03
				a_ref[1]=2*T_samp*T_samp-8*Tip*Tdp;
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e0       	ldi	r20, 0x00	; 0
    22ac:	51 e4       	ldi	r21, 0x41	; 65
    22ae:	c3 01       	movw	r24, r6
    22b0:	b2 01       	movw	r22, r4
    22b2:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    22b6:	9b 01       	movw	r18, r22
    22b8:	ac 01       	movw	r20, r24
    22ba:	6d 81       	ldd	r22, Y+5	; 0x05
    22bc:	7e 81       	ldd	r23, Y+6	; 0x06
    22be:	8f 81       	ldd	r24, Y+7	; 0x07
    22c0:	98 85       	ldd	r25, Y+8	; 0x08
    22c2:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    22c6:	9b 01       	movw	r18, r22
    22c8:	ac 01       	movw	r20, r24
    22ca:	69 85       	ldd	r22, Y+9	; 0x09
    22cc:	7a 85       	ldd	r23, Y+10	; 0x0a
    22ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    22d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    22d2:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
    22d6:	69 87       	std	Y+9, r22	; 0x09
    22d8:	7a 87       	std	Y+10, r23	; 0x0a
    22da:	8b 87       	std	Y+11, r24	; 0x0b
    22dc:	9c 87       	std	Y+12, r25	; 0x0c
				a_ref[2]=T_samp*T_samp-Tip*2*T_samp+Tip*Tdp*4;
    22de:	2d 85       	ldd	r18, Y+13	; 0x0d
    22e0:	3e 85       	ldd	r19, Y+14	; 0x0e
    22e2:	4f 85       	ldd	r20, Y+15	; 0x0f
    22e4:	58 89       	ldd	r21, Y+16	; 0x10
    22e6:	69 81       	ldd	r22, Y+1	; 0x01
    22e8:	7a 81       	ldd	r23, Y+2	; 0x02
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	9c 81       	ldd	r25, Y+4	; 0x04
    22ee:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
    22f2:	9b 01       	movw	r18, r22
    22f4:	ac 01       	movw	r20, r24
    22f6:	69 89       	ldd	r22, Y+17	; 0x11
    22f8:	7a 89       	ldd	r23, Y+18	; 0x12
    22fa:	8b 89       	ldd	r24, Y+19	; 0x13
    22fc:	9c 89       	ldd	r25, Y+20	; 0x14
    22fe:	0e 94 43 12 	call	0x2486	; 0x2486 <__addsf3>
    2302:	69 83       	std	Y+1, r22	; 0x01
    2304:	7a 83       	std	Y+2, r23	; 0x02
    2306:	8b 83       	std	Y+3, r24	; 0x03
    2308:	9c 83       	std	Y+4, r25	; 0x04

				// Disminuyo la cantidad de operaciones en punto flotante al redefinir los coeficientes
				b_ref[0]=b_ref[0]/a_ref[0];
    230a:	a7 01       	movw	r20, r14
    230c:	96 01       	movw	r18, r12
    230e:	69 a1       	ldd	r22, Y+33	; 0x21
    2310:	7a a1       	ldd	r23, Y+34	; 0x22
    2312:	8b a1       	ldd	r24, Y+35	; 0x23
    2314:	9c a1       	ldd	r25, Y+36	; 0x24
    2316:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    231a:	ae e8       	ldi	r26, 0x8E	; 142
    231c:	b2 e0       	ldi	r27, 0x02	; 2
    231e:	6d 93       	st	X+, r22
    2320:	7d 93       	st	X+, r23
    2322:	8d 93       	st	X+, r24
    2324:	9c 93       	st	X, r25
    2326:	13 97       	sbiw	r26, 0x03	; 3
				b_ref[1]=b_ref[1]/a_ref[0];
    2328:	a7 01       	movw	r20, r14
    232a:	96 01       	movw	r18, r12
    232c:	6d a1       	ldd	r22, Y+37	; 0x25
    232e:	7e a1       	ldd	r23, Y+38	; 0x26
    2330:	8f a1       	ldd	r24, Y+39	; 0x27
    2332:	98 a5       	ldd	r25, Y+40	; 0x28
    2334:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    2338:	60 93 92 02 	sts	0x0292, r22	; 0x800292 <b_ref+0x4>
    233c:	70 93 93 02 	sts	0x0293, r23	; 0x800293 <b_ref+0x5>
    2340:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <b_ref+0x6>
    2344:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <b_ref+0x7>
				b_ref[2]=b_ref[2]/a_ref[0];
    2348:	a7 01       	movw	r20, r14
    234a:	96 01       	movw	r18, r12
    234c:	69 a5       	ldd	r22, Y+41	; 0x29
    234e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2350:	8b a5       	ldd	r24, Y+43	; 0x2b
    2352:	9c a5       	ldd	r25, Y+44	; 0x2c
    2354:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    2358:	60 93 96 02 	sts	0x0296, r22	; 0x800296 <b_ref+0x8>
    235c:	70 93 97 02 	sts	0x0297, r23	; 0x800297 <b_ref+0x9>
    2360:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <b_ref+0xa>
    2364:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <b_ref+0xb>
				a_ref[1]=a_ref[1]/a_ref[0];
    2368:	a7 01       	movw	r20, r14
    236a:	96 01       	movw	r18, r12
    236c:	69 85       	ldd	r22, Y+9	; 0x09
    236e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2370:	8b 85       	ldd	r24, Y+11	; 0x0b
    2372:	9c 85       	ldd	r25, Y+12	; 0x0c
    2374:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    2378:	f8 01       	movw	r30, r16
    237a:	64 83       	std	Z+4, r22	; 0x04
    237c:	75 83       	std	Z+5, r23	; 0x05
    237e:	86 83       	std	Z+6, r24	; 0x06
    2380:	97 83       	std	Z+7, r25	; 0x07
				a_ref[2]=a_ref[2]/a_ref[0];
    2382:	a7 01       	movw	r20, r14
    2384:	96 01       	movw	r18, r12
    2386:	69 81       	ldd	r22, Y+1	; 0x01
    2388:	7a 81       	ldd	r23, Y+2	; 0x02
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	9c 81       	ldd	r25, Y+4	; 0x04
    238e:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    2392:	d8 01       	movw	r26, r16
    2394:	18 96       	adiw	r26, 0x08	; 8
    2396:	6d 93       	st	X+, r22
    2398:	7d 93       	st	X+, r23
    239a:	8d 93       	st	X+, r24
    239c:	9c 93       	st	X, r25
    239e:	1b 97       	sbiw	r26, 0x0b	; 11

				b_pid[0]=b_pid[0]/a_pid[0];
    23a0:	29 8d       	ldd	r18, Y+25	; 0x19
    23a2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    23a4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    23a6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    23a8:	c5 01       	movw	r24, r10
    23aa:	b4 01       	movw	r22, r8
    23ac:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    23b0:	e6 ea       	ldi	r30, 0xA6	; 166
    23b2:	f2 e0       	ldi	r31, 0x02	; 2
    23b4:	60 83       	st	Z, r22
    23b6:	71 83       	std	Z+1, r23	; 0x01
    23b8:	82 83       	std	Z+2, r24	; 0x02
    23ba:	93 83       	std	Z+3, r25	; 0x03
				a_pid[1]=a_pid[1]/a_pid[0];
    23bc:	29 8d       	ldd	r18, Y+25	; 0x19
    23be:	3a 8d       	ldd	r19, Y+26	; 0x1a
    23c0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    23c2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    23c4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    23c6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    23c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23ca:	98 a1       	ldd	r25, Y+32	; 0x20
    23cc:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    23d0:	d1 01       	movw	r26, r2
    23d2:	14 96       	adiw	r26, 0x04	; 4
    23d4:	6d 93       	st	X+, r22
    23d6:	7d 93       	st	X+, r23
    23d8:	8d 93       	st	X+, r24
    23da:	9c 93       	st	X, r25
    23dc:	17 97       	sbiw	r26, 0x07	; 7

				KI=(Kxp*T_samp)/Tip;
    23de:	a5 01       	movw	r20, r10
    23e0:	94 01       	movw	r18, r8
    23e2:	6d 89       	ldd	r22, Y+21	; 0x15
    23e4:	7e 89       	ldd	r23, Y+22	; 0x16
    23e6:	8f 89       	ldd	r24, Y+23	; 0x17
    23e8:	98 8d       	ldd	r25, Y+24	; 0x18
    23ea:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    23ee:	a3 01       	movw	r20, r6
    23f0:	92 01       	movw	r18, r4
    23f2:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    23f6:	60 93 ca 02 	sts	0x02CA, r22	; 0x8002ca <KI>
    23fa:	70 93 cb 02 	sts	0x02CB, r23	; 0x8002cb <KI+0x1>
    23fe:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <KI+0x2>
    2402:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <KI+0x3>
				KD=(Tdp*Kxp)/T_samp;
    2406:	2d 89       	ldd	r18, Y+21	; 0x15
    2408:	3e 89       	ldd	r19, Y+22	; 0x16
    240a:	4f 89       	ldd	r20, Y+23	; 0x17
    240c:	58 8d       	ldd	r21, Y+24	; 0x18
    240e:	6d 81       	ldd	r22, Y+5	; 0x05
    2410:	7e 81       	ldd	r23, Y+6	; 0x06
    2412:	8f 81       	ldd	r24, Y+7	; 0x07
    2414:	98 85       	ldd	r25, Y+8	; 0x08
    2416:	0e 94 13 14 	call	0x2826	; 0x2826 <__mulsf3>
    241a:	a5 01       	movw	r20, r10
    241c:	94 01       	movw	r18, r8
    241e:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divsf3>
    2422:	60 93 c6 02 	sts	0x02C6, r22	; 0x8002c6 <KD>
    2426:	70 93 c7 02 	sts	0x02C7, r23	; 0x8002c7 <KD+0x1>
    242a:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <KD+0x2>
    242e:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <KD+0x3>

				// Inicialización de valores en display
				LCD_clear();
    2432:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_clear>
				LCD_write_string_xy("Vout=     A=    ",1,0);
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	61 e0       	ldi	r22, 0x01	; 1
    243a:	81 e8       	ldi	r24, 0x81	; 129
    243c:	91 e0       	ldi	r25, 0x01	; 1
    243e:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
				LCD_write_string_xy("Vref=    ",2,0);
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	62 e0       	ldi	r22, 0x02	; 2
    2446:	87 e7       	ldi	r24, 0x77	; 119
    2448:	92 e0       	ldi	r25, 0x02	; 2
    244a:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_write_string_xy>
				update_value('R',curRef,0);
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <curRef>
    2454:	82 e5       	ldi	r24, 0x52	; 82
    2456:	0e 94 f6 05 	call	0xbec	; 0xbec <update_value>
				update_value('O',0,0);
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	60 e0       	ldi	r22, 0x00	; 0
    245e:	8f e4       	ldi	r24, 0x4F	; 79
    2460:	0e 94 f6 05 	call	0xbec	; 0xbec <update_value>
				update_value('A',curA,0);
    2464:	40 e0       	ldi	r20, 0x00	; 0
    2466:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <curA>
    246a:	81 e4       	ldi	r24, 0x41	; 65
    246c:	0e 94 f6 05 	call	0xbec	; 0xbec <update_value>
    2470:	04 c0       	rjmp	.+8      	; 0x247a <main+0xa2c>
			}
		}
		else{asm("NOP");}
    2472:	00 00       	nop
    2474:	02 c0       	rjmp	.+4      	; 0x247a <main+0xa2c>
		// Bucle de accion
		while (routine){
			dispatch();
    2476:	0e 94 ab 08 	call	0x1156	; 0x1156 <dispatch>
				update_value('A',curA,0);
			}
		}
		else{asm("NOP");}
		// Bucle de accion
		while (routine){
    247a:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <routine>
    247e:	81 11       	cpse	r24, r1
    2480:	fa cf       	rjmp	.-12     	; 0x2476 <main+0xa28>
    2482:	24 cb       	rjmp	.-2488   	; 0x1acc <main+0x7e>

00002484 <__subsf3>:
    2484:	50 58       	subi	r21, 0x80	; 128

00002486 <__addsf3>:
    2486:	bb 27       	eor	r27, r27
    2488:	aa 27       	eor	r26, r26
    248a:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__addsf3x>
    248e:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <__fp_round>
    2492:	0e 94 c6 13 	call	0x278c	; 0x278c <__fp_pscA>
    2496:	38 f0       	brcs	.+14     	; 0x24a6 <__addsf3+0x20>
    2498:	0e 94 cd 13 	call	0x279a	; 0x279a <__fp_pscB>
    249c:	20 f0       	brcs	.+8      	; 0x24a6 <__addsf3+0x20>
    249e:	39 f4       	brne	.+14     	; 0x24ae <__addsf3+0x28>
    24a0:	9f 3f       	cpi	r25, 0xFF	; 255
    24a2:	19 f4       	brne	.+6      	; 0x24aa <__addsf3+0x24>
    24a4:	26 f4       	brtc	.+8      	; 0x24ae <__addsf3+0x28>
    24a6:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__fp_nan>
    24aa:	0e f4       	brtc	.+2      	; 0x24ae <__addsf3+0x28>
    24ac:	e0 95       	com	r30
    24ae:	e7 fb       	bst	r30, 7
    24b0:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__fp_inf>

000024b4 <__addsf3x>:
    24b4:	e9 2f       	mov	r30, r25
    24b6:	0e 94 e5 13 	call	0x27ca	; 0x27ca <__fp_split3>
    24ba:	58 f3       	brcs	.-42     	; 0x2492 <__addsf3+0xc>
    24bc:	ba 17       	cp	r27, r26
    24be:	62 07       	cpc	r22, r18
    24c0:	73 07       	cpc	r23, r19
    24c2:	84 07       	cpc	r24, r20
    24c4:	95 07       	cpc	r25, r21
    24c6:	20 f0       	brcs	.+8      	; 0x24d0 <__addsf3x+0x1c>
    24c8:	79 f4       	brne	.+30     	; 0x24e8 <__addsf3x+0x34>
    24ca:	a6 f5       	brtc	.+104    	; 0x2534 <__addsf3x+0x80>
    24cc:	0c 94 07 14 	jmp	0x280e	; 0x280e <__fp_zero>
    24d0:	0e f4       	brtc	.+2      	; 0x24d4 <__addsf3x+0x20>
    24d2:	e0 95       	com	r30
    24d4:	0b 2e       	mov	r0, r27
    24d6:	ba 2f       	mov	r27, r26
    24d8:	a0 2d       	mov	r26, r0
    24da:	0b 01       	movw	r0, r22
    24dc:	b9 01       	movw	r22, r18
    24de:	90 01       	movw	r18, r0
    24e0:	0c 01       	movw	r0, r24
    24e2:	ca 01       	movw	r24, r20
    24e4:	a0 01       	movw	r20, r0
    24e6:	11 24       	eor	r1, r1
    24e8:	ff 27       	eor	r31, r31
    24ea:	59 1b       	sub	r21, r25
    24ec:	99 f0       	breq	.+38     	; 0x2514 <__addsf3x+0x60>
    24ee:	59 3f       	cpi	r21, 0xF9	; 249
    24f0:	50 f4       	brcc	.+20     	; 0x2506 <__addsf3x+0x52>
    24f2:	50 3e       	cpi	r21, 0xE0	; 224
    24f4:	68 f1       	brcs	.+90     	; 0x2550 <__addsf3x+0x9c>
    24f6:	1a 16       	cp	r1, r26
    24f8:	f0 40       	sbci	r31, 0x00	; 0
    24fa:	a2 2f       	mov	r26, r18
    24fc:	23 2f       	mov	r18, r19
    24fe:	34 2f       	mov	r19, r20
    2500:	44 27       	eor	r20, r20
    2502:	58 5f       	subi	r21, 0xF8	; 248
    2504:	f3 cf       	rjmp	.-26     	; 0x24ec <__addsf3x+0x38>
    2506:	46 95       	lsr	r20
    2508:	37 95       	ror	r19
    250a:	27 95       	ror	r18
    250c:	a7 95       	ror	r26
    250e:	f0 40       	sbci	r31, 0x00	; 0
    2510:	53 95       	inc	r21
    2512:	c9 f7       	brne	.-14     	; 0x2506 <__addsf3x+0x52>
    2514:	7e f4       	brtc	.+30     	; 0x2534 <__addsf3x+0x80>
    2516:	1f 16       	cp	r1, r31
    2518:	ba 0b       	sbc	r27, r26
    251a:	62 0b       	sbc	r22, r18
    251c:	73 0b       	sbc	r23, r19
    251e:	84 0b       	sbc	r24, r20
    2520:	ba f0       	brmi	.+46     	; 0x2550 <__addsf3x+0x9c>
    2522:	91 50       	subi	r25, 0x01	; 1
    2524:	a1 f0       	breq	.+40     	; 0x254e <__addsf3x+0x9a>
    2526:	ff 0f       	add	r31, r31
    2528:	bb 1f       	adc	r27, r27
    252a:	66 1f       	adc	r22, r22
    252c:	77 1f       	adc	r23, r23
    252e:	88 1f       	adc	r24, r24
    2530:	c2 f7       	brpl	.-16     	; 0x2522 <__addsf3x+0x6e>
    2532:	0e c0       	rjmp	.+28     	; 0x2550 <__addsf3x+0x9c>
    2534:	ba 0f       	add	r27, r26
    2536:	62 1f       	adc	r22, r18
    2538:	73 1f       	adc	r23, r19
    253a:	84 1f       	adc	r24, r20
    253c:	48 f4       	brcc	.+18     	; 0x2550 <__addsf3x+0x9c>
    253e:	87 95       	ror	r24
    2540:	77 95       	ror	r23
    2542:	67 95       	ror	r22
    2544:	b7 95       	ror	r27
    2546:	f7 95       	ror	r31
    2548:	9e 3f       	cpi	r25, 0xFE	; 254
    254a:	08 f0       	brcs	.+2      	; 0x254e <__addsf3x+0x9a>
    254c:	b0 cf       	rjmp	.-160    	; 0x24ae <__addsf3+0x28>
    254e:	93 95       	inc	r25
    2550:	88 0f       	add	r24, r24
    2552:	08 f0       	brcs	.+2      	; 0x2556 <__addsf3x+0xa2>
    2554:	99 27       	eor	r25, r25
    2556:	ee 0f       	add	r30, r30
    2558:	97 95       	ror	r25
    255a:	87 95       	ror	r24
    255c:	08 95       	ret

0000255e <__cmpsf2>:
    255e:	0e 94 99 13 	call	0x2732	; 0x2732 <__fp_cmp>
    2562:	08 f4       	brcc	.+2      	; 0x2566 <__cmpsf2+0x8>
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	08 95       	ret

00002568 <__divsf3>:
    2568:	0e 94 c8 12 	call	0x2590	; 0x2590 <__divsf3x>
    256c:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <__fp_round>
    2570:	0e 94 cd 13 	call	0x279a	; 0x279a <__fp_pscB>
    2574:	58 f0       	brcs	.+22     	; 0x258c <__divsf3+0x24>
    2576:	0e 94 c6 13 	call	0x278c	; 0x278c <__fp_pscA>
    257a:	40 f0       	brcs	.+16     	; 0x258c <__divsf3+0x24>
    257c:	29 f4       	brne	.+10     	; 0x2588 <__divsf3+0x20>
    257e:	5f 3f       	cpi	r21, 0xFF	; 255
    2580:	29 f0       	breq	.+10     	; 0x258c <__divsf3+0x24>
    2582:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__fp_inf>
    2586:	51 11       	cpse	r21, r1
    2588:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__fp_szero>
    258c:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__fp_nan>

00002590 <__divsf3x>:
    2590:	0e 94 e5 13 	call	0x27ca	; 0x27ca <__fp_split3>
    2594:	68 f3       	brcs	.-38     	; 0x2570 <__divsf3+0x8>

00002596 <__divsf3_pse>:
    2596:	99 23       	and	r25, r25
    2598:	b1 f3       	breq	.-20     	; 0x2586 <__divsf3+0x1e>
    259a:	55 23       	and	r21, r21
    259c:	91 f3       	breq	.-28     	; 0x2582 <__divsf3+0x1a>
    259e:	95 1b       	sub	r25, r21
    25a0:	55 0b       	sbc	r21, r21
    25a2:	bb 27       	eor	r27, r27
    25a4:	aa 27       	eor	r26, r26
    25a6:	62 17       	cp	r22, r18
    25a8:	73 07       	cpc	r23, r19
    25aa:	84 07       	cpc	r24, r20
    25ac:	38 f0       	brcs	.+14     	; 0x25bc <__divsf3_pse+0x26>
    25ae:	9f 5f       	subi	r25, 0xFF	; 255
    25b0:	5f 4f       	sbci	r21, 0xFF	; 255
    25b2:	22 0f       	add	r18, r18
    25b4:	33 1f       	adc	r19, r19
    25b6:	44 1f       	adc	r20, r20
    25b8:	aa 1f       	adc	r26, r26
    25ba:	a9 f3       	breq	.-22     	; 0x25a6 <__divsf3_pse+0x10>
    25bc:	35 d0       	rcall	.+106    	; 0x2628 <__divsf3_pse+0x92>
    25be:	0e 2e       	mov	r0, r30
    25c0:	3a f0       	brmi	.+14     	; 0x25d0 <__divsf3_pse+0x3a>
    25c2:	e0 e8       	ldi	r30, 0x80	; 128
    25c4:	32 d0       	rcall	.+100    	; 0x262a <__divsf3_pse+0x94>
    25c6:	91 50       	subi	r25, 0x01	; 1
    25c8:	50 40       	sbci	r21, 0x00	; 0
    25ca:	e6 95       	lsr	r30
    25cc:	00 1c       	adc	r0, r0
    25ce:	ca f7       	brpl	.-14     	; 0x25c2 <__divsf3_pse+0x2c>
    25d0:	2b d0       	rcall	.+86     	; 0x2628 <__divsf3_pse+0x92>
    25d2:	fe 2f       	mov	r31, r30
    25d4:	29 d0       	rcall	.+82     	; 0x2628 <__divsf3_pse+0x92>
    25d6:	66 0f       	add	r22, r22
    25d8:	77 1f       	adc	r23, r23
    25da:	88 1f       	adc	r24, r24
    25dc:	bb 1f       	adc	r27, r27
    25de:	26 17       	cp	r18, r22
    25e0:	37 07       	cpc	r19, r23
    25e2:	48 07       	cpc	r20, r24
    25e4:	ab 07       	cpc	r26, r27
    25e6:	b0 e8       	ldi	r27, 0x80	; 128
    25e8:	09 f0       	breq	.+2      	; 0x25ec <__divsf3_pse+0x56>
    25ea:	bb 0b       	sbc	r27, r27
    25ec:	80 2d       	mov	r24, r0
    25ee:	bf 01       	movw	r22, r30
    25f0:	ff 27       	eor	r31, r31
    25f2:	93 58       	subi	r25, 0x83	; 131
    25f4:	5f 4f       	sbci	r21, 0xFF	; 255
    25f6:	3a f0       	brmi	.+14     	; 0x2606 <__divsf3_pse+0x70>
    25f8:	9e 3f       	cpi	r25, 0xFE	; 254
    25fa:	51 05       	cpc	r21, r1
    25fc:	78 f0       	brcs	.+30     	; 0x261c <__divsf3_pse+0x86>
    25fe:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__fp_inf>
    2602:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__fp_szero>
    2606:	5f 3f       	cpi	r21, 0xFF	; 255
    2608:	e4 f3       	brlt	.-8      	; 0x2602 <__divsf3_pse+0x6c>
    260a:	98 3e       	cpi	r25, 0xE8	; 232
    260c:	d4 f3       	brlt	.-12     	; 0x2602 <__divsf3_pse+0x6c>
    260e:	86 95       	lsr	r24
    2610:	77 95       	ror	r23
    2612:	67 95       	ror	r22
    2614:	b7 95       	ror	r27
    2616:	f7 95       	ror	r31
    2618:	9f 5f       	subi	r25, 0xFF	; 255
    261a:	c9 f7       	brne	.-14     	; 0x260e <__divsf3_pse+0x78>
    261c:	88 0f       	add	r24, r24
    261e:	91 1d       	adc	r25, r1
    2620:	96 95       	lsr	r25
    2622:	87 95       	ror	r24
    2624:	97 f9       	bld	r25, 7
    2626:	08 95       	ret
    2628:	e1 e0       	ldi	r30, 0x01	; 1
    262a:	66 0f       	add	r22, r22
    262c:	77 1f       	adc	r23, r23
    262e:	88 1f       	adc	r24, r24
    2630:	bb 1f       	adc	r27, r27
    2632:	62 17       	cp	r22, r18
    2634:	73 07       	cpc	r23, r19
    2636:	84 07       	cpc	r24, r20
    2638:	ba 07       	cpc	r27, r26
    263a:	20 f0       	brcs	.+8      	; 0x2644 <__divsf3_pse+0xae>
    263c:	62 1b       	sub	r22, r18
    263e:	73 0b       	sbc	r23, r19
    2640:	84 0b       	sbc	r24, r20
    2642:	ba 0b       	sbc	r27, r26
    2644:	ee 1f       	adc	r30, r30
    2646:	88 f7       	brcc	.-30     	; 0x262a <__divsf3_pse+0x94>
    2648:	e0 95       	com	r30
    264a:	08 95       	ret

0000264c <__fixsfsi>:
    264c:	0e 94 2d 13 	call	0x265a	; 0x265a <__fixunssfsi>
    2650:	68 94       	set
    2652:	b1 11       	cpse	r27, r1
    2654:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__fp_szero>
    2658:	08 95       	ret

0000265a <__fixunssfsi>:
    265a:	0e 94 ed 13 	call	0x27da	; 0x27da <__fp_splitA>
    265e:	88 f0       	brcs	.+34     	; 0x2682 <__fixunssfsi+0x28>
    2660:	9f 57       	subi	r25, 0x7F	; 127
    2662:	98 f0       	brcs	.+38     	; 0x268a <__fixunssfsi+0x30>
    2664:	b9 2f       	mov	r27, r25
    2666:	99 27       	eor	r25, r25
    2668:	b7 51       	subi	r27, 0x17	; 23
    266a:	b0 f0       	brcs	.+44     	; 0x2698 <__fixunssfsi+0x3e>
    266c:	e1 f0       	breq	.+56     	; 0x26a6 <__fixunssfsi+0x4c>
    266e:	66 0f       	add	r22, r22
    2670:	77 1f       	adc	r23, r23
    2672:	88 1f       	adc	r24, r24
    2674:	99 1f       	adc	r25, r25
    2676:	1a f0       	brmi	.+6      	; 0x267e <__fixunssfsi+0x24>
    2678:	ba 95       	dec	r27
    267a:	c9 f7       	brne	.-14     	; 0x266e <__fixunssfsi+0x14>
    267c:	14 c0       	rjmp	.+40     	; 0x26a6 <__fixunssfsi+0x4c>
    267e:	b1 30       	cpi	r27, 0x01	; 1
    2680:	91 f0       	breq	.+36     	; 0x26a6 <__fixunssfsi+0x4c>
    2682:	0e 94 07 14 	call	0x280e	; 0x280e <__fp_zero>
    2686:	b1 e0       	ldi	r27, 0x01	; 1
    2688:	08 95       	ret
    268a:	0c 94 07 14 	jmp	0x280e	; 0x280e <__fp_zero>
    268e:	67 2f       	mov	r22, r23
    2690:	78 2f       	mov	r23, r24
    2692:	88 27       	eor	r24, r24
    2694:	b8 5f       	subi	r27, 0xF8	; 248
    2696:	39 f0       	breq	.+14     	; 0x26a6 <__fixunssfsi+0x4c>
    2698:	b9 3f       	cpi	r27, 0xF9	; 249
    269a:	cc f3       	brlt	.-14     	; 0x268e <__fixunssfsi+0x34>
    269c:	86 95       	lsr	r24
    269e:	77 95       	ror	r23
    26a0:	67 95       	ror	r22
    26a2:	b3 95       	inc	r27
    26a4:	d9 f7       	brne	.-10     	; 0x269c <__fixunssfsi+0x42>
    26a6:	3e f4       	brtc	.+14     	; 0x26b6 <__fixunssfsi+0x5c>
    26a8:	90 95       	com	r25
    26aa:	80 95       	com	r24
    26ac:	70 95       	com	r23
    26ae:	61 95       	neg	r22
    26b0:	7f 4f       	sbci	r23, 0xFF	; 255
    26b2:	8f 4f       	sbci	r24, 0xFF	; 255
    26b4:	9f 4f       	sbci	r25, 0xFF	; 255
    26b6:	08 95       	ret

000026b8 <__floatunsisf>:
    26b8:	e8 94       	clt
    26ba:	09 c0       	rjmp	.+18     	; 0x26ce <__floatsisf+0x12>

000026bc <__floatsisf>:
    26bc:	97 fb       	bst	r25, 7
    26be:	3e f4       	brtc	.+14     	; 0x26ce <__floatsisf+0x12>
    26c0:	90 95       	com	r25
    26c2:	80 95       	com	r24
    26c4:	70 95       	com	r23
    26c6:	61 95       	neg	r22
    26c8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ca:	8f 4f       	sbci	r24, 0xFF	; 255
    26cc:	9f 4f       	sbci	r25, 0xFF	; 255
    26ce:	99 23       	and	r25, r25
    26d0:	a9 f0       	breq	.+42     	; 0x26fc <__floatsisf+0x40>
    26d2:	f9 2f       	mov	r31, r25
    26d4:	96 e9       	ldi	r25, 0x96	; 150
    26d6:	bb 27       	eor	r27, r27
    26d8:	93 95       	inc	r25
    26da:	f6 95       	lsr	r31
    26dc:	87 95       	ror	r24
    26de:	77 95       	ror	r23
    26e0:	67 95       	ror	r22
    26e2:	b7 95       	ror	r27
    26e4:	f1 11       	cpse	r31, r1
    26e6:	f8 cf       	rjmp	.-16     	; 0x26d8 <__floatsisf+0x1c>
    26e8:	fa f4       	brpl	.+62     	; 0x2728 <__floatsisf+0x6c>
    26ea:	bb 0f       	add	r27, r27
    26ec:	11 f4       	brne	.+4      	; 0x26f2 <__floatsisf+0x36>
    26ee:	60 ff       	sbrs	r22, 0
    26f0:	1b c0       	rjmp	.+54     	; 0x2728 <__floatsisf+0x6c>
    26f2:	6f 5f       	subi	r22, 0xFF	; 255
    26f4:	7f 4f       	sbci	r23, 0xFF	; 255
    26f6:	8f 4f       	sbci	r24, 0xFF	; 255
    26f8:	9f 4f       	sbci	r25, 0xFF	; 255
    26fa:	16 c0       	rjmp	.+44     	; 0x2728 <__floatsisf+0x6c>
    26fc:	88 23       	and	r24, r24
    26fe:	11 f0       	breq	.+4      	; 0x2704 <__floatsisf+0x48>
    2700:	96 e9       	ldi	r25, 0x96	; 150
    2702:	11 c0       	rjmp	.+34     	; 0x2726 <__floatsisf+0x6a>
    2704:	77 23       	and	r23, r23
    2706:	21 f0       	breq	.+8      	; 0x2710 <__floatsisf+0x54>
    2708:	9e e8       	ldi	r25, 0x8E	; 142
    270a:	87 2f       	mov	r24, r23
    270c:	76 2f       	mov	r23, r22
    270e:	05 c0       	rjmp	.+10     	; 0x271a <__floatsisf+0x5e>
    2710:	66 23       	and	r22, r22
    2712:	71 f0       	breq	.+28     	; 0x2730 <__floatsisf+0x74>
    2714:	96 e8       	ldi	r25, 0x86	; 134
    2716:	86 2f       	mov	r24, r22
    2718:	70 e0       	ldi	r23, 0x00	; 0
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	2a f0       	brmi	.+10     	; 0x2728 <__floatsisf+0x6c>
    271e:	9a 95       	dec	r25
    2720:	66 0f       	add	r22, r22
    2722:	77 1f       	adc	r23, r23
    2724:	88 1f       	adc	r24, r24
    2726:	da f7       	brpl	.-10     	; 0x271e <__floatsisf+0x62>
    2728:	88 0f       	add	r24, r24
    272a:	96 95       	lsr	r25
    272c:	87 95       	ror	r24
    272e:	97 f9       	bld	r25, 7
    2730:	08 95       	ret

00002732 <__fp_cmp>:
    2732:	99 0f       	add	r25, r25
    2734:	00 08       	sbc	r0, r0
    2736:	55 0f       	add	r21, r21
    2738:	aa 0b       	sbc	r26, r26
    273a:	e0 e8       	ldi	r30, 0x80	; 128
    273c:	fe ef       	ldi	r31, 0xFE	; 254
    273e:	16 16       	cp	r1, r22
    2740:	17 06       	cpc	r1, r23
    2742:	e8 07       	cpc	r30, r24
    2744:	f9 07       	cpc	r31, r25
    2746:	c0 f0       	brcs	.+48     	; 0x2778 <__fp_cmp+0x46>
    2748:	12 16       	cp	r1, r18
    274a:	13 06       	cpc	r1, r19
    274c:	e4 07       	cpc	r30, r20
    274e:	f5 07       	cpc	r31, r21
    2750:	98 f0       	brcs	.+38     	; 0x2778 <__fp_cmp+0x46>
    2752:	62 1b       	sub	r22, r18
    2754:	73 0b       	sbc	r23, r19
    2756:	84 0b       	sbc	r24, r20
    2758:	95 0b       	sbc	r25, r21
    275a:	39 f4       	brne	.+14     	; 0x276a <__fp_cmp+0x38>
    275c:	0a 26       	eor	r0, r26
    275e:	61 f0       	breq	.+24     	; 0x2778 <__fp_cmp+0x46>
    2760:	23 2b       	or	r18, r19
    2762:	24 2b       	or	r18, r20
    2764:	25 2b       	or	r18, r21
    2766:	21 f4       	brne	.+8      	; 0x2770 <__fp_cmp+0x3e>
    2768:	08 95       	ret
    276a:	0a 26       	eor	r0, r26
    276c:	09 f4       	brne	.+2      	; 0x2770 <__fp_cmp+0x3e>
    276e:	a1 40       	sbci	r26, 0x01	; 1
    2770:	a6 95       	lsr	r26
    2772:	8f ef       	ldi	r24, 0xFF	; 255
    2774:	81 1d       	adc	r24, r1
    2776:	81 1d       	adc	r24, r1
    2778:	08 95       	ret

0000277a <__fp_inf>:
    277a:	97 f9       	bld	r25, 7
    277c:	9f 67       	ori	r25, 0x7F	; 127
    277e:	80 e8       	ldi	r24, 0x80	; 128
    2780:	70 e0       	ldi	r23, 0x00	; 0
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	08 95       	ret

00002786 <__fp_nan>:
    2786:	9f ef       	ldi	r25, 0xFF	; 255
    2788:	80 ec       	ldi	r24, 0xC0	; 192
    278a:	08 95       	ret

0000278c <__fp_pscA>:
    278c:	00 24       	eor	r0, r0
    278e:	0a 94       	dec	r0
    2790:	16 16       	cp	r1, r22
    2792:	17 06       	cpc	r1, r23
    2794:	18 06       	cpc	r1, r24
    2796:	09 06       	cpc	r0, r25
    2798:	08 95       	ret

0000279a <__fp_pscB>:
    279a:	00 24       	eor	r0, r0
    279c:	0a 94       	dec	r0
    279e:	12 16       	cp	r1, r18
    27a0:	13 06       	cpc	r1, r19
    27a2:	14 06       	cpc	r1, r20
    27a4:	05 06       	cpc	r0, r21
    27a6:	08 95       	ret

000027a8 <__fp_round>:
    27a8:	09 2e       	mov	r0, r25
    27aa:	03 94       	inc	r0
    27ac:	00 0c       	add	r0, r0
    27ae:	11 f4       	brne	.+4      	; 0x27b4 <__fp_round+0xc>
    27b0:	88 23       	and	r24, r24
    27b2:	52 f0       	brmi	.+20     	; 0x27c8 <__fp_round+0x20>
    27b4:	bb 0f       	add	r27, r27
    27b6:	40 f4       	brcc	.+16     	; 0x27c8 <__fp_round+0x20>
    27b8:	bf 2b       	or	r27, r31
    27ba:	11 f4       	brne	.+4      	; 0x27c0 <__fp_round+0x18>
    27bc:	60 ff       	sbrs	r22, 0
    27be:	04 c0       	rjmp	.+8      	; 0x27c8 <__fp_round+0x20>
    27c0:	6f 5f       	subi	r22, 0xFF	; 255
    27c2:	7f 4f       	sbci	r23, 0xFF	; 255
    27c4:	8f 4f       	sbci	r24, 0xFF	; 255
    27c6:	9f 4f       	sbci	r25, 0xFF	; 255
    27c8:	08 95       	ret

000027ca <__fp_split3>:
    27ca:	57 fd       	sbrc	r21, 7
    27cc:	90 58       	subi	r25, 0x80	; 128
    27ce:	44 0f       	add	r20, r20
    27d0:	55 1f       	adc	r21, r21
    27d2:	59 f0       	breq	.+22     	; 0x27ea <__fp_splitA+0x10>
    27d4:	5f 3f       	cpi	r21, 0xFF	; 255
    27d6:	71 f0       	breq	.+28     	; 0x27f4 <__fp_splitA+0x1a>
    27d8:	47 95       	ror	r20

000027da <__fp_splitA>:
    27da:	88 0f       	add	r24, r24
    27dc:	97 fb       	bst	r25, 7
    27de:	99 1f       	adc	r25, r25
    27e0:	61 f0       	breq	.+24     	; 0x27fa <__fp_splitA+0x20>
    27e2:	9f 3f       	cpi	r25, 0xFF	; 255
    27e4:	79 f0       	breq	.+30     	; 0x2804 <__fp_splitA+0x2a>
    27e6:	87 95       	ror	r24
    27e8:	08 95       	ret
    27ea:	12 16       	cp	r1, r18
    27ec:	13 06       	cpc	r1, r19
    27ee:	14 06       	cpc	r1, r20
    27f0:	55 1f       	adc	r21, r21
    27f2:	f2 cf       	rjmp	.-28     	; 0x27d8 <__fp_split3+0xe>
    27f4:	46 95       	lsr	r20
    27f6:	f1 df       	rcall	.-30     	; 0x27da <__fp_splitA>
    27f8:	08 c0       	rjmp	.+16     	; 0x280a <__fp_splitA+0x30>
    27fa:	16 16       	cp	r1, r22
    27fc:	17 06       	cpc	r1, r23
    27fe:	18 06       	cpc	r1, r24
    2800:	99 1f       	adc	r25, r25
    2802:	f1 cf       	rjmp	.-30     	; 0x27e6 <__fp_splitA+0xc>
    2804:	86 95       	lsr	r24
    2806:	71 05       	cpc	r23, r1
    2808:	61 05       	cpc	r22, r1
    280a:	08 94       	sec
    280c:	08 95       	ret

0000280e <__fp_zero>:
    280e:	e8 94       	clt

00002810 <__fp_szero>:
    2810:	bb 27       	eor	r27, r27
    2812:	66 27       	eor	r22, r22
    2814:	77 27       	eor	r23, r23
    2816:	cb 01       	movw	r24, r22
    2818:	97 f9       	bld	r25, 7
    281a:	08 95       	ret

0000281c <__gesf2>:
    281c:	0e 94 99 13 	call	0x2732	; 0x2732 <__fp_cmp>
    2820:	08 f4       	brcc	.+2      	; 0x2824 <__gesf2+0x8>
    2822:	8f ef       	ldi	r24, 0xFF	; 255
    2824:	08 95       	ret

00002826 <__mulsf3>:
    2826:	0e 94 26 14 	call	0x284c	; 0x284c <__mulsf3x>
    282a:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <__fp_round>
    282e:	0e 94 c6 13 	call	0x278c	; 0x278c <__fp_pscA>
    2832:	38 f0       	brcs	.+14     	; 0x2842 <__mulsf3+0x1c>
    2834:	0e 94 cd 13 	call	0x279a	; 0x279a <__fp_pscB>
    2838:	20 f0       	brcs	.+8      	; 0x2842 <__mulsf3+0x1c>
    283a:	95 23       	and	r25, r21
    283c:	11 f0       	breq	.+4      	; 0x2842 <__mulsf3+0x1c>
    283e:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__fp_inf>
    2842:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__fp_nan>
    2846:	11 24       	eor	r1, r1
    2848:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__fp_szero>

0000284c <__mulsf3x>:
    284c:	0e 94 e5 13 	call	0x27ca	; 0x27ca <__fp_split3>
    2850:	70 f3       	brcs	.-36     	; 0x282e <__mulsf3+0x8>

00002852 <__mulsf3_pse>:
    2852:	95 9f       	mul	r25, r21
    2854:	c1 f3       	breq	.-16     	; 0x2846 <__mulsf3+0x20>
    2856:	95 0f       	add	r25, r21
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	55 1f       	adc	r21, r21
    285c:	62 9f       	mul	r22, r18
    285e:	f0 01       	movw	r30, r0
    2860:	72 9f       	mul	r23, r18
    2862:	bb 27       	eor	r27, r27
    2864:	f0 0d       	add	r31, r0
    2866:	b1 1d       	adc	r27, r1
    2868:	63 9f       	mul	r22, r19
    286a:	aa 27       	eor	r26, r26
    286c:	f0 0d       	add	r31, r0
    286e:	b1 1d       	adc	r27, r1
    2870:	aa 1f       	adc	r26, r26
    2872:	64 9f       	mul	r22, r20
    2874:	66 27       	eor	r22, r22
    2876:	b0 0d       	add	r27, r0
    2878:	a1 1d       	adc	r26, r1
    287a:	66 1f       	adc	r22, r22
    287c:	82 9f       	mul	r24, r18
    287e:	22 27       	eor	r18, r18
    2880:	b0 0d       	add	r27, r0
    2882:	a1 1d       	adc	r26, r1
    2884:	62 1f       	adc	r22, r18
    2886:	73 9f       	mul	r23, r19
    2888:	b0 0d       	add	r27, r0
    288a:	a1 1d       	adc	r26, r1
    288c:	62 1f       	adc	r22, r18
    288e:	83 9f       	mul	r24, r19
    2890:	a0 0d       	add	r26, r0
    2892:	61 1d       	adc	r22, r1
    2894:	22 1f       	adc	r18, r18
    2896:	74 9f       	mul	r23, r20
    2898:	33 27       	eor	r19, r19
    289a:	a0 0d       	add	r26, r0
    289c:	61 1d       	adc	r22, r1
    289e:	23 1f       	adc	r18, r19
    28a0:	84 9f       	mul	r24, r20
    28a2:	60 0d       	add	r22, r0
    28a4:	21 1d       	adc	r18, r1
    28a6:	82 2f       	mov	r24, r18
    28a8:	76 2f       	mov	r23, r22
    28aa:	6a 2f       	mov	r22, r26
    28ac:	11 24       	eor	r1, r1
    28ae:	9f 57       	subi	r25, 0x7F	; 127
    28b0:	50 40       	sbci	r21, 0x00	; 0
    28b2:	9a f0       	brmi	.+38     	; 0x28da <__mulsf3_pse+0x88>
    28b4:	f1 f0       	breq	.+60     	; 0x28f2 <__mulsf3_pse+0xa0>
    28b6:	88 23       	and	r24, r24
    28b8:	4a f0       	brmi	.+18     	; 0x28cc <__mulsf3_pse+0x7a>
    28ba:	ee 0f       	add	r30, r30
    28bc:	ff 1f       	adc	r31, r31
    28be:	bb 1f       	adc	r27, r27
    28c0:	66 1f       	adc	r22, r22
    28c2:	77 1f       	adc	r23, r23
    28c4:	88 1f       	adc	r24, r24
    28c6:	91 50       	subi	r25, 0x01	; 1
    28c8:	50 40       	sbci	r21, 0x00	; 0
    28ca:	a9 f7       	brne	.-22     	; 0x28b6 <__mulsf3_pse+0x64>
    28cc:	9e 3f       	cpi	r25, 0xFE	; 254
    28ce:	51 05       	cpc	r21, r1
    28d0:	80 f0       	brcs	.+32     	; 0x28f2 <__mulsf3_pse+0xa0>
    28d2:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__fp_inf>
    28d6:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__fp_szero>
    28da:	5f 3f       	cpi	r21, 0xFF	; 255
    28dc:	e4 f3       	brlt	.-8      	; 0x28d6 <__mulsf3_pse+0x84>
    28de:	98 3e       	cpi	r25, 0xE8	; 232
    28e0:	d4 f3       	brlt	.-12     	; 0x28d6 <__mulsf3_pse+0x84>
    28e2:	86 95       	lsr	r24
    28e4:	77 95       	ror	r23
    28e6:	67 95       	ror	r22
    28e8:	b7 95       	ror	r27
    28ea:	f7 95       	ror	r31
    28ec:	e7 95       	ror	r30
    28ee:	9f 5f       	subi	r25, 0xFF	; 255
    28f0:	c1 f7       	brne	.-16     	; 0x28e2 <__mulsf3_pse+0x90>
    28f2:	fe 2b       	or	r31, r30
    28f4:	88 0f       	add	r24, r24
    28f6:	91 1d       	adc	r25, r1
    28f8:	96 95       	lsr	r25
    28fa:	87 95       	ror	r24
    28fc:	97 f9       	bld	r25, 7
    28fe:	08 95       	ret
    2900:	19 f4       	brne	.+6      	; 0x2908 <__mulsf3_pse+0xb6>
    2902:	16 f4       	brtc	.+4      	; 0x2908 <__mulsf3_pse+0xb6>
    2904:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__fp_nan>
    2908:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__fp_mpack>

0000290c <sqrt>:
    290c:	0e 94 ed 13 	call	0x27da	; 0x27da <__fp_splitA>
    2910:	b8 f3       	brcs	.-18     	; 0x2900 <__mulsf3_pse+0xae>
    2912:	99 23       	and	r25, r25
    2914:	c9 f3       	breq	.-14     	; 0x2908 <__mulsf3_pse+0xb6>
    2916:	b6 f3       	brts	.-20     	; 0x2904 <__mulsf3_pse+0xb2>
    2918:	9f 57       	subi	r25, 0x7F	; 127
    291a:	55 0b       	sbc	r21, r21
    291c:	87 ff       	sbrs	r24, 7
    291e:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__fp_norm2>
    2922:	00 24       	eor	r0, r0
    2924:	a0 e6       	ldi	r26, 0x60	; 96
    2926:	40 ea       	ldi	r20, 0xA0	; 160
    2928:	90 01       	movw	r18, r0
    292a:	80 58       	subi	r24, 0x80	; 128
    292c:	56 95       	lsr	r21
    292e:	97 95       	ror	r25
    2930:	28 f4       	brcc	.+10     	; 0x293c <sqrt+0x30>
    2932:	80 5c       	subi	r24, 0xC0	; 192
    2934:	66 0f       	add	r22, r22
    2936:	77 1f       	adc	r23, r23
    2938:	88 1f       	adc	r24, r24
    293a:	20 f0       	brcs	.+8      	; 0x2944 <sqrt+0x38>
    293c:	26 17       	cp	r18, r22
    293e:	37 07       	cpc	r19, r23
    2940:	48 07       	cpc	r20, r24
    2942:	30 f4       	brcc	.+12     	; 0x2950 <sqrt+0x44>
    2944:	62 1b       	sub	r22, r18
    2946:	73 0b       	sbc	r23, r19
    2948:	84 0b       	sbc	r24, r20
    294a:	20 29       	or	r18, r0
    294c:	31 29       	or	r19, r1
    294e:	4a 2b       	or	r20, r26
    2950:	a6 95       	lsr	r26
    2952:	17 94       	ror	r1
    2954:	07 94       	ror	r0
    2956:	20 25       	eor	r18, r0
    2958:	31 25       	eor	r19, r1
    295a:	4a 27       	eor	r20, r26
    295c:	58 f7       	brcc	.-42     	; 0x2934 <sqrt+0x28>
    295e:	66 0f       	add	r22, r22
    2960:	77 1f       	adc	r23, r23
    2962:	88 1f       	adc	r24, r24
    2964:	20 f0       	brcs	.+8      	; 0x296e <sqrt+0x62>
    2966:	26 17       	cp	r18, r22
    2968:	37 07       	cpc	r19, r23
    296a:	48 07       	cpc	r20, r24
    296c:	30 f4       	brcc	.+12     	; 0x297a <sqrt+0x6e>
    296e:	62 0b       	sbc	r22, r18
    2970:	73 0b       	sbc	r23, r19
    2972:	84 0b       	sbc	r24, r20
    2974:	20 0d       	add	r18, r0
    2976:	31 1d       	adc	r19, r1
    2978:	41 1d       	adc	r20, r1
    297a:	a0 95       	com	r26
    297c:	81 f7       	brne	.-32     	; 0x295e <sqrt+0x52>
    297e:	b9 01       	movw	r22, r18
    2980:	84 2f       	mov	r24, r20
    2982:	91 58       	subi	r25, 0x81	; 129
    2984:	88 0f       	add	r24, r24
    2986:	96 95       	lsr	r25
    2988:	87 95       	ror	r24
    298a:	08 95       	ret

0000298c <__fp_mpack>:
    298c:	9f 3f       	cpi	r25, 0xFF	; 255
    298e:	31 f0       	breq	.+12     	; 0x299c <__fp_mpack_finite+0xc>

00002990 <__fp_mpack_finite>:
    2990:	91 50       	subi	r25, 0x01	; 1
    2992:	20 f4       	brcc	.+8      	; 0x299c <__fp_mpack_finite+0xc>
    2994:	87 95       	ror	r24
    2996:	77 95       	ror	r23
    2998:	67 95       	ror	r22
    299a:	b7 95       	ror	r27
    299c:	88 0f       	add	r24, r24
    299e:	91 1d       	adc	r25, r1
    29a0:	96 95       	lsr	r25
    29a2:	87 95       	ror	r24
    29a4:	97 f9       	bld	r25, 7
    29a6:	08 95       	ret

000029a8 <__fp_norm2>:
    29a8:	91 50       	subi	r25, 0x01	; 1
    29aa:	50 40       	sbci	r21, 0x00	; 0
    29ac:	66 0f       	add	r22, r22
    29ae:	77 1f       	adc	r23, r23
    29b0:	88 1f       	adc	r24, r24
    29b2:	d2 f7       	brpl	.-12     	; 0x29a8 <__fp_norm2>
    29b4:	08 95       	ret

000029b6 <__divmodhi4>:
    29b6:	97 fb       	bst	r25, 7
    29b8:	07 2e       	mov	r0, r23
    29ba:	16 f4       	brtc	.+4      	; 0x29c0 <__divmodhi4+0xa>
    29bc:	00 94       	com	r0
    29be:	07 d0       	rcall	.+14     	; 0x29ce <__divmodhi4_neg1>
    29c0:	77 fd       	sbrc	r23, 7
    29c2:	09 d0       	rcall	.+18     	; 0x29d6 <__divmodhi4_neg2>
    29c4:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__udivmodhi4>
    29c8:	07 fc       	sbrc	r0, 7
    29ca:	05 d0       	rcall	.+10     	; 0x29d6 <__divmodhi4_neg2>
    29cc:	3e f4       	brtc	.+14     	; 0x29dc <__divmodhi4_exit>

000029ce <__divmodhi4_neg1>:
    29ce:	90 95       	com	r25
    29d0:	81 95       	neg	r24
    29d2:	9f 4f       	sbci	r25, 0xFF	; 255
    29d4:	08 95       	ret

000029d6 <__divmodhi4_neg2>:
    29d6:	70 95       	com	r23
    29d8:	61 95       	neg	r22
    29da:	7f 4f       	sbci	r23, 0xFF	; 255

000029dc <__divmodhi4_exit>:
    29dc:	08 95       	ret

000029de <__umulhisi3>:
    29de:	a2 9f       	mul	r26, r18
    29e0:	b0 01       	movw	r22, r0
    29e2:	b3 9f       	mul	r27, r19
    29e4:	c0 01       	movw	r24, r0
    29e6:	a3 9f       	mul	r26, r19
    29e8:	70 0d       	add	r23, r0
    29ea:	81 1d       	adc	r24, r1
    29ec:	11 24       	eor	r1, r1
    29ee:	91 1d       	adc	r25, r1
    29f0:	b2 9f       	mul	r27, r18
    29f2:	70 0d       	add	r23, r0
    29f4:	81 1d       	adc	r24, r1
    29f6:	11 24       	eor	r1, r1
    29f8:	91 1d       	adc	r25, r1
    29fa:	08 95       	ret

000029fc <__udivmodhi4>:
    29fc:	aa 1b       	sub	r26, r26
    29fe:	bb 1b       	sub	r27, r27
    2a00:	51 e1       	ldi	r21, 0x11	; 17
    2a02:	07 c0       	rjmp	.+14     	; 0x2a12 <__udivmodhi4_ep>

00002a04 <__udivmodhi4_loop>:
    2a04:	aa 1f       	adc	r26, r26
    2a06:	bb 1f       	adc	r27, r27
    2a08:	a6 17       	cp	r26, r22
    2a0a:	b7 07       	cpc	r27, r23
    2a0c:	10 f0       	brcs	.+4      	; 0x2a12 <__udivmodhi4_ep>
    2a0e:	a6 1b       	sub	r26, r22
    2a10:	b7 0b       	sbc	r27, r23

00002a12 <__udivmodhi4_ep>:
    2a12:	88 1f       	adc	r24, r24
    2a14:	99 1f       	adc	r25, r25
    2a16:	5a 95       	dec	r21
    2a18:	a9 f7       	brne	.-22     	; 0x2a04 <__udivmodhi4_loop>
    2a1a:	80 95       	com	r24
    2a1c:	90 95       	com	r25
    2a1e:	bc 01       	movw	r22, r24
    2a20:	cd 01       	movw	r24, r26
    2a22:	08 95       	ret

00002a24 <_exit>:
    2a24:	f8 94       	cli

00002a26 <__stop_program>:
    2a26:	ff cf       	rjmp	.-2      	; 0x2a26 <__stop_program>
